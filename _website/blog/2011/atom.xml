<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Alex Clark's Blog - Posted in 2011</title>
  <id>http://blog.aclark.net/blog/2011/atom.xml</id>
  <updated>2011-11-29T00:00:00Z</updated>
  <link href="http://blog.aclark.net" />
  <link href="http://blog.aclark.net/blog/2011/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.8.3">ABlog</generator>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Plone.org maintenance</title>
    <id>http://blog.aclark.net/2011/11/29/plone-org-maintenance/</id>
    <updated>2011-11-29T00:00:00Z</updated>
    <published>2011-11-29T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/11/29/plone-org-maintenance/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-org-maintenance&quot;&gt;

&lt;p&gt;&lt;strong&gt;I am planning to do some work on the plone.org server and website by the end of the year.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Including:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;plans&quot;&gt;
&lt;h2&gt;Plans&lt;/h2&gt;
&lt;p&gt;Upgrade to the latest 4.2.x series&lt;/p&gt;
&lt;p&gt;Switch from xdv to &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/plone.app.theming&quot;&gt;plone.app.theming&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Reduce the number of NGINXes running on the server by 1 (we currently have an nginx doing the xdv transform)&lt;/li&gt;
&lt;li&gt;Repackage the current plone.org theme as plonetheme.ploneorg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clean up the server&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Separate vendor package configs from buildout generated configs&lt;/li&gt;
&lt;li&gt;Remove archived files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prune tickets on &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/&quot;&gt;dev.plone.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve done some of this work already, earlier this year:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plone/Products.PloneOrg/commits/4.1-compat&quot;&gt;https://github.com/plone/Products.PloneOrg/commits/4.1-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;pitch&quot;&gt;
&lt;h2&gt;Pitch&lt;/h2&gt;
&lt;p&gt;To ensure it gets done by the end of the year, I would like to add this project to my calendar as paid work. So if you are able to help out by donating some portion of the goal, I would appreciate it. Please use the chip-in below to contribute to this effort.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Introducing pythonpackages.com</title>
    <id>http://blog.aclark.net/2011/11/29/introducing-pythonpackages-com/</id>
    <updated>2011-11-29T00:00:00Z</updated>
    <published>2011-11-29T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/11/29/introducing-pythonpackages-com/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;introducing-pythonpackages-com&quot;&gt;

&lt;p&gt;&lt;strong&gt;The website for Python egoists™&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have this overwhelming desire to know how many times my favorite Python packages have been downloaded. Don&amp;#8217;t you? If so, look no further than &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;count-downloads&quot;&gt;
&lt;h2&gt;Count downloads&lt;/h2&gt;
&lt;p&gt;Where you can enter a package like &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/django&quot;&gt;Django&lt;/a&gt; and find out the number of downloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;count-favorites&quot;&gt;
&lt;h2&gt;Count favorites&lt;/h2&gt;
&lt;p&gt;Or click on &lt;strong&gt;Count favorites&lt;/strong&gt; to reveal how many times it has been favorited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;find-trash&quot;&gt;
&lt;h2&gt;Find trash&lt;/h2&gt;
&lt;p&gt;Or even poke some good natured fun at it, for its &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/trash/django&quot;&gt;failure to provide adequate package metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;discuss-packages&quot;&gt;
&lt;h2&gt;Discuss packages&lt;/h2&gt;
&lt;p&gt;You can even &lt;em&gt;discuss&lt;/em&gt;packages on &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;recent-activity&quot;&gt;
&lt;h2&gt;Recent activity&lt;/h2&gt;
&lt;p&gt;But wait there is more! You can also browse the &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/pypi&quot;&gt;latest changelog activity&lt;/a&gt; from PyPi right on the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;package-info&quot;&gt;
&lt;h2&gt;Package info&lt;/h2&gt;
&lt;p&gt;Lastly, if you get bored counting package downloads and favorites you can look at the &lt;em&gt;actual&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/django&quot;&gt;package metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Sound interesting? Or utterly silly, perhaps? I think &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt; is the best of both. It started off as a front end to the command line utility &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/vanity&quot;&gt;vanity&lt;/a&gt;, but has taken on a life of it&amp;#8217;s own.&lt;/p&gt;
&lt;p&gt;After a small run on Python reddit and Hacker News, I&amp;#8217;m looking forward to seeing what Python Planet folks think. So please check out &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt; and let me know. You can leave comments about the site here.&lt;/p&gt;
&lt;p&gt;Or open a new ticket here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new&quot;&gt;https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">New Year's Python Meme 2011</title>
    <id>http://blog.aclark.net/2011/12/21/new-years-python-meme-2011/</id>
    <updated>2011-11-21T00:00:00Z</updated>
    <published>2011-11-21T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/12/21/new-years-python-meme-2011/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-year-s-python-meme-2011&quot;&gt;

&lt;p&gt;&lt;strong&gt;My response&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My response to &lt;a class=&quot;reference external&quot; href=&quot;http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/&quot;&gt;http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was fun &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2009/12/31/new-years-python-meme/&quot;&gt;answering in 2009&lt;/a&gt;, so I thought I&amp;#8217;d play again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s the coolest Python application, framework or library you have discovered in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.pylonsproject.org/&quot;&gt;Pyramid&lt;/a&gt;. In early 2011 I released &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/vanity&quot;&gt;vanity&lt;/a&gt;, which later became &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt;(more or less). I used building the site as an excuse to learn Pyramid, and it was well worth it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What new programming technique did you learn in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I learned to &lt;strong&gt;not&lt;/strong&gt; reinvent the wheel, and to collaborate with others on solving hard problems (which in and of itself is hard). Long story short, I took a little bit of heat within the Plone CMS community for creating a &amp;#8220;one off&amp;#8221; migration script:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/parse2plone&quot;&gt;http://pythonpackages.com/info/parse2plone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ve since learned my lesson and have been collaborating meaningfully with &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/#!/djay75&quot;&gt;Dylan Jay&lt;/a&gt;on the more widely-supported &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/mr.migrator&quot;&gt;mr.migrator&lt;/a&gt; and friends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s the name of the open source project you contributed to the most in 2011? What did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I contributed to the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org&quot;&gt;Plone&lt;/a&gt; project quite a bit (as I have been doing for years now), but I also fell in love with &lt;a class=&quot;reference external&quot; href=&quot;http://mozilla.org&quot;&gt;Mozilla&lt;/a&gt; (and their mission) and began working on various things, including a virtual machine to help with the development of &lt;a class=&quot;reference external&quot; href=&quot;http://support.mozilla.com&quot;&gt;support.mozilla.com&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/kitsune-vagrant&quot;&gt;https://github.com/aclark4life/kitsune-vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What was the Python blog or website you read the most in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://news.ycombinator.com/&quot;&gt;Hacker news&lt;/a&gt;. I have the start-up bug.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are the three top things you want to learn in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript, JavaScript, and JavaScript. I first heard the term 15 years ago and have been avoiding it ever since. Time to jump in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the top software, application or library you wish someone would write in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope someone (me) writes a &amp;#8220;secret&amp;#8221; feature for &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt; and launches it in first quarter of 2012; and I hope folks find it useful.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Plone secrets: Episode 4 - Varnish in front</title>
    <id>http://blog.aclark.net/2011/11/09/plone-secrets-episode-4-varnish-in-front/</id>
    <updated>2011-11-09T00:00:00Z</updated>
    <published>2011-11-09T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/11/09/plone-secrets-episode-4-varnish-in-front/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-secrets-episode-4-varnish-in-front&quot;&gt;

&lt;p&gt;&lt;strong&gt;This just in from the production department: use Varnish. (And please forgive the heavily meme-laden approach to describing these techniques.)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;cache-all-the-hosts&quot;&gt;
&lt;h2&gt;Cache ALL the hosts&lt;/h2&gt;
&lt;p&gt;Our ability to use Varnish in production is no secret by now, or at least it shouldn&amp;#8217;t be. What is often less clear is exactly how to use it. One way I like[1], is to run Varnish on your public IP port 80 and make Apache listen on your private IP port 80. Then proxy from Varnish to Apache and enjoy easy caching goodness on all your virtual hosts in Apache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;configuration&quot;&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;This should require less than five minutes of down time to implement. First, configure the appropriate settings. (Well, first install Apache and Varnish if you haven&amp;#8217;t already: `aptitude install varnish apache2` on Ubuntu Linux[0].)&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;varnish&quot;&gt;
&lt;h3&gt;Varnish&lt;/h3&gt;
&lt;p&gt;To modify the listen IP address and port, we typically edit a file like &lt;em&gt;/etc/default/varnish&lt;/em&gt; (in Ubuntu). However you do it, configure the equivalent of the following on your system:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DAEMON_OPTS=&amp;quot;-a 174.143.252.11:80
             -T localhost:6082
             -f /etc/varnish/default.vcl
             -s malloc,256m&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This environment variable is then passed to &lt;em&gt;varnishd&lt;/em&gt; on the command line. Next, pass traffic to Apache like so (in &lt;em&gt;/etc/varnish/default.vcl&lt;/em&gt; on Ubuntu):&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;backend default {
 .host = &amp;quot;127.0.0.1&amp;quot;;
 .port = &amp;quot;80&amp;quot;;
 }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now on to Apache.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*Please note that the syntax above is for Varnish 3.x and the syntax has (annoyingly) changed from 2.x to 3.x.*&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;apache&quot;&gt;
&lt;h3&gt;Apache&lt;/h3&gt;
&lt;p&gt;The Apache part is a bit simpler. You just need to change the listen port (on Ubuntu this is done in &lt;em&gt;/etc/apache2/ports.conf&lt;/em&gt;), typically from something like:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Listen *:80
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Listen 127.0.0.1:80
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;restart-all-the-services&quot;&gt;
&lt;h2&gt;Restart ALL the services&lt;/h2&gt;
&lt;p&gt;Now restart both services. If all goes well you shouldn&amp;#8217;t notice any difference, except better performance, and when you make a website change and need to clear the cache[2]. For this, I rely on telnetting to the varnish port and issuing the `ban.url` command (formerly `url.purge` in 2.x):&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ telnet localhost 6082
Trying 127.0.0.1...
Connected to localhost.
Escape character is &amp;#39;^]&amp;#39;.
200 205
-----------------------------
Varnish Cache CLI 1.0
-----------------------------
Linux,2.6.35.4-rscloud,x86_64,-smalloc,-smalloc,-hcritbitType &amp;#39;help&amp;#39; for command list.
Type &amp;#39;quit&amp;#39; to close CLI session.ban.url /
200 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;cache-all-the-disks&quot;&gt;
&lt;h2&gt;Cache ALL the disks&lt;/h2&gt;
&lt;p&gt;This site has Varnish and Apache configured as described in this article. It also has disk caching in Apache enabled, thanks to Elizabeth Leddy&amp;#8217;s article:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://plonechix.blogspot.com/2011/08/10-minute-caching-with-apache.html&quot;&gt;http://plonechix.blogspot.com/2011/08/10-minute-caching-with-apache.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, it&amp;#8217;s &lt;strong&gt;PEPPY AS THE DICKENS™&lt;/strong&gt; on a 512MB &amp;#8220;slice&amp;#8221; (Cloud server) from Rackspace Cloud. And now you know yet another &amp;#8220;Plone secret&amp;#8221;. Now go make your Plone sites faster, and let me know how it goes in the comments section below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[0] Using the latest distribution, &amp;#8220;oneric&amp;#8221;.&lt;/p&gt;
&lt;p&gt;[1] I first saw this technique at NASA when NASA Science was powered by
Plone; I found it odd at the time but years later it makes perfect
sense.&lt;/p&gt;
&lt;p&gt;[2] Ideally you&amp;#8217;d configure this in p.a.caching, but I&amp;#8217;ve not been able
to stomach this yet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Plone: First Class Python Citizen</title>
    <id>http://blog.aclark.net/2011/10/24/plone-first-class-python-citizen/</id>
    <updated>2011-10-24T00:00:00Z</updated>
    <published>2011-10-24T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/10/24/plone-first-class-python-citizen/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-first-class-python-citizen&quot;&gt;

&lt;p&gt;&lt;strong&gt;The Plone community and software fit nicely within the larger Python ecosystem. Here&amp;#8217;s why.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For almost as long as I have been involved in the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org&quot;&gt;Plone&lt;/a&gt; project, I&amp;#8217;ve been interested in Plone&amp;#8217;s role in the Python ecosystem. Today as I look across the current landscape, I&amp;#8217;m proud to announce a new milestone the Plone community can take pride in. But the change didn&amp;#8217;t happen overnight, so first let&amp;#8217;s take a quick look back.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;pypi-support-in-psc&quot;&gt;
&lt;h2&gt;PyPI support in PSC&lt;/h2&gt;
&lt;p&gt;Circa 2008, Tarek Ziadé and others finished the PyPI integration branch of PloneSoftwareCenter started by Sidnei Da Silva 2 years before.&lt;/p&gt;
&lt;p&gt;This was a big step towards the &amp;#8220;Pythonification&amp;#8221; of Plone, mainly because Plone packages could now be published on plone.org in the same way Python packages are published to the Python Package Index: via &amp;#8220;python setup.py upload&amp;#8221;. In fact if you are publishing Plone packages, it is recommended that you release to &lt;em&gt;both&lt;/em&gt; PyPI and plone.org simultaneously. This ensures your package is visible to the most number of potential users. And you can use &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/jarn.mkrelease&quot;&gt;mkrelease&lt;/a&gt; to automate the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;collective-docs-at-rtd&quot;&gt;
&lt;h2&gt;Collective docs at RTD&lt;/h2&gt;
&lt;p&gt;Just when you thought things couldn&amp;#8217;t get more exciting in Python land, along came &lt;a class=&quot;reference external&quot; href=&quot;http://readthedocs.org/&quot;&gt;readthedocs.org&lt;/a&gt; (a Django Dash production, IIRC). And to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/collective.developermanual/commit/4dc34d113b1a62064c83f3c431acc7d8deb42f1a&quot;&gt;join the fun in July 2011&lt;/a&gt;, I moved Mikko Ohtamaa&amp;#8217;s awesome &lt;strong&gt;Plone Community Managed Developer Manual&lt;/strong&gt; to the &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/collective&quot;&gt;Github collective&lt;/a&gt; and configured the RTD &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/blog/41-service-integration&quot;&gt;service hook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This means that whenever anyone commits a change to the developer manual, within a few minutes a new Sphinx build &lt;a class=&quot;reference external&quot; href=&quot;http://collective-docs.readthedocs.org/en/latest/index.html&quot;&gt;gets published&lt;/a&gt;. It was so easy to set this up, I wish I had done it sooner.&lt;/p&gt;
&lt;p&gt;So you can that see over the years, we have been working ourselves into a frenzy of Python goodness! And last week, it got even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;introducing-plone-packages&quot;&gt;
&lt;h2&gt;Introducing: Plone packages!&lt;/h2&gt;
&lt;p&gt;Thanks to the good folks at &lt;a class=&quot;reference external&quot; href=&quot;http://www.cartwheelweb.com/&quot;&gt;Cartwheel Web&lt;/a&gt;, makers of the fine &lt;a class=&quot;reference external&quot; href=&quot;http://opencomparison.org/&quot;&gt;Open Comparison&lt;/a&gt; service, Plone now has its very own &lt;a class=&quot;reference external&quot; href=&quot;http://plone.opencomparison.org&quot;&gt;grid comparison website&lt;/a&gt;! (&lt;a class=&quot;reference external&quot; href=&quot;http://djangopackages.com&quot;&gt;Djangopackages.com&lt;/a&gt; was first, followed by &lt;a class=&quot;reference external&quot; href=&quot;http://pyramid.opencomparison.org&quot;&gt;pyramid.opencomparison.org&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This is a site where folks can add packages hosted elsewhere (e.g. svn, github, pypi), vote on them, and add grid comparisons to compare similarly-featured add-ons, frameworks, and other related software.  Grids are the killer feature of this site, and personally I&amp;#8217;ve been waiting to use them to answer questions like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;Q: What&amp;#8217;s the best blogging add-on for Plone?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: http://plone.opencomparison.org/grids/g/weblogs/&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The content is entirely user driven (TTW only) so please head over to &lt;a class=&quot;reference external&quot; href=&quot;http://plone.opencomparison.org&quot;&gt;plone.opencomparison.org&lt;/a&gt;, login with your github ID, and start adding packages! And while you are at it, please report any issues you find here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/opencomparison/opencomparison/issues&quot;&gt;https://github.com/opencomparison/opencomparison/issues&lt;/a&gt;. Lastly, let&amp;#8217;s all tweet a big thanks to &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/#!/pydanny&quot;&gt;&amp;#64;pydanny&lt;/a&gt;and &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/#!/audreyr&quot;&gt;&amp;#64;audreyr&lt;/a&gt; for their hard work and generosity!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Pillow: One Year Later</title>
    <id>http://blog.aclark.net/2011/10/14/pillow-one-year-later/</id>
    <updated>2011-10-14T00:00:00Z</updated>
    <published>2011-10-14T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/10/14/pillow-one-year-later/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-one-year-later&quot;&gt;

&lt;p&gt;&lt;strong&gt;For anyone unfamiliar with Pillow, it is the friendly PIL fork: a fork of PIL that aims to remain a good citizen in the PIL community through its actions.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;warm-and-fluffy-history&quot;&gt;
&lt;h2&gt;Warm and fluffy history&lt;/h2&gt;
&lt;p&gt;Pillow 1.0 was released on 2010-07-31, a little over a year later came Pillow 1.7.5 which features:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Many packaging fixes (mostly to support dependency libraries)&lt;/li&gt;
&lt;li&gt;Windows binaries&lt;/li&gt;
&lt;li&gt;Over 13K downloads&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pillow is used in Plone&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://launchpad.net/plone/4.1/4.1.2/+download/Plone-4.1.2-UnifiedInstaller.tgz&quot;&gt;UnifiedInstaller&lt;/a&gt;, and I know &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/Pillow/commit/8a282c9ea4382045822ca4fc15e586ebd2f7ace7&quot;&gt;folks from the Django community&lt;/a&gt;are using it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;future-creature-comforts&quot;&gt;
&lt;h2&gt;Future creature comforts&lt;/h2&gt;
&lt;p&gt;All in all, a mild success. So what&amp;#8217;s next? &lt;strong&gt;More of the same&lt;/strong&gt;. To &lt;a class=&quot;reference external&quot; href=&quot;http://stackoverflow.com/questions/2485295/the-problem-with-installing-pil-using-virtualenv-or-buildout/7770547#7770547&quot;&gt;quote myself from a recent Stack Overflow answer&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;If PIL ever does exactly what Pillow does, then the fork will die. Until that happens, we have Pillow.&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bottom-line-accommodations&quot;&gt;
&lt;h2&gt;Bottom line accommodations&lt;/h2&gt;
&lt;p&gt;This may never happen of course, which is part of the reason for the fork. You can&amp;#8217;t force someone to maintain software for you. But in the open source world you can grab the bull by the horns (take the lead) and try to make things better. Even better: if your project and community are healthy and functioning properly, your success or failure will be determined by the folks in the community (as it should be). In this case, the Plone and Python communities have spoken clearly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Vagrant, Puppet and Mozilla, Oh my</title>
    <id>http://blog.aclark.net/2011/10/03/vagrant-puppet-and-mozilla-oh-my/</id>
    <updated>2011-10-03T00:00:00Z</updated>
    <published>2011-10-03T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/10/03/vagrant-puppet-and-mozilla-oh-my/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;vagrant-puppet-and-mozilla-oh-my&quot;&gt;

&lt;p&gt;&lt;strong&gt;This post is only loosely Python related and not at all Plone related.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post is only loosely Python related and not at all Plone related, but I thought folks might enjoy hearing about Vagrant and Puppet because these tools may help you do your Plone and Python jobs better.&lt;/p&gt;
&lt;p&gt;For the past couple weeks I&amp;#8217;ve been working on creating a virtual machine to bootstrap a kitsune environment. Kitsune is the Django site that powers support.mozilla.com. I&amp;#8217;ve now reached what I call the &lt;strong&gt;2nd milestone&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;milestones&quot;&gt;
&lt;h2&gt;Milestones&lt;/h2&gt;
&lt;p&gt;The milestones are as follows:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;Get the VM running to the point where one can type &lt;strong&gt;./manage.py&lt;/strong&gt; and receive the help output (and not a traceback). This sounds trivial but there is actually a lot of work involved to get to this point. Namely, figuring out how to make &lt;a class=&quot;reference external&quot; href=&quot;http://puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt; execute each of the required steps successfully, together. (You would expect to be able to just define the steps in order, but those with this expectation will be disappointed. I assume Puppet has their reasons, and they are probably even good ones.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get the VM running to the point where one can open http://33.33.33.10:8000 from the host to see kitsune running. Once step #1 is done, this is actually easier than it sounds because I&amp;#8217;m &amp;#8220;cheating&amp;#8221;. Test data has been imported and a syncdb has been run, but I&amp;#8217;m using supervisor to manage the runserver process (for now).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Get the VM running like it does in production. This will involve configuring &lt;strong&gt;Apache&lt;/strong&gt;and &lt;strong&gt;mod_wsgi&lt;/strong&gt; as well as resolving any issues that remain with the app. I&amp;#8217;ll rely on the kitsune team to help with this, as I&amp;#8217;m still learning the app. This is the &amp;#8220;exciting&amp;#8221; part for me because I get to learn something new. While Vagrant and Puppet are also new to me, I consider these technologies part of my &amp;#8220;past life&amp;#8221; (as a system administrator) and Django sites part of my &amp;#8220;future life&amp;#8221; (as a web developer).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now about the technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;vagrant&quot;&gt;
&lt;h2&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;I had heard of &lt;a class=&quot;reference external&quot; href=&quot;http://vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; before, but never tried it. I am now sorry I waited so long because the &amp;#8220;cool factor&amp;#8221; is very high. It requires that &lt;a class=&quot;reference external&quot; href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt; be installed, which I also danced around for too long before committing (being a former Parallels user).&lt;/p&gt;
&lt;p&gt;On OS X Lion[1], installing Vagrant is simply a matter of:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gem install vagrant
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Once you have `vagrant` installed you can do:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vagrant init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;inside some revision-controlled directory and you have the beginnings of a virtual machine you can share with the masses. This is how &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/kitsune-vagrant&quot;&gt;kitsune-vagrant&lt;/a&gt; was born. Hopefully this shared virtual machine will eventually make some new developer&amp;#8217;s life much easier.&lt;/p&gt;
&lt;p&gt;We now arrive at a fork in the road; though Vagrant makes it easy to follow both paths: Chef or Puppet (it supports both). I don&amp;#8217;t recall what made me choose Puppet over Chef, but it might have been that the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rhelmer/socorro-vagrant&quot;&gt;Socorro folks were using it already&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you decide on Puppet (and assuming you do), it&amp;#8217;s pretty easy to figure out that your next move is to create a manifest file for Puppet to apply[2].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;puppet&quot;&gt;
&lt;h2&gt;Puppet&lt;/h2&gt;
&lt;p&gt;My knowledge of Puppet is currently quite limited. Specifically, I only know how to create a manifest file. (Vagrant does the rest!) I imagine there is much more to Puppet, especially with regard to doing actual configuration management on production servers. But I have not explored any of that yet.&lt;/p&gt;
&lt;p&gt;However, I did learn quite a bit about Puppet just from writing the manifest. The first most important thing I learned is this: &lt;strong&gt;Puppet is in charge&lt;/strong&gt;. It does things the way it wants to and you need to follow its rules. The first and biggest challenge is to achieve a linear execution of tasks.&lt;/p&gt;
&lt;p&gt;You cannot write rules in order and hope for the best. This will fail spectacularly when something executes before something else was supposed to. The way around this is via `require =&amp;gt;` statements.&lt;/p&gt;
&lt;p&gt;A grep through kitsune.pp reveals:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;require =&amp;gt; Exec[&amp;#39;git_clone&amp;#39;],
require =&amp;gt; Exec[&amp;#39;db_sync&amp;#39;],
require =&amp;gt; Exec[&amp;#39;packages_upgrade&amp;#39;],
require =&amp;gt; Exec[&amp;#39;packages_update&amp;#39;],
require =&amp;gt; Package[$packages_native],
require =&amp;gt; Exec[&amp;#39;git_clone&amp;#39;],
require =&amp;gt; Exec[&amp;#39;chown_kitsune&amp;#39;],
require =&amp;gt; Exec[&amp;#39;packages_compiled&amp;#39;],
require =&amp;gt; Exec[&amp;#39;packages_vendor&amp;#39;],
require =&amp;gt; Exec[&amp;#39;db_create&amp;#39;],
require =&amp;gt; Exec[&amp;#39;db_import&amp;#39;],
require =&amp;gt; file[&amp;#39;/etc/supervisor/supervisord.conf&amp;#39;],
require =&amp;gt; Exec[&amp;#39;supervisor_stop&amp;#39;],
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This roughly translates to the following workflow logic:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Ensure that `aptitude -y update; aptitude -y upgrade` have been run before you try to install the list of packages we require.&lt;/li&gt;
&lt;li&gt;Ensure the list of packages we require is installed before we checkout the code.&lt;/li&gt;
&lt;li&gt;Ensure the code has been checked out (and pip install / git submodule have been run) before you try to syncdb and run the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a bit more to it, but with that knowledge you should be able to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/kitsune-vagrant/blob/master/manifests/kitsune.pp&quot;&gt;read and understand kitsune.pp in full&lt;/a&gt;. I learned most of the remaining required puppeteering from this site:&lt;a class=&quot;reference external&quot; href=&quot;http://www.puppetcookbook.com/&quot;&gt;http://www.puppetcookbook.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;mozilla&quot;&gt;
&lt;h2&gt;Mozilla&lt;/h2&gt;
&lt;p&gt;Oh my! This Mozilla work is a ton of fun[3]; I attribute this in part due to the structure of their organization: I was invited immediately to collaborate in IRC with the kitsune team and as a result, we all have something to show for it[4]. Next I will be working on the 3rd milestone! Hope to finish by the end
of this week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] This did not work on Snow Leopard, because `gem` is too old.  However if you `brew install ruby` and try again, it should work.&lt;/p&gt;
&lt;p&gt;[2] I didn&amp;#8217;t bother to investigate Chef, but I am curious about it.&lt;/p&gt;
&lt;p&gt;[3] And I hope this is only the beginning.&lt;/p&gt;
&lt;p&gt;[4] I hope to get a Mozilla gig but even if I don&amp;#8217;t, being able to do this type of work is very rewarding (which is why you will often hear people in open source say that to get paid for the type of work they do is a dream come true).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Mozilla and PyPI</title>
    <id>http://blog.aclark.net/2011/09/22/mozilla-and-pypi/</id>
    <updated>2011-09-22T00:00:00Z</updated>
    <published>2011-09-22T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/09/22/mozilla-and-pypi/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;mozilla-and-pypi&quot;&gt;

&lt;p&gt;&lt;strong&gt;VM setup for kitsune&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/in-defense-of-pypi&quot;&gt;last time I wrote about PyPI&lt;/a&gt; some folks mistook the subject to be &lt;a class=&quot;reference external&quot; href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt;, so let me be clear: this article is about the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi&quot;&gt;Python Packaging Index&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recently began doing some volunteer work for Mozilla[1], working on a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/kitsune-vagrant&quot;&gt;virtual machine setup&lt;/a&gt; to make kitsune development easier (kitsune is the code name for the Django site that powers &lt;a class=&quot;reference external&quot; href=&quot;http://support.mozilla.com&quot;&gt;support.mozilla.com&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;git-submodules&quot;&gt;
&lt;h2&gt;Git submodules&lt;/h2&gt;
&lt;p&gt;In doing so, I came across an interesting command from their &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/jsocol/kitsune/blob/master/docs/installation.rst&quot;&gt;installation docs&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I can recall some vague rumblings about git submodules prior to this incident, but nothing I&amp;#8217;d call &amp;#8220;familiarity&amp;#8221;. So, I shrugged it off and went about the business of creating the VM (and resisting the urge to use &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/zc.buildout/1.5.2&quot;&gt;zc.buildout&lt;/a&gt; to do it):&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;On day 1, I created a &lt;a class=&quot;reference external&quot; href=&quot;http://virtualbox.org&quot;&gt;VirtualBox&lt;/a&gt; VM using the latest Ubuntu Server and was able to assemble and run the application by following the instructions.&lt;/li&gt;
&lt;li&gt;On day 2, I began to &lt;a class=&quot;reference external&quot; href=&quot;http://vagrantup.com&quot;&gt;&amp;#8220;vagrantize&amp;#8221;&lt;/a&gt; the process. Here I ran into a bit of trouble with the git-submodule command[2]. This led me to seek alternative methods to install the various Python packages it was trying to install (when stuck on a problem I often like to pursue the alternatives immediately, so I have them if I need them.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;zamboni&quot;&gt;
&lt;h2&gt;Zamboni&lt;/h2&gt;
&lt;p&gt;Then, in the Mozilla IRC channel #sumodev (&lt;strong&gt;su&lt;/strong&gt;pport &lt;strong&gt;mo&lt;/strong&gt;zilla) some nice Mozillian (willkg) pointed me to this gem:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://mozweb.readthedocs.org/en/latest/packaging.html&quot;&gt;http://mozweb.readthedocs.org/en/latest/packaging.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which in turn led me to the following two links:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://jbalogh.github.com/zamboni/topics/packages/&quot;&gt;http://jbalogh.github.com/zamboni/topics/packages/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://playdoh.readthedocs.org/en/latest/packages.html#packages&quot;&gt;http://playdoh.readthedocs.org/en/latest/packages.html#packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, faint rumblings… this time about zamboni (not THAT Zamboni). I know I&amp;#8217;ve heard of it, but I wouldn&amp;#8217;t call myself familiar with it. So, I innocently read the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;Python projects can incur a number of dependencies. ``pip`` can be handy, but we’ve had better luck with distributing a ``vendor`` library.&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;At which point I immediately thought to myself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;Yeah… I hear that.&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Followed a few seconds later by:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;Wait… what?!?&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;playdoh&quot;&gt;
&lt;h2&gt;Playdoh&lt;/h2&gt;
&lt;p&gt;Some time/research later[3], I (re)discovered that zamboni is the codename for &lt;a class=&quot;reference external&quot; href=&quot;https://addons.mozilla.org&quot;&gt;addons.mozilla.org&lt;/a&gt;[4]. And &lt;a class=&quot;reference external&quot; href=&quot;http://playdoh.readthedocs.org/&quot;&gt;Playdoh&lt;/a&gt; is the code name for Mozilla&amp;#8217;s base Django project setup. If you aren&amp;#8217;t familiar with Playdoh, please do give it a whirl[5].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;pypi&quot;&gt;
&lt;h2&gt;PyPI&lt;/h2&gt;
&lt;p&gt;While all of this is very, very interesting to me, I am primarily a &amp;#8220;systems and processes&amp;#8221; guy; and what ultimately stuck with me after two days of Mozilla-ing is the following blurb from the Playdoh packaging documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;The ``/vendor`` library is supposed to contain all packages and repositories. It enables the project to be deployed as one package onto many machines, without relying on PyPI-based installations on each target machine.&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;#8220;Nooooooooooooooo&amp;#8221;, I am now saying to myself over and over. &amp;#8220;Without relying on PyPI-based installations on each target machine.&amp;#8221; Another &amp;#8220;noooooooooooooooo!&amp;#8221; I certainly don&amp;#8217;t fault Mozilla for taking this approach, but it makes me sad that large organizations like Mozilla are passing over PyPI in favor of alternative methods of distributing Python software.&lt;/p&gt;
&lt;p&gt;Let us all now hang our heads, for a moment of pause and reflection.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[a minute passes]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-future&quot;&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;I can&amp;#8217;t speak for anyone else, but I would certainly like to see this change in the future. I would LOVE to see PyPI become a place that Mozilla felt confident it could use to deploy Python software. And this is something I&amp;#8217;d love to work on &lt;em&gt;for&lt;/em&gt; Mozilla, if given the opportunity[6].&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;great-for-python-great-for-mozilla&quot;&gt;
&lt;h3&gt;Great for Python == great for Mozilla?&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s obvious what&amp;#8217;s in it for Python, but what&amp;#8217;s in for Mozilla?&lt;/p&gt;
&lt;p&gt;Simple.&lt;/p&gt;
&lt;p&gt;I happen to share Mozilla&amp;#8217;s vision for an open web and open source in general. And it&amp;#8217;s great to see them embracing &amp;amp; using Python for their web projects! Without a doubt,&amp;nbsp; they are interested in giving back to the Python community (e.g. via Playdoh and the Django community, in this case.) So I suspect they&amp;#8217;d be open to helping the Python community fix a long standing issue: the stability and reliability of the Python Package Index. It would certainly benefit them in the long run to simplify their build process to the point where git-submodule was no longer needed[7].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] I am actively courting Mozilla in hopes of landing a gig by the end of the year. So all you Mozillians who know me personally, please put in a good word! And all you Mozillians I have not met yet: nice to meet you!&lt;/p&gt;
&lt;p&gt;[2] The problem turned out to be git-submodule failing to run because things like: grep and sed were missing from the PATH. Easily fixed by modifying the puppet configuration, but not easily discovered because git-submodule itself returned zero! Some guy on #puppet was very helpful in getting me to print out debug info.&lt;/p&gt;
&lt;p&gt;[3] More help from friendly Mozillians in #webdev:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;11:13 &amp;lt; groovecoder&amp;gt; aclark: yeah, zamboni is amo 11:13 &amp;lt; kumar&amp;gt; playdoh was extracted from zamboni and other apps 11:13 &amp;lt; kumar&amp;gt; but zamboni itself does not eat the playdoh dog food, actually 11:15 &amp;lt; kumar&amp;gt; aclark also, in case you&amp;#8217;re not steeped in our initialisms, amo is addons.mozilla.org&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;[4] There is a great presentation about it here: &lt;a class=&quot;reference external&quot; href=&quot;http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098&quot;&gt;http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;[5] More from kumar (emphasis is my own):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;11:25 &amp;lt; kumar&amp;gt; &lt;strong&gt;Playdoh is starting to stabilize&lt;/strong&gt; so it would be &lt;strong&gt;good to see some use of it outside Mozilla&lt;/strong&gt;; this would probably help us catch Mozilla-specific things that need extraction&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;[6] LARGE HINT ;-)&lt;/p&gt;
&lt;p&gt;[7] Again, not that there is anything wrong with what Mozilla is doing here. As a systems guy, I just happen to gravitate toward simplifying processes by eliminating steps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Hello mod_wsgi</title>
    <id>http://blog.aclark.net/2011/08/28/hello-mod_wsgi/</id>
    <updated>2011-08-28T00:00:00Z</updated>
    <published>2011-08-28T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/08/28/hello-mod_wsgi/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;hello-mod-wsgi&quot;&gt;

&lt;p&gt;&lt;strong&gt;It seems I&amp;#8217;ve inadvertently started another series of blog entry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It seems I&amp;#8217;ve inadvertently started another series of blog entry:&amp;nbsp;the &amp;#8220;hello world&amp;#8221; series, wherein I explain how to easily get started with &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/08/20/hello-plone/&quot;&gt;various exciting Python technologies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This time, in order to familiarize myself with &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/modwsgi/&quot;&gt;mod_wsgi&lt;/a&gt;, I&amp;#8217;ve created a buildout to automate some of the processes explained in:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide&quot;&gt;http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(This series also helps me to subtly introduce the zc.buildout &amp;#8220;extendables&amp;#8221; I have been working on. More on those in a future post.)&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-extendables&quot;&gt;
&lt;h2&gt;The extendables&lt;/h2&gt;
&lt;p&gt;The extendables make it easy to bootstrap a development environment with complex software requirements, via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/zc.buildout/1.5.2&quot;&gt;zc.buildout&lt;/a&gt;. In this case, I want to be able to type:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ test-apache test-dir
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And get a working, &lt;em&gt;disposable&lt;/em&gt; Apache instance minutes later. I also want that Apache to come with a mod_wsgi app installed and working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;setup&quot;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First we use the &lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x&quot;&gt;aforementioned extendable&lt;/a&gt;, like so:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv test-dir
$ cd test-dir
$ bin/pip install zc.buildout
$ bin/buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Edit the buildout.cfg to look like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Run buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assuming successful completion, you should be able to run Apache in the foreground via:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/supervisord -e debug -n
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now check &lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This works because the &lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x&quot;&gt;&amp;#8220;extendable&amp;#8221; (buildout configuration file)&lt;/a&gt; contains:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The &lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/conf/app.wsgi.in&quot;&gt;little WSGI app&lt;/a&gt; from the QuickInstallationGuide, templatized via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recipe.template/1.9&quot;&gt;collective.recipe.template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/build/blob/master/apache/2.2.x/httpd.conf.in&quot;&gt;templatized httpd.conf file&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to automate the process even further with the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/binfiles/blob/master/test-apache&quot;&gt;following script&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#!/bin/shmkdir $1
virtualenv-2.6 $1
cd $1
bin/easy_install zc.buildout
bin/buildout init
cat &amp;lt;&amp;lt; EOF &amp;gt; buildout.cfg
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
EOF
bin/buildout
bin/supervisord -e debug -n
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Thus closing the loop on this blog entry, and making the following possible:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ test-apache test-dir
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ve been using my &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/binfiles/blob/master/test-plone&quot;&gt;test-plone&lt;/a&gt; script for years now, and I&amp;#8217;m hoping that the test-apache script proves just as useful (especially as Plone moves closer to a WSGI-supporting stack via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Zope2/2.13.9&quot;&gt;Zope 2.13&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Hello Plone</title>
    <id>http://blog.aclark.net/2011/08/20/hello-plone/</id>
    <updated>2011-08-20T00:00:00Z</updated>
    <published>2011-08-20T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/08/20/hello-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;hello-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a Plone &amp;#8220;Hello, World!&amp;#8221; style tutorial/application for Python programmers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a Plone &amp;#8220;Hello, World!&amp;#8221; style tutorial/application for Python programmers. See &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/hello_plone&quot;&gt;https://github.com/aclark4life/hello_plone&lt;/a&gt; for more.&lt;/p&gt;
&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;This post has been edited post-publication to improve the wording.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonition warning&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Warning&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;This is not a particularly good example since a template can be specified via ZCML. However once you understand hello_plone you will understand the difference between the two approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-1-setup&quot;&gt;
&lt;h2&gt;Step 1 - Setup&lt;/h2&gt;
&lt;p&gt;Create a directory called &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hello_plone&lt;/span&gt;&lt;/code&gt; and inside it create a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;virtualenv&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir hello_plone
$ cd hello_plone
$ virtualenv-2.7 .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then install Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/pip install zc.buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then create an empty buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then add a Plone buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/plock/pins/plone-4-3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now run Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And start Plone:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Open &lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Click the button and follow the steps. You don&amp;#8217;t need to select any additional add-ons from the list. Afterward, you should see your Plone site here: &lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080/Plone&quot;&gt;http://localhost:8080/Plone&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-2-develop&quot;&gt;
&lt;h2&gt;Step 2 - Develop&lt;/h2&gt;
&lt;p&gt;Plone is customized via Python packages called Add-ons (née Products). So first we need to create a Python package:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p my.app/my/app
$ touch my.app/my/app/__init__.py
$ touch my.app/my/__init__.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we add our Python package to the buildout. The &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;develop&lt;/span&gt;&lt;/code&gt; line makes the buildout aware of the Python package. The &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;eggs&lt;/span&gt;&lt;/code&gt; line makes Plone aware of it:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
develop = ./my.app
extends = https://raw.github.com/plock/pins/plone-4-3

[plone]
eggs += my.app
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we can add some view code:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from Products.Five.browser.pagetemplatefile import
    ViewPageTemplateFile
from zope.publisher.browser import BrowserPage

class Hello(BrowserPage):
    &amp;quot;&amp;quot;&amp;quot;
    &amp;quot;&amp;quot;&amp;quot;

    template = ViewPageTemplateFile(&amp;#39;hello.pt&amp;#39;)

    def __call__(self):
        return self.template()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And load the view code via &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/components/zcml.html&quot;&gt;ZCML&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;configure
    xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;&amp;gt;

    &amp;lt;browser:page
        class=&amp;quot;.hello.hello&amp;quot;
        for=&amp;quot;*&amp;quot;
        name=&amp;quot;hello&amp;quot;
        permission=&amp;quot;zope2.View&amp;quot;
        /&amp;gt;

&amp;lt;/configure&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And add a &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/templates_css_and_javascripts/template_basics.html&quot;&gt;template&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;div metal:use-macro=&amp;quot;here/main_template/macros/master&amp;quot;&amp;gt;

    &amp;lt;div metal:fill-slot=&amp;quot;main&amp;quot;&amp;gt;

        &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;

    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-3-next-steps&quot;&gt;
&lt;h2&gt;Step 3 - Next steps&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Easy through-the-web form generation with &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/reference_manuals/active/ploneformgen/&quot;&gt;PloneFormGen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Content types with &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/content/dexterity.html&quot;&gt;Dexterity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Theming with &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/templates_css_and_javascripts/diazo.html&quot;&gt;Diazo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Plone Secrets: Episode 3 - Collective Recaptcha Installation</title>
    <id>http://blog.aclark.net/2011/08/09/plone-secrets-episode-3-collective-recaptcha-installation/</id>
    <updated>2011-08-09T00:00:00Z</updated>
    <published>2011-08-09T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/08/09/plone-secrets-episode-3-collective-recaptcha-installation/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-secrets-episode-3-collective-recaptcha-installation&quot;&gt;

&lt;p&gt;&lt;strong&gt;Another one from the: &amp;#8220;wow, this approach is totally and completely non-obvious to beginners&amp;#8221; department.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;my-kingdom-for-a-custom-contact-form-with-captcha&quot;&gt;
&lt;h2&gt;My kingdom for a (custom) contact form (with captcha)&lt;/h2&gt;
&lt;p&gt;I don&amp;#8217;t know if I&amp;#8217;ve made written-mention of this anywhere else, but &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;aclark.net&lt;/a&gt;has a new customized &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/contact-info&quot;&gt;contact form&lt;/a&gt; with captcha. ;-) It is customized via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/z3c.jbot&quot;&gt;z3c.jbot&lt;/a&gt; which is an awesome tool (more on that later). This in and of itself is not-so-terribly newsworthy. What is interesting, though, is &lt;em&gt;how&lt;/em&gt; this new customized form came to be; and how its features compare to the default contact form.&lt;/p&gt;
&lt;p&gt;So here goes: In Plone, we have a page template called &lt;a class=&quot;reference external&quot; href=&quot;http://svn.plone.org/svn/plone/Products.CMFPlone/trunk/Products/CMFPlone/skins/plone_templates/contact-info.cpt&quot;&gt;contact-info.cpt&lt;/a&gt;. It&amp;#8217;s not so special (in that it is pretty feature-&lt;em&gt;less&lt;/em&gt;, though it will send mail if you ask it to) but it does the job for most folks. And it almost has to, because customizing it is beyond the realm of what &lt;em&gt;anyone&lt;/em&gt; would call &amp;#8220;straight forward&amp;#8221; or &amp;#8220;reasonable to expect from TTW customizers, integrators, or even developers&amp;#8221;¹.&lt;/p&gt;
&lt;p&gt;Why do I say this?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;been-there-done-that-cmfformcontroller&quot;&gt;
&lt;h2&gt;Been there, done that: CMFFormController&lt;/h2&gt;
&lt;p&gt;First, let me start with the technology that is used to implement the contact form.&amp;nbsp;It&amp;#8217;s called &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.CMFFormController&quot;&gt;CMFFormController&lt;/a&gt; and it went out of style in the 1970s, along with disco and bell bottoms. Bell bottoms came back, but CMFFormController didn&amp;#8217;t! Don&amp;#8217;t get me wrong: CMFFormController is a decent technology/implementation. It works. But it&amp;#8217;s not very &amp;#8220;modern&amp;#8221; by today&amp;#8217;s coding standards. As such, it will simply be dragged along Plone-version-after-Plone-version until either: a.) someone wants to replace it, or b.) it becomes too big of a maintenance burden to support and someone has to replace it. This is the way of many things, and there is nothing inherently wrong with this phenomenon. In fact, there are even good things about it: e.g. the release manager, framework team, and core developers&amp;#8217; ability to publish release-after-solid-release under such code-aging circumstances is a testament to their skill and dedication.&lt;/p&gt;
&lt;p&gt;BUT… and this is a BIG BUT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;we-can-do-better&quot;&gt;
&lt;h2&gt;We can do better&lt;/h2&gt;
&lt;p&gt;Leaving this old stuff laying around, with no new stuff to point new users to does a huge disservice to &lt;em&gt;all&lt;/em&gt; of our users. It flies &lt;em&gt;directly&lt;/em&gt; in the face of one of our core missions: as &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/#!/asigottech&quot;&gt;Wyn Williams&lt;/a&gt; put it once, to be the&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;&amp;#8220;best damn enterprise content manage system on the planet&amp;#8221;.&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now, I&amp;#8217;ve been around the block, so I am not suggesting we must fix everything at once. Legacy software can be supported for years and years and years (and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Zope2&quot;&gt;YEARS&lt;/a&gt;). What I am suggesting is that we need to make a very significant effort to &lt;strong&gt;COMPLETELY HIDE&lt;/strong&gt; these implementation details to newcomers. I don&amp;#8217;t want to tell people in IRC to go to &lt;strong&gt;portal_skins&lt;/strong&gt; anymore. I want my &amp;#8220;OS X Lion release for Plone&amp;#8221;, please (sans Vista overtones.)&lt;/p&gt;
&lt;p&gt;So how do we get there? Well, in the case of portal_skins there is talk of decommissioning &lt;strong&gt;portal_view_customizations,&lt;/strong&gt; which was supposed to be the &amp;#8220;new portal_skins&amp;#8221; as I understand it. But since half of our templates are still in CMF skin layers, &lt;em&gt;and&lt;/em&gt; because this feature was not technically well received (i.e. it needs &lt;em&gt;more&lt;/em&gt; features and development), &lt;em&gt;and&lt;/em&gt; because &lt;strong&gt;portal_resources&lt;/strong&gt; came along around the same time as &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plone.app.theming&quot;&gt;plone.app.theming&lt;/a&gt;, folks are considering removing portal_view_customizations. I have no strong opinion about it (other than I hate the name, too long) and I trust the Framework Team to handle it. What I do care about is that whatever remains in the ZMI be very clearly designated as either &amp;#8220;new style&amp;#8221; or &amp;#8220;old style&amp;#8221;. We can&amp;#8217;t get away from the ZMI yet, but portal tools do have title attributes so let&amp;#8217;s use them.&lt;/p&gt;
&lt;p&gt;Now, we can&amp;#8217;t ditch &lt;strong&gt;portal_skins&lt;/strong&gt; just yet, and who knows what will happen with &lt;strong&gt;portal_view_customizations&lt;/strong&gt;, but the *minute* we know some technology is out of date, we should reveal it in the user interface (even in the ZMI user interface). E.g.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;Curiously, the attribute that holds this string is lowercase &amp;#8220;title&amp;#8221;
(I&amp;#8217;d expect camel case Description, though I&amp;#8217;m not entirely sure why
I expect that.)&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Hanno Schlichting has made some great progress recently with enhancing the ZMI for Plone users, especially with regard to&lt;em&gt;file-system vs.  through-the-web&lt;/em&gt; development, and &lt;em&gt;through-the-plone vs. through-the-zmi configuration&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I love this trend, and would like to see more of it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;secrets-revealed&quot;&gt;
&lt;h2&gt;Secrets revealed&lt;/h2&gt;
&lt;p&gt;Anyway, I&amp;#8217;ve been dancing around the secrets to be revealed in this blog post because it is fun to play with the future. And it&amp;#8217;s important to work hard toward achieving it. But enough of that, here is what you need to know today.&lt;/p&gt;
&lt;p&gt;Like I said, I customized the contact form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;old-style-vs-new-style&quot;&gt;
&lt;h2&gt;Old style vs. new style&lt;/h2&gt;
&lt;p&gt;Back in the &amp;#8220;old days&amp;#8221; you had to create a CMF skin layer and put a copy of the template in a directory on the file system, configured as a File System Directory View. &lt;em&gt;Everything&lt;/em&gt; used to be customized via skin layers.&lt;/p&gt;
&lt;p&gt;Now-a-days, we have z3c.jbot. Though a bit of a hack², it does exactly what you&amp;#8217;d expect, almost exactly how you&amp;#8217;d expect it to. It &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website&quot;&gt;doesn&amp;#8217;t even require a Python package&lt;/a&gt;. By convention though, folks typically do put z3c.jbot template customizations in Python packages.&lt;/p&gt;
&lt;p&gt;This requires a few steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-1-create-a-python-package&quot;&gt;
&lt;h2&gt;Step 1: Create a Python package&lt;/h2&gt;
&lt;p&gt;First, a Python package. This is relatively simple, so I&amp;#8217;m not going to skip-and-point-you-somewhere-else just yet, I&amp;#8217;m going to explain first.
The &lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/1123090&quot;&gt;gist of it&lt;/a&gt; is this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p my.package/my/package
$ touch my.package/setup.py
$ touch my.package/my/__init__.py
$ touch my.package/my/package/__init__.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you would edit setup.py and the &amp;#8220;middle&amp;#8221; __init__.py with code.
Something like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#!/bin/sh
mkdir -p my.package/my/package
touch my.package/setup.py
touch my.package/my/__init__.py
touch my.package/my/package/__init__.py
cat &amp;gt; my.package/setup.py &amp;lt;&amp;lt; EOF
from setuptools import setup, find_packages
setup(
    name=&amp;#39;my.package&amp;#39;,
    packages=find_packages(),
    namespace_packages=[
        &amp;#39;my&amp;#39;,
    ]
)
EOF
cat &amp;gt; my.package/my/__init__.py &amp;lt;&amp;lt; EOF
from pkg_resources import declare_namespace
declare_namespace(__name__)
EOF
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Alternatively, use &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/ZopeSkel&quot;&gt;ZopeSkel&lt;/a&gt; to generate all this boilerplate code for you. It does a much better, and more complete job than what I have done here. The important thing is that you &lt;em&gt;understand what is going on&lt;/em&gt;. In the case of aclark.net, our Python package is called &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet&quot;&gt;plonetheme.aclarknet&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-2-add-template-overrides&quot;&gt;
&lt;h2&gt;Step 2: Add template overrides&lt;/h2&gt;
&lt;p&gt;Now that we have a Python package we can start customizing Plone. By convention, we&amp;nbsp; create a &amp;#8220;templates&amp;#8221; directory inside the namespaced package e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir my.package/my/package/templates
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or you can check out aclark.net&amp;#8217;s &amp;#8220;templates&amp;#8221; directory here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the way z3c.jbot works, in the &amp;#8220;templates&amp;#8221; directory, we add files with names that correspond to the Python module we want to customize. E.g.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_templates.contact-info.cpt&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_templates.contact-info.cpt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(For some reason, github thinks that file is binary, so &lt;a class=&quot;reference external&quot; href=&quot;http://dpaste.com/589529/&quot;&gt;here are the contents&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Now, this is the amazing part: in addition to templates in views, viewlets and portlets, we can customize any &lt;a class=&quot;reference external&quot; href=&quot;http://old.zope.org/Products/CMF/&quot;&gt;CMF&lt;/a&gt; object! E.g. the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/RestrictedPython&quot;&gt;RestrictedPython&lt;/a&gt; (more technology anyone?) CMFFormController validation script used to validate our contact form:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That brings us to adding recaptcha, but first let us finish configuring template overrides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-3-configure-template-overrides&quot;&gt;
&lt;h2&gt;Step 3: Configure template overrides&lt;/h2&gt;
&lt;p&gt;Now that we have customized Plone templates, we can configure Plone to use our customizations.&lt;/p&gt;
&lt;p&gt;This is done via a technology you may have heard of: &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/documentation/manual/theme-reference/buildingblocks/components/wiring&quot;&gt;ZCML&lt;/a&gt;. Using ZCML, we can tell Plone (or jbot in this case) to use the templates in our &amp;#8220;templates&amp;#8221; directory.&lt;/p&gt;
&lt;p&gt;The ZCML we are going to use is placed in the &amp;#8220;top level&amp;#8221; configure.zcml file in our package. That means we need a top level configure.zcml file:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ touch my.package/my/package/configure.zcml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we add ZCML to &amp;#8220;configure our application&amp;#8221;. Note in addition to the ZCML used to configure jbot, there is ZCML for Diazo and ZCML to hold our &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/06/20/plone-secrets-episode-1-%e2%80%94-site-actions-contact-link/&quot;&gt;Genericsetup customizations:&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;configure
    xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;
    xmlns:genericsetup=&amp;quot;http://namespaces.zope.org/genericsetup&amp;quot;
    xmlns:plone=&amp;quot;http://namespaces.plone.org/plone&amp;quot;
    xmlns=&amp;quot;http://namespaces.zope.org/zope&amp;quot;&amp;gt;    &amp;lt;plone:static directory=&amp;quot;theme/aclarknet&amp;quot; type=&amp;quot;theme&amp;quot; /&amp;gt;    &amp;lt;include package=&amp;quot;z3c.jbot&amp;quot; file=&amp;quot;meta.zcml&amp;quot; /&amp;gt;
    &amp;lt;browser:jbot directory=&amp;quot;templates&amp;quot; /&amp;gt;    &amp;lt;genericsetup:registerProfile
        name=&amp;quot;default&amp;quot;
        title=&amp;quot;ACLARK.NET, LLC profile&amp;quot;
        description=&amp;quot;Installs ACLARK.NET, LLC site
            customizations&amp;quot;
        directory=&amp;quot;profiles/default&amp;quot;
        provides=&amp;quot;Products.GenericSetup.interfaces.EXTENSION&amp;quot;
        /&amp;gt;&amp;lt;/configure&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This file is located here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see that everything inside the &amp;lt;configure&amp;gt;&amp;lt;/configure&amp;gt; tag(s) is associated with an XML namespace. If you don&amp;#8217;t add the appropriate namespace inside the &amp;lt;configure&amp;gt; tag, your configuration will fail spectacularly (because without the proper XML namespace configured, there is no code loaded to handle your configuration.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-4-add-recaptcha&quot;&gt;
&lt;h2&gt;Step 4: Add recaptcha&lt;/h2&gt;
&lt;p&gt;Now, finally, we get to the exciting part. We have customized our contact form, but we are receiving a fair amount of spam due to spammers&amp;#8217; ability to automate form submission. To foil the spammers, we want to add a captcha form that will hopefully require that an actual human to fill out the form.&lt;/p&gt;
&lt;p&gt;Thanks to David Glick and Groundwire, we have &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recaptcha&quot;&gt;collective.recaptcha&lt;/a&gt; which provides an integration of &lt;a class=&quot;reference external&quot; href=&quot;http://www.google.com/recaptcha&quot;&gt;Google&amp;#8217;s Recaptcha service&lt;/a&gt; into Plone.&lt;/p&gt;
&lt;p&gt;In order to use it, first we add the package to our buildout, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;…
[plone]
# Eggs are Python packages
eggs +=
#   Diazo theming
    plonetheme.aclarknet
#   Add-ons
    collective.portlet.wordpress
    collective.recaptcha# Need zcml for c.recaptcha until 1.1.3 is released
zcml = collective.recaptcha
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See the rest of the file here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/ACLARKNET/aclark_net_website/master/buildout.cfg&quot;&gt;https://raw.github.com/ACLARKNET/aclark_net_website/master/buildout.cfg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now run buildout and restart Plone.&lt;/p&gt;
&lt;p&gt;With collective.recaptcha installed via buildout, you should now be able to open &lt;a class=&quot;reference external&quot; href=&quot;http://yoursite:8080/Plone/&amp;#64;&amp;#64;recaptcha-settings&quot;&gt;http://yoursite:8080/Plone/&amp;#64;&amp;#64;recaptcha-settings&lt;/a&gt; to configure Recaptcha.&lt;/p&gt;
&lt;p&gt;(To get a public and private key, you can sign up for recaptcha here: &lt;a class=&quot;reference external&quot; href=&quot;http://www.google.com/recaptcha&quot;&gt;http://www.google.com/recaptcha&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Lastly, make the appropriate changes to the contact form and validation script. E.g. &lt;a class=&quot;reference external&quot; href=&quot;http://dpaste.com/589529/&quot;&gt;include the captcha image:&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;…
&amp;lt;tal:block tal:replace=&amp;quot;structure
    context/@@captcha/image_tag&amp;quot;/&amp;gt;
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And make sure to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy&quot;&gt;validate the submission&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;…
    # Re-captcha validation
    if not context.restrictedTraverse(&amp;#39;@@captcha&amp;#39;).verify():
        context.plone_utils.addPortalMessage(_(u&amp;#39;You entered
            an invalid captcha.&amp;#39;), &amp;#39;error&amp;#39;)
        return state.set(status=&amp;#39;failure&amp;#39;)
    else:
        return state
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;¹ I&amp;#8217;m pushing &amp;#8220;reasonable&amp;#8221; limits here for argument&amp;#8217;s sake. For those who know Plone already, a lot of what might seem impossible to newcomers is &amp;#8220;reasonable&amp;#8221; for them. No flames please. Unless you absolutely must.  ;-)&lt;/p&gt;
&lt;p&gt;² I hear people call it that, though I don&amp;#8217;t know the details. I assume it &amp;#8220;monkey patches&amp;#8221; which template to use at render-time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Plone Secrets: Episode 2 - Collective Python Buildout</title>
    <id>http://blog.aclark.net/2011/07/06/plone-secrets-episode-2-collective-python-buildout/</id>
    <updated>2011-07-06T00:00:00Z</updated>
    <published>2011-07-06T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/07/06/plone-secrets-episode-2-collective-python-buildout/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-secrets-episode-2-collective-python-buildout&quot;&gt;

&lt;p&gt;&lt;strong&gt;You know who uses the (Plone) Collective Python buildout?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You know who uses the (Plone) Collective Python buildout? Me neither, because we don&amp;#8217;t have any good statistics on its use (that I know of).  If it were a Python package, we could at least &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/&quot;&gt;count the number of times it has been downloaded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You know who should use it? Everyone.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[dramatic pause…]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OK maybe not everyone, but at least everyone that regularly develops with &lt;strong&gt;multiple versions of Python&lt;/strong&gt;. Here&amp;#8217;s why.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;actively-maintained&quot;&gt;
&lt;h2&gt;Actively maintained&lt;/h2&gt;
&lt;p&gt;Check out the log. It has been going strong for over 3 years.&lt;/p&gt;
&lt;p&gt;If I recall correctly, it was born out of the frustration¹ of having to compile Python on Mac OS X Leopard. Python &lt;em&gt;never&lt;/em&gt; compiles correctly on new versions of OS X (which is a complete mystery to me given that Apple ships with Python, don&amp;#8217;t they think people will want to compile it?).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;easy-to-install&quot;&gt;
&lt;h2&gt;Easy to install&lt;/h2&gt;
&lt;p&gt;Got Subversion? Then you &lt;em&gt;can haz&lt;/em&gt; the Collective Python buildout². You will also need to bootstrap it with whatever Python version you happen to have laying around. I won&amp;#8217;t go into detail about this; but suffice it to say depending on your OS, one of the following or something like it should work:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aptitude install python2.5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install python
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are on Windows, give up (unless you have a Microsoft C compiler). Sorry.&lt;/p&gt;
&lt;p&gt;Now, check out the code from the repository (if you are a member of the &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/collective&quot;&gt;Collective&lt;/a&gt; and may potentially contribute something back, make sure you use https):&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn co http://svn.plone.org/svn/collective/buildout/python
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next, bootstrap and run the buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cd python
$ python bootstrap.py -d
$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s it. The buildout should go merrily on it&amp;#8217;s way compiling Python 2.4 through 3.2. When it finishes, you can install it in /opt (or wherever you like) with the following command (you might need sudo):&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/install-links
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then you should see:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /bin/ls -1 /opt/local/bin
easy_install-2.4
easy_install-2.5
easy_install-2.6
easy_install-2.7
easy_install-3.2
pip-2.4
pip-2.5
pip-2.6
pip-2.7
pip-3.2
python2.4
python2.5
python2.6
python2.7
python3.2
virtualenv-2.4
virtualenv-2.5
virtualenv-2.6
virtualenv-2.7
virtualenv-3.2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;easy-to-configure&quot;&gt;
&lt;h2&gt;Easy to configure&lt;/h2&gt;
&lt;p&gt;Now you can add &lt;strong&gt;/opt/local/bin&lt;/strong&gt; to your environment PATH variable.  This will make it easy to choose a particular Python, PIP, or Virtualenv at your leisure.&lt;/p&gt;
&lt;p&gt;Unfortunately, if you pip install something, it will end up in the checkout instead of &lt;em&gt;/opt/local/bin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To get around this, I usually pick one Python for daily use, and add its bin directory to my environment PATH variable:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ echo $PATH | tr &amp;#39;:&amp;#39; &amp;#39;n&amp;#39;
/sbin
/usr/sbin
/usr/local/bin
/opt/local/bin
/Users/aclark/Developer/collective/python/python-2.7/bin
/usr/bin
/bin
/sbin
/usr/X11/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After various pip installs, my 2.7 bin directory contains the usual tools of the trade:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /bin/ls -1 /Users/aclark/Developer/collective/python/
python-2.7/bin
__dotcloud_git_ssh
activate
activate.csh
activate.fish
activate_this.py
bfg2pyramid
checkoutmanager
cloudservers
dotcloud
easy_install
easy_install-2.7
eye
flake8
fsdump
fsoids
fsrefs
fstail
hg
mako-render
mkrelease
paster
pilconvert.py
pildriver.py
pilfile.py
pilfont.py
pilprint.py
pip
pip-2.7
playerpiano
pygmentize
python
python2.7
recorderpiano
repozo
rfc2397
rst2html.py
rst2latex.py
rst2man.py
rst2newlatex.py
rst2odt.py
rst2odt_prepstyles.py
rst2pseudoxml.py
rst2s5.py
rst2xml.py
rstpep2html.py
runzeo
sphinx-autogen
sphinx-build
sphinx-quickstart
vanity
zconfig
zconfig_schema2html
zdaemon
zeoctl
zeopack
zeopasswd
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;wrap-it-up-i-ll-take-it&quot;&gt;
&lt;h2&gt;Wrap it up, I&amp;#8217;ll take it&lt;/h2&gt;
&lt;p&gt;That&amp;#8217;s it! There is not too much more to say, other than I hope you find this post useful and will consider using the &lt;a class=&quot;reference external&quot; href=&quot;http://svn.plone.org/svn/collective/buildout/python&quot;&gt;Collective Python buildout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, comments are always welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;¹ Experienced by its creator, &lt;a class=&quot;reference external&quot; href=&quot;http://twitter.com/fschulze&quot;&gt;fschulze&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;² It will likely end up on &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/collective&quot;&gt;Github&lt;/a&gt; at some point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Plone Secrets Episode 1 Site Actions Contact Link</title>
    <id>http://blog.aclark.net/2011/06/20/plone-secrets-episode-1-site-actions-contact-link/</id>
    <updated>2011-06-20T00:00:00Z</updated>
    <published>2011-06-20T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/06/20/plone-secrets-episode-1-site-actions-contact-link/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-secrets-episode-1-site-actions-contact-link&quot;&gt;

&lt;p&gt;&lt;strong&gt;Today I am introducing a new category of blog entry called Plone secrets.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The goal is to describe a set of developer/integrator techniques that are extremely valuable, but completely non-obvious to newcomers.&lt;/p&gt;
&lt;p&gt;The first episode, called: &lt;strong&gt;Site actions contact link&lt;/strong&gt;, is really just a technique that involves the Zope Management Interface, Plone interface, file system, Diazo, and quite possibly a few other technologies. This is no secret, but certainly convoluted. Noticeably absent is anything Python-related, unless you count the &lt;cite&gt;plonetheme.aclarknet&lt;/cite&gt; namespace package.&lt;/p&gt;
&lt;p&gt;We begin by pointing your attention to the new &amp;#8220;Contact us today!&amp;#8221; link on aclark.net.&lt;/p&gt;
&lt;p&gt;This is a gratuitous rip off of any Plone firm&amp;#8217;s website that has contact info in the upper right of their site (e.g.  &lt;a class=&quot;reference external&quot; href=&quot;http://sixfeetup.com&quot;&gt;http://sixfeetup.com&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I knew I wanted to do &amp;#8220;my version&amp;#8221; of adding contact info to the upper right, and I think I&amp;#8217;ve seen someone use this exact technique somewhere else (I would credit them if I could remember.)&lt;/p&gt;
&lt;p&gt;Long story short: Plone 4&amp;#8217;s sunburst theme has a nice JavaScript drop down menu for the personal tools menu. As long as I was willing to give up a link to the login form (which I don&amp;#8217;t like displaying on public sites anyway), I could use this JavaScript menu to quickly and easily provide a link to my contact form.&lt;/p&gt;
&lt;p&gt;It &amp;#8220;only&amp;#8221; required the following:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;step-1&quot;&gt;
&lt;h2&gt;Step 1&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Get the personal tools menu to show up in my site. This was accomplished via the following Diazo rule:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;prepend content=&amp;#39;//*[@id=&amp;quot;portal-personaltools&amp;quot;]&amp;#39;
     theme=&amp;#39;//*[@id=&amp;quot;search&amp;quot;]&amp;#39; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note also that I am using the early-supported XPath syntax, but the more friendly CSS syntax is supported now too. See &lt;a class=&quot;reference external&quot; href=&quot;http://diazo.org&quot;&gt;http://diazo.org&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;For the full set of Diazo rules for this site, see here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Plone: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/rules.xml&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/rules.xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wordpress: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/theme/blog.xml&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/theme/blog.xml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-2&quot;&gt;
&lt;h2&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Next, we need to create and display only the &amp;#8220;Contact us today!&amp;#8221; link, which also involves disabling the &amp;#8220;Log in&amp;#8221; link. These tricks can be performed in the Zope Management Interface via the portal_actions tool.&lt;/p&gt;
&lt;p&gt;First, browse to &lt;cite&gt;Site Setup -&amp;gt; Zope Management Interface -&amp;gt; portal_actions -&amp;gt; user&lt;/cite&gt; and create a &lt;cite&gt;contact&lt;/cite&gt; action.&lt;/p&gt;
&lt;p&gt;Fill in the appropriate fields and click &lt;cite&gt;Save changes&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Finally, hide the &lt;cite&gt;Log in&lt;/cite&gt; action by unchecking &lt;cite&gt;Visible&lt;/cite&gt; and clicking &lt;cite&gt;Save changes&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-3&quot;&gt;
&lt;h2&gt;Step 3&lt;/h2&gt;
&lt;p&gt;Lastly and most importantly, persist your work on the file system outside of the database. You don&amp;#8217;t want to be forced to recreate this site action ever again through the web.&lt;/p&gt;
&lt;p&gt;This involves exporting the action via portal setup, and adding it to your package&amp;#8217;s GenericSetup profile. Browse to &lt;cite&gt;Site Setup -&amp;gt; Zope Management Interface -&amp;gt; portal_setup -&amp;gt; Export. Check the `Action providers&lt;/cite&gt; step.&lt;/p&gt;
&lt;p&gt;Then scroll all the way down to bottom and click &lt;cite&gt;Export selected steps&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;This will give you a tarred/gzipped file that when extracted will give you an &lt;cite&gt;actions.xml&lt;/cite&gt; file. Edit this file to include only the action you created, like so:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;/object&amp;gt;
&amp;lt;/object&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can find this file in its entirety here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/profiles/default/actions.xml&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/profiles/default/actions.xml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You also have to register a default profile in your package with ZCML (more technology!), like so:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;genericsetup:registerProfile
 name=&amp;quot;default&amp;quot;
 title=&amp;quot;ACLARK.NET, LLC profile&amp;quot;
 description=&amp;quot;Installs ACLARK.NET, LLC site customizations&amp;quot;
 directory=&amp;quot;profiles/default&amp;quot;
 provides=&amp;quot;Products.GenericSetup.interfaces.EXTENSION&amp;quot;
 /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can find this file in its entirety here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-4&quot;&gt;
&lt;h2&gt;Step 4&lt;/h2&gt;
&lt;p&gt;Style the results. This is more like Step 3.5, but still important.  Because we are doing Diazo theming, styling is easy. It&amp;#8217;s just a matter of editing the style sheet on the file system like you would expect to do in any web project. Of course, you need to know a bit about CSS and the CSS ids that Plone uses:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#personaltools-contact {
    color: #AA001F;
    background: white;
    text-transform: uppercase;
    font-size: 150%;
}
#portal-personaltools {
    background: white;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can find this file in its entirety here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/static/css/plone.css#L519&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/static/css/plone.css#L519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course, these styles apply to the public facing site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;results&quot;&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;
&lt;p&gt;I hope this post captures the essence of why I think many folks may be intimidated by Plone: in more cases than not, one must understand way too many technologies in order to get the job done. I hope to continue to demystify Plone through a series of &amp;#8220;Plone secrets&amp;#8221; posts, and ultimately I think the Plone project hopes to resolve these issues once and for all, however long that takes.&lt;/p&gt;
&lt;p&gt;I will speculate that long term Plone will move away from Zope 2, and everything from the Zope Management Interface that was useful will be recreated in Plone (i.e. ported). Or rather, that is what I would like to see happen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">You're So Vain, So Why Not Use Vanity?</title>
    <id>http://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/</id>
    <updated>2011-06-16T00:00:00Z</updated>
    <published>2011-06-16T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;you-re-so-vain-so-why-not-use-vanity&quot;&gt;

&lt;p&gt;&lt;strong&gt;A few months ago I created a package called Vanity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A few months ago I created a package called &lt;strong&gt;Vanity&lt;/strong&gt;[0] that provides easy access to package download statistics from &lt;strong&gt;PyPI&lt;/strong&gt;. You can find the source code here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/vanity&quot;&gt;https://github.com/aclark4life/vanity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I love this tool, and I use it all the time to gauge the value of a package. Of course, downloads are only one criteria you can use to judge the value of a package, and arguably not even a very good one.  &lt;strong&gt;Vanity&lt;/strong&gt; itself is a good example of this phenomenon. I find it incredibly useful, but in it&amp;#8217;s history it has only been downloaded &lt;em&gt;130&lt;/em&gt; times.&lt;/p&gt;
&lt;p&gt;Other packages I have created with much less value have been downloaded more times, e.g. &lt;strong&gt;plonetheme.aclark_twitter&lt;/strong&gt; which has been downloaded&amp;nbsp; &lt;em&gt;674&lt;/em&gt; times. But that package has also been around much longer. So obviously another useful metric would be the &lt;em&gt;time period&lt;/em&gt; during which the downloads occurred.&lt;/p&gt;
&lt;p&gt;Anyway, here is how it works:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install vanity
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity &amp;lt;package&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity vanity
Package `vanity` has been downloaded 130 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity plonetheme.aclark_twitter
Package `plonetheme.aclark_twitter` has been downloaded 674 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Some of my other favorites:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity Django[1]
Package `Django` has been downloaded 302111 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity zope.component
Package `zope.component` has been downloaded 210541 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity pyramid
Package `pyramid` has been downloaded 26067 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another thing to consider is if hitting &lt;strong&gt;PyPI&lt;/strong&gt; each time is really necessary. I&amp;#8217;m told there is &lt;strong&gt;PyPI&lt;/strong&gt; data living somewhere else, and in future versions I would like to make vanity use that data by default.&lt;/p&gt;
&lt;p&gt;So, this post is simply to announce &lt;strong&gt;Vanity&lt;/strong&gt; to a wider audience in the event that some folks may find it useful. Otherwise, I will be happy to continue to watch &lt;strong&gt;Vanity&lt;/strong&gt; downloads crawl ever so slowly towards 200.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[0] By standing on the shoulders of some Plone giants, &lt;a class=&quot;reference external&quot; href=&quot;http://davisagli.com/&quot;&gt;David Glick,&lt;/a&gt; in particular.&lt;/p&gt;
&lt;p&gt;[1] There is a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/vanity/issues/1&quot;&gt;known issue&lt;/a&gt; with regard to making Vanity case insensitive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">ACLARK.NET, LLC Seeks Unique Candidate For Part-Time Business Consulting Opportunity</title>
    <id>http://blog.aclark.net/2011/06/14/aclark-net-seeks-unique-candidate-for-part-time-business-consulting/</id>
    <updated>2011-06-14T00:00:00Z</updated>
    <published>2011-06-14T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/06/14/aclark-net-seeks-unique-candidate-for-part-time-business-consulting/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;aclark-net-llc-seeks-unique-candidate-for-part-time-business-consulting-opportunity&quot;&gt;

&lt;p&gt;&lt;strong&gt;We are looking for a unique and talented (but mostly non-technical) individual that is passionate about Plone&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are looking for a unique and talented (but mostly non-technical) individual that is passionate about Plone, and able to dedicate some small amount of time per month to generating new business for us[1].&lt;/p&gt;
&lt;p&gt;Plone is up and coming (again)! And we want to (1.) capitalize on that fact and (2.) scale our business accordingly. But to do so, we really need your help.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;about-us&quot;&gt;
&lt;h2&gt;About us&lt;/h2&gt;
&lt;p&gt;We are a team[2] of Python, Plone, Web, and Business savvy people focused on Python, Plone, the web, and generally speaking: deploying and maintaining Plone applications that range from CMS to specialized applications, tailored to fit the needs of our clients[3].&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;alex&quot;&gt;
&lt;h3&gt;Alex&lt;/h3&gt;
&lt;p&gt;For those of you that know me, you know that I am largely technically, very artistic, and focused a lot on systems and making-things-work (vs.&amp;nbsp; programming), and that I am passionate to a fault about Plone and the Plone community. For those of you that don&amp;#8217;t know me, I&amp;#8217;m responsible for all new business at ACLARK.NET and I am the technical lead on all of our projects. I also rock a maroon Japanese Fender Stratocaster (circa mid 1980s) on occasion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;amy&quot;&gt;
&lt;h3&gt;Amy&lt;/h3&gt;
&lt;p&gt;My wife and business partner Amy is the &amp;#8220;business coordinator&amp;#8221; and she handles all things customer-related (that are non-technical) as well as anything legal and/or financial. If you know her, then you know she is a force to be reckoned with as well as one of the nicest, most professional people you will ever meet. If you don&amp;#8217;t know her, watch out! When she is not watching the bottom line, Amy can be found caring for our always-singing-while-she-is-on-the-phone yellow canary: J.&amp;nbsp; Alexander Chirpington III.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;team&quot;&gt;
&lt;h3&gt;Team&lt;/h3&gt;
&lt;p&gt;Team ACLARK also consists of a variety of highly skilled sub contractors that always make us look good by making our clients happy, and hopefully have lots of fun doing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;business&quot;&gt;
&lt;h3&gt;Business&lt;/h3&gt;
&lt;p&gt;To date, other than constantly &amp;#8220;pimping&amp;#8221; (promoting) myself personally (on behalf of my company) within the Plone community, we have never actively sought out any business. And we manage to stay quite busy with the work that finds us. But it has occurred to us that in order to compete most effectively with &amp;#8220;the big boys&amp;#8221; (i.e. all our friends/colleagues/etc at &lt;a class=&quot;reference external&quot; href=&quot;http://plone.net&quot;&gt;http://plone.net&lt;/a&gt;) we need to be more pro-active about seeking out new business.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s where you come in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;about-you&quot;&gt;
&lt;h2&gt;About you&lt;/h2&gt;
&lt;p&gt;We need someone to pursue leads on our behalf, because we simply don&amp;#8217;t have time to do it and we don&amp;#8217;t have anyone in-house that is particularly well-suited to the task. However, we don&amp;#8217;t want to let that stop us from growing our business and deploying as many Plone sites as possible; especially when we are confident we have the ability to deliver on just about any kind of Plone-related project, and then some (i.e. Django, Pyramid, etc., almost anything Python-related.)&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;criteria&quot;&gt;
&lt;h3&gt;Criteria&lt;/h3&gt;
&lt;p&gt;First and foremost, you love (and use) Plone (but aren&amp;#8217;t necessarily an integrator/developer; most likely an end user). But also:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;You are a &amp;#8220;people person&amp;#8221;.&lt;/li&gt;
&lt;li&gt;You have some writing skills, perhaps even a technical writer.&lt;/li&gt;
&lt;li&gt;You are aggressive about scoring new business, perhaps even someone with a sales background.&lt;/li&gt;
&lt;li&gt;You are a professional, and will represent us and our business accordingly!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also nice to have:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;You have a full-time job that is Plone-related.&lt;/li&gt;
&lt;li&gt;You have experience writing proposals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You don&amp;#8217;t necessarily have to &amp;#8220;know everything&amp;#8221; to do this job effectively for us, but you do have to be excited and pro-active about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;logistics&quot;&gt;
&lt;h3&gt;Logistics&lt;/h3&gt;
&lt;p&gt;We don&amp;#8217;t know how this will work yet. We are certainly willing to pay a percentage of the anticipated bid value for any bid we win, but we are considering other options as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;next-step&quot;&gt;
&lt;h3&gt;Next step&lt;/h3&gt;
&lt;p&gt;Sound like you? Let&amp;#8217;s talk: &lt;a class=&quot;reference external&quot; href=&quot;mailto:aclark&amp;#37;&amp;#52;&amp;#48;aclark&amp;#46;net&quot;&gt;aclark&lt;span&gt;&amp;#64;&lt;/span&gt;aclark&lt;span&gt;&amp;#46;&lt;/span&gt;net&lt;/a&gt;, 301-312-5236.&lt;/p&gt;
&lt;p&gt;We look forward to hearing from you, and please feel free to pass this information on to anyone you think may be interested in this opportunity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;Finding and submitting proposals, with our assistance, as needed. Even something as small as 8 hours per month would be helpful.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/team&quot;&gt;http://aclark.net/team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/clients&quot;&gt;http://aclark.net/clients&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">New Plone Theming Has Arrived</title>
    <id>http://blog.aclark.net/2011/05/27/new-plone-theming-has-arrived/</id>
    <updated>2011-05-27T00:00:00Z</updated>
    <published>2011-05-27T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/05/27/new-plone-theming-has-arrived/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-plone-theming-has-arrived&quot;&gt;

&lt;p&gt;&lt;strong&gt;Due to the new Diazo theming features now available, I am very excited about the recent release of Plone 4.1rc2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit2:&lt;/strong&gt;Enfold/Ploud.net looking for theme developers, see Alan Runyan&amp;#8217;s comment below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Laurence Rowe made new Diazo and plone.app.theming releases so the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/plonetheme.unilluminated/blob/master/unilluminated.zip?raw=true&quot;&gt;zip file&lt;/a&gt;now works! Thanks Laurence.&lt;/p&gt;
&lt;p&gt;Due to the new Diazo theming features now available, I am very excited about the recent release of &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Plone/4.1rc2&quot;&gt;Plone 4.1rc2&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plone.app.theming/1.0b2&quot;&gt;plone.app.theming 1.0b2&lt;/a&gt;. So much so, I created a couple themes (in just a few hours) to demonstrate my &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Rapture&quot;&gt;rapture [1]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;(released)
&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plonetheme.unilluminated/0.1.0&quot;&gt;http://pypi.python.org/pypi/plonetheme.unilluminated/0.1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(unreleased) &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/plonetheme.coolblue&quot;&gt;https://github.com/aclark4life/plonetheme.coolblue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Granted, these aren&amp;#8217;t entirely &amp;#8220;finished&amp;#8221; (e.g. lots of CSS improvements are needed) but it is truly impressive how much you can do with so little effort (thanks to the hard work of the Diazo team, Plone team, and of course the theme designers themselves).&lt;/p&gt;
&lt;p&gt;The best part has got to be the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plone.app.theming/1.0b2#zip-file-format&quot;&gt;zip file packaging features&lt;/a&gt; in plone.app.theming (provided by &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plone.resource/1.0b2&quot;&gt;plone.resource&lt;/a&gt;). While I did have a bit of trouble getting &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/plonetheme.unilluminated/blob/master/plonetheme/unilluminated/theme/unilluminated.zip&quot;&gt;my zip file&lt;/a&gt; to work, I suspect I&amp;#8217;ll get that issue resolved this week (I don&amp;#8217;t think I was able to import any zipped themes, even the ones from p.a.theming tests).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;suprise-i-like-it&quot;&gt;
&lt;h2&gt;Suprise! I like it&lt;/h2&gt;
&lt;p&gt;What I am most surprised about is how much I like this approach:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Developers can easily distribute themes in Python packages, and pay a much smaller &amp;#8220;theming tax&amp;#8221; with new style Diazo theming.&lt;/li&gt;
&lt;li&gt;They can also optionally choose to distribute Diazo themes as zip files for easy public consumption (although I can&amp;#8217;t think of any
good, automated way to publish just the zip files.)&lt;/li&gt;
&lt;li&gt;If I am not mistaken the contents of a zipped theme can be loaded &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/plonetheme.unilluminated/blob/master/plonetheme/unilluminated/configure.zcml&quot;&gt;quite elegantly&lt;/a&gt;, without changing their contents, via a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/plonetheme.unilluminated/&quot;&gt;Python
package&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, let us now commence the spamming of PyPI and the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products&quot;&gt;Plone.org downloads section&lt;/a&gt; with &amp;#8220;fun&amp;#8221; easy-to-install (read: no buildout) Plone themes! [2]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;disclaimer&quot;&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;These are my experiences with relatively new Plone technologies. If I&amp;#8217;ve made a mistake or if your experiences are different, please let me know in the comments.&lt;/p&gt;
&lt;p&gt;[1] Please forgive gratuitous belated rapture humor.&lt;/p&gt;
&lt;p&gt;[2] Before you get upset over any suggested spamming, I only mean to suggest that the ability to distribute a theme as a zip file lowers the bar to Plone adoption tremendously. Personally (and tentatively, since I&amp;#8217;m not even sure if everything is meant to work the way I currently expect it to), I plan to include a zipped archive of any theme I distribute as a Python package because it is so easy to do so (or hopefully will be very soon). But how the community chooses to capitalize on this new-found ability remains to be seen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Top 10 Reasons Plone 3.3 Site Admin Book is Still for You</title>
    <id>http://blog.aclark.net/2011/05/10/top-10-reasons-plone-3-3-site-admin-book-is-still-for-you/</id>
    <updated>2011-05-10T00:00:00Z</updated>
    <published>2011-05-10T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/05/10/top-10-reasons-plone-3-3-site-admin-book-is-still-for-you/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;top-10-reasons-plone-3-3-site-admin-book-is-still-for-you&quot;&gt;

&lt;p&gt;&lt;strong&gt;About a year ago, I was frantically trying to finish &amp;#8216;Plone 3.3 Site Administration&amp;#8217; …&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;About a year ago, I was frantically trying to finish &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/book&quot;&gt;Plone 3.3 Site Administration&lt;/a&gt; in time to teach it at Plone Symposium East 2010 at Penn State University as well as publish it. I remember staying up all night to finish &amp;amp; submit the final drafts then driving 4 hours to Penn State, then teaching for 8 hours before I was finally able to crash (but not before consuming a large and delicious cheeseburger and a Yuengling from the &lt;a class=&quot;reference external&quot; href=&quot;http://www.nittanylioninn.psu.edu/&quot;&gt;Nittany Lion Inn&lt;/a&gt; room service, yum).&lt;/p&gt;
&lt;p&gt;The class went well and everyone seemed happy with the results and I am very grateful to PSU for the opportunity. I remember struggling to get some Windows users up to speed, so this year I&amp;#8217;ve decided to &amp;#8220;require&amp;#8221; students to install Plone before the class via the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/plone/releases/4.0.5&quot;&gt;appropriate installer for their platform&lt;/a&gt;. Most &amp;#8220;site admin-ing&amp;#8221; we do will be &amp;#8220;ad hoc&amp;#8221; preferably on top of a stand-alone Python installation. But we can refer to the installer-based Plone as needed and in fact the installer-based Plone is all some folks will ever need or want.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-list&quot;&gt;
&lt;h2&gt;The list&lt;/h2&gt;
&lt;p&gt;Anyway, this post is about this year&amp;#8217;s class taught from the same material but updated to account for any changes that have occurred since the book was first published. Most importantly, it addresses the release of Plone 4 in the context of the book title &amp;#8220;Plone 3.3 Site Administration&amp;#8221;. So without further ado, why &amp;#8220;Plone 3.3 Site Administration&amp;#8221; is still for you:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;The version reference in the title is mostly meaningless&lt;/strong&gt;.  &lt;a class=&quot;reference external&quot; href=&quot;http://www.packtpub.com&quot;&gt;PACKT&lt;/a&gt; insist on incorporating a software version number into the title of their books. I would have called it: &amp;#8220;Plone Site Administration&amp;#8221;, or &amp;#8220;Buildout for Plone&amp;#8221;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The book teaches valuable *techniques*, using Plone 3.3 as an example&lt;/strong&gt;. Most, if not all of the techniques still apply today i.e. w/Plone 4.0.x and Plone 4.1.x. They will likely continue to apply as long as Plone continues to rely on &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/zc.buildout&quot;&gt;zc.buildout&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone makes it relatively easy to upgrade&lt;/strong&gt; by providing &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/release/4.1b2/versions.cfg&quot;&gt;version numbers&lt;/a&gt; for all of the packages it requires. In many cases an upgrade simply involves referring to a newer list of package versions. In the case of upgrading from Plone 3.3.x to Plone 4.0.x, the [zope2] section goes away because Zope2 became an egg. (Compare &lt;a class=&quot;reference external&quot; href=&quot;http://raw.github.com/plock/pins/master/plone-3-3&quot;&gt;this buildout&lt;/a&gt; with &lt;a class=&quot;reference external&quot; href=&quot;http://raw.github.com/plock/pins/master/plone-4-0&quot;&gt;this one&lt;/a&gt;.) Also Plone 4 buildouts should be bootstrapped with Python 2.6 instead of Python 2.4 as was required by Plone 3.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python tools &amp;#8220;goodness&amp;#8221;&lt;/strong&gt;. This book goes to great lengths to demonstrate how Plone fits &amp;#8220;naturally&amp;#8221; on top of the Python software stack. It also includes information about non-Plone-specific Python-related technologies like &lt;a class=&quot;reference external&quot; href=&quot;http://packages.python.org/setuptools/&quot;&gt;Setuptools&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/pip&quot;&gt;pip&lt;/a&gt;. This in theory makes Plone more approachable to &amp;#8220;regular&amp;#8221; Python folk.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Python buildout&lt;/strong&gt;. One of the most useful things the Plone community has to offer the Python community at large is the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/buildout.python&quot;&gt;Python buildout&lt;/a&gt;. If you do development that requires multiple versions of Python e.g. Plone 3.3.x/4.0.x you could do worse than to rely on this buildout to provide them multiple versions quickly and easily. The book dances around the subject, but the point is: use it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;. This book goes to great lengths to demonstrate the Plone installation process on three popular operating systems: Mac OS X, Ubuntu Linux, and Windows. The point is to show off how similar the process is across platforms because Python does all the hard work, and of course to deal with the cases where it is not similar e.g. it&amp;#8217;s &amp;#8220;hard&amp;#8221; to compile &lt;a class=&quot;reference external&quot; href=&quot;http://python.org/download/windows/&quot;&gt;Python on Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add-ons&lt;/strong&gt;! A lot of the value of Plone comes from the ability to customize it to fit your needs. If that customization has already been done by some other member of the community, even better. This is one of the core essences of the Plone community: everyone working hard to contribute to the available pool of add-ons, and then &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products&quot;&gt;sharing the results&lt;/a&gt;. This book aims to make you better at evaluating the myriad of options you may be presented with when you need to &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi&quot;&gt;find and install an add-on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upgrades&lt;/strong&gt;! The final chapter of the book holds your hand and walks you through an upgrade from Plone 3.3.x to Plone 4.0.x. It doesn&amp;#8217;t contain anything you can&amp;#8217;t find at &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/upgrade&quot;&gt;http://plone.org/upgrade&lt;/a&gt; (in fact it contains much less information), but in the context of a book full of buildout configuration file examples, it should feel more like a natural step than an intimidating process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;! The book covers how to deal with security patches, &lt;em&gt;not&lt;/em&gt; in the common case of when a hotfix is released as a Zope 2 Product or Python egg, but in the &lt;a class=&quot;reference external&quot; href=&quot;http://raw.github.com/plock/pins/master/plone-2-1&quot;&gt;somewhat more obscure case&lt;/a&gt; where a newer (non-egg) Zope2 release replaces an older one with a vulnerability. The modern equivalent would be a Plone release post-security-hotfix release. Such releases simply contain a newer KGS listing package versions that contain the appropriate fixes.  This &amp;#8220;old school&amp;#8221; example is included to give readers as broad a perspective as possible, so that they may better handle anything they may come across in the wild.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All the boring stuff too&lt;/strong&gt;. This book also walks you through the remaining &amp;#8220;hot&amp;#8221; topics not covered yet in this list, all from a heavy zc.buildout configuration management perspective: site basics e.g. customizing navigation, appearance (AKA theming, strictly &amp;#8220;old style&amp;#8221; sorry), administration e.g. mail settings, ldap, deployment and maintenance e.g. automating database backups and packing, and optimization e.g. load balancing, supervisor, and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/munin.plone&quot;&gt;munin graphs&lt;/a&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-training&quot;&gt;
&lt;h2&gt;The training&lt;/h2&gt;
&lt;p&gt;Sound even the &lt;em&gt;slightest&lt;/em&gt; bit interesting? And/or are these things you &lt;em&gt;need&lt;/em&gt; to know about Plone for your job? If so, then you or your employees will not want to miss my one day class next week at the &lt;a class=&quot;reference external&quot; href=&quot;http://weblion.psu.edu/symposium&quot;&gt;Plone Symposium East 2011&lt;/a&gt;. In case you or your employees are interested, you can sign up here (separate from the symposium):&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/services&quot;&gt;http://aclark.net/services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope to see you there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-service&quot;&gt;
&lt;h2&gt;The service&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;baas-buildout-as-a-service&quot;&gt;
&lt;h3&gt;BaaS (Buildout as a Service)&lt;/h3&gt;
&lt;p&gt;(Yes, I am serious)&lt;/p&gt;
&lt;p&gt;And finally for whatever it is worth, many of the lessons learned from writing the book from the author&amp;#8217;s perspective ended up here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/pins&quot;&gt;https://github.com/plock/pins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is to say: buildouts are frequently changing in response to what is going on in the Python package ecosystem around them even though their primary goal is to maintain stability and/or to only change when you want to change. When a change like a security fix or configuration change comes along, the author pushes changes out to the dist server than deploys the dist server changes to production.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Plone Conference 2008 is Finally a Wrap</title>
    <id>http://blog.aclark.net/2011/05/03/plone-conference-2008-is-a-wrap/</id>
    <updated>2011-05-03T00:00:00Z</updated>
    <published>2011-05-03T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/05/03/plone-conference-2008-is-a-wrap/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-conference-2008-is-finally-a-wrap&quot;&gt;

&lt;p&gt;&lt;strong&gt;I have yet to finish my obligations to Plone Conference 2008 until NOW.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have yet to finish my obligations to &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/2008&quot;&gt;Plone Conference 2008&lt;/a&gt; until NOW: approximately 2 years, 6 months, and 23 days after the end of the post-conference sprint.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-story&quot;&gt;
&lt;h2&gt;The story&lt;/h2&gt;
&lt;p&gt;We had some trouble with the video company and I had to hunt them down to get copies of missing talks. We still didn&amp;#8217;t get everything, but this is the last of what we did get. I got these missing DVDs about a year ago, and since then I&amp;#8217;ve been trying to find the time to upload them to &lt;a class=&quot;reference external&quot; href=&quot;http://zpugdc.blip.tv/&quot;&gt;blip.tv&lt;/a&gt;. Invariably, I got stuck on some aspect of the conversion process so I decided to &amp;#8220;give up&amp;#8221; and just upload the ripped copies to &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org:5021/media/video/conference/2008/PloneConference2008/&quot;&gt;dist.plone.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As such, if anyone in the community has the time and expertise to convert these to Quicktime format, I would greatly appreciate it, and I would be happy to upload the results to blip.tv (this is how we did it the first time if I recall correctly.) Until then, they have at least reached their final resting place, and folks can get access to them if they are interested, here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-2/33-weblion-bringing-open-sources-practices-to-the-educational-enterprise.m4v&quot;&gt;WebLion: Bringing Open Sources Practices to the Educational
Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/43-introduction-to-z3c.form.m4v&quot;&gt;Introduction to z3c.form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-2/26-the-big-green-button-turning-plone-into-a-dynamic-site-factory.m4v&quot;&gt;The Big Green Button: Turning Plone into a dynamic site factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/52-collective-good-best-practices-for-creating-releasing-and-maintaining-add-on-products-for-plone.m4v&quot;&gt;Collective Good: Best Practices for Creating, Releasing and
Maintaining Add-on Products for Plone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/42-why-through-the-web-development-isnt.m4v&quot;&gt;Why Through-The-Web Development Isn&amp;#8217;t&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/46-relational-database-applications-with-plone-and-sqlalchemy.m4v&quot;&gt;Relational database applications with Plone and SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/41-reaching-deployment-nirvana-using-buildout.m4v&quot;&gt;Reaching Deployment Nirvana Using Buildout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remarkably, some of these newly added videos are &lt;em&gt;still&lt;/em&gt; relevant &lt;strong&gt;and&lt;/strong&gt; enjoyable to watch, as are many of the ones already available in the easily browsable &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/events/conferences/2008-washington-dc/agenda&quot;&gt;archive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My sincerest apologies to the community and especially to those whose videos were amongst this group for the delay, you should not have had to wait 2 days let alone over 2 years!&lt;/p&gt;
&lt;p&gt;Thus, I now declare &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/2008&quot;&gt;Plone Conference 2008&lt;/a&gt; to be wrapped. Thanks to Sean Kelly for the &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/ticket/11762&quot;&gt;help transferring the video&lt;/a&gt; to plone.org.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Collective.transmogrifier Without Plone?</title>
    <id>http://blog.aclark.net/2011/04/15/collective-transmogrifier-without-plone/</id>
    <updated>2011-04-15T00:00:00Z</updated>
    <published>2011-04-15T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/04/15/collective-transmogrifier-without-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;collective-transmogrifier-without-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;Yes!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since I began drinking the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.transmogrifier&quot;&gt;collective.transmogrifier&lt;/a&gt; Kool Aid a few months back, I&amp;#8217;ve gotten quite excited about the possibility of being able to use it outside Plone, i.e. like &amp;#8220;regular&amp;#8221; Python people would do.&lt;/p&gt;
&lt;p&gt;It just so happens I have a current project that requires me to import content to Plone 2.5; it took me a while to realize I could just setup a Plone 4 instance, run transmogrifier in it, and import content from it (i.e. from the file system) to Plone 2.5 over XML-RPC. But something about having to include Plone 4 in that scenario rubbed me the wrong way: Plone 4 is not needed, it&amp;#8217;s just executing the pipeline.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(I also don&amp;#8217;t like the idea of having to create a Python package and a GenericSetup profile in order to facilitate a migration.)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;goals&quot;&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;p&gt;So in addition to working on getting &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/mr.migrator&quot;&gt;mr.migrator&lt;/a&gt; to be able to configure and execute pipelines (currently only GenericSetup profiles and Python code are supported), I thought I&amp;#8217;d experiment with removing the CMFCore dependency.&lt;/p&gt;
&lt;p&gt;The initial, &lt;em&gt;experimental&lt;/em&gt; results can be seen in action here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/mr_migrator_demo&quot;&gt;https://github.com/aclark4life/mr_migrator_demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/mr_migrator_demo/raw/master/README.txt&quot;&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Introduction
============

This demo is:* Proof of concept for mr.migrator: A tool that provides the ability to
register and execute collective.transmogrifier pipelines without creating a
Python package. It&amp;#39;s Miller Time™.* Also proof of concept for collective.transmogrifier with the CMFCore
dependency removed (and a zope.component dependency added in its place).
It&amp;#39;s Scotch time™.

Explanation
-----------
In order to work, it currently relies on:* https://svn.plone.org/svn/collective/collective.transmogrifier/branches/aclark-mr-migrator-compat
* https://svn.plone.org/svn/collective/transmogrify.filesystem/branches/aclark-mr-migrator-compat
* git@github.com:aclark4life/transmogrify.ploneremote.git These are, respectively:* A branch of c.transmogrifier with a setuptools entry point plugin system
added, and the CMFCore dependencies removed (gracefully, I hope).* A branch of t.filesystem with the collective.transmogrifier entry point
specified (and some CMFCore dependencies removed).* A fork of t.ploneremote with the collective.transmogrifier entry point
specified (and some CMFCore dependencies remove).
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s a work in progress, but it actually imports content. You may try it locally, as explained in the rest of the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/mr_migrator_demo/raw/master/README.txt&quot;&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installation
------------
You can try out this demo::

    $ git clone git@github.com:aclark4life/mr_migrator_demo.git
    $ cd mr_migrator_demo
    $ python bootstrap.py
    $ bin/buildout

Elsewhere, setup a Plone site listenining on localhost:8080 with a Plone site
object called &amp;quot;Plone&amp;quot; and then:

    $ bin/mr.migrator

You should end up with content in Plone that looks like this:
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I hope this helps move the state of the art forward a bit; it would be great to share this technology with the rest of the Python world. And in case you are curious about the changes, you can read the revision log here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/collective/log/collective.transmogrifier/branches/aclark-mr-migrator-compat&quot;&gt;http://dev.plone.org/collective/log/collective.transmogrifier/branches/aclark-mr-migrator-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Start with the following revision, and click through the next 8 commits:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/collective/changeset/237628/collective.transmogrifier/branches/aclark-mr-migrator-compat&quot;&gt;http://dev.plone.org/collective/changeset/237628/collective.transmogrifier/branches/aclark-mr-migrator-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comments welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;credits&quot;&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks Martijn Pieters for creating collective.transmogrifier; thanks Martin Aspeli and Dylan Jay for their blueprints; and thanks Dylan Jay for bringing transmogrifier to the masses via mr.migrator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Introducing Charm; Death to Charm</title>
    <id>http://blog.aclark.net/2011/03/29/introducing-charm-death-to-charm/</id>
    <updated>2011-03-29T00:00:00Z</updated>
    <published>2011-03-29T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/03/29/introducing-charm-death-to-charm/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;introducing-charm-death-to-charm&quot;&gt;

&lt;p&gt;&lt;strong&gt;A long time ago (several years ago, or more) one of my first Plone jobs was importing content from the file system.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A long time ago (several years ago, or more) one of my first Plone jobs was importing content from the file system (put there by another CMS) to a client&amp;#8217;s Plone 2.5 website (see: &lt;a class=&quot;reference external&quot; href=&quot;http://blip.tv/file/761624/&quot;&gt;http://blip.tv/file/761624/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Some time later (last year or so) the client decided they wanted to scoop up even more content from the file system (we only grabbed the last few years prior to launch!)&lt;/p&gt;
&lt;p&gt;Unfortunately, the old migration code was truly a horror. So I&amp;#8217;ve been having a hard time making myself run it again (I was just learning Python at the time.)&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;about-charm&quot;&gt;
&lt;h2&gt;About charm&lt;/h2&gt;
&lt;p&gt;This is where &lt;em&gt;charm&lt;/em&gt; comes in; formerly &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/mr.importer&quot;&gt;mr.importer&lt;/a&gt;, formerly &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/parse2plone&quot;&gt;parse2plone&lt;/a&gt;. Get it? The third time is a… I had the &amp;#8220;big idea&amp;#8221; to rewrite, then open source the code I wrote for the client.  Unfortunately, the rewrite became a horror too.&lt;/p&gt;
&lt;p&gt;First, it was not well received amongst the more reusable approaches based on &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.transmogrifier&quot;&gt;collective.transmogrifier&lt;/a&gt;, and rightfully so. While it was unpleasant to be told I was heading in the wrong direction, it was &lt;strong&gt;*even more*&lt;/strong&gt; unpleasant to find out &amp;#8220;they&amp;#8221; were right.&lt;/p&gt;
&lt;p&gt;Second, as &amp;#8220;they&amp;#8221; predicted, I got to the point where I couldn&amp;#8217;t read or maintain it any more (and I &lt;strong&gt;*just*&lt;/strong&gt; wrote it).&lt;/p&gt;
&lt;p&gt;So, I decided to revert to a version which had much fewer configuration options, because making it configurable became a huge distraction. What&amp;#8217;s left is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The code is &amp;#8220;readable&amp;#8221;, for some value of readable (PEP8/pyflakes compliant) and it&amp;#8217;s in a single module: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/charm/blob/master/charm.py&quot;&gt;charm.py&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The concept is &amp;#8220;simple&amp;#8221;, for some value of simple; it&amp;#8217;s a recipe that creates a script for you, that you run via:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone run bin/charm /path/to/files
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The results are &amp;#8220;impressive&amp;#8221; for some value of impressive; it imports content from the file system into Plone:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2011-03-21 11:51:20,302 - charm - INFO - Imported 19 folders,
1 images, 20 pages, and 2 files.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;It won&amp;#8217;t crash (!), for some value of &amp;#8220;keeps going&amp;#8221;; it tries to do try/except on operations more likely to fail&amp;nbsp; e.g. create_parts (via &amp;#8211;ignore-errors). This aims to ensure you at least get some content in your site post-execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone run bin/charm html --ignore-errors
...
2011-03-22 07:24:32,821 - charm - INFO - creating folder &amp;#39;id&amp;#39; inside
                          parent folder &amp;#39;/Plone&amp;#39;
2011-03-22 07:24:32,822 - charm - INFO - Keep going! Ignoring error
                          &amp;#39;The id &amp;quot;id&amp;quot; is invalid - it is already in use.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;It has some tests, 34% coverage at the time of this writing:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;619    34%   charm   (/Users/aclark/Developer/charm/charm.py)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Has &amp;#8220;cool&amp;#8221; features, for some value of cool. Most notably, the &amp;#8220;collapse&amp;#8221; feature (AKA &amp;#8220;slugify&amp;#8221;):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone run bin/charm html --collapse
...
2011-03-22 07:13:28,673 - charm - INFO - path &amp;#39;html/2011/01/01/test-collapse&amp;#39;,
                          has subdirs &amp;#39;&amp;#39;, and files &amp;#39;index.html&amp;#39;
...
2011-03-22 07:13:28,693 - charm - INFO - object &amp;#39;test-collapse-20110101.html&amp;#39;
                          does not exist inside &amp;#39;/Plone&amp;#39;
2011-03-22 07:13:28,693 - charm - INFO - creating page &amp;#39;test-collapse-20110101.html&amp;#39;
                          inside parent folder &amp;#39;/Plone&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;And the &amp;#8220;publish&amp;#8221; feature to optionally publish content after creation:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone run bin/charm html --collapse --publish
...
2011-03-22 07:13:29,008 - charm - INFO - publishing page &amp;#39;test-collapse-20110101.html&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And a few more things, but as you can see we are quickly approaching the point where more functionality does not necessarily mean better software. It&amp;#8217;s hard to build something complex AND make it easy to use, which is why I am moving on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;charming-demo&quot;&gt;
&lt;h2&gt;Charming demo&lt;/h2&gt;
&lt;p&gt;In writing this blog entry and releasing charm 1.0b4 I wanted to make sure to demonstrate how it works, so here is a screencast. This is how I envision content importing should work in Plone (or at least this is how I envision a &amp;#8220;simple&amp;#8221; way it could work.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;after-charm&quot;&gt;
&lt;h2&gt;After charm&lt;/h2&gt;
&lt;p&gt;After I began writing &lt;em&gt;charm&lt;/em&gt;, I began to collaborate with Dylan Jay on funnelweb and beyond (e.g. &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/mr.migrator&quot;&gt;mr.migrator&lt;/a&gt;). And I am now more determined than ever to write reusable code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Cioppino Sprint Report</title>
    <id>http://blog.aclark.net/2011/02/16/cioppino-sprint-report/</id>
    <updated>2011-02-16T00:00:00Z</updated>
    <published>2011-02-16T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/02/16/cioppino-sprint-report/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;cioppino-sprint-report&quot;&gt;

&lt;p&gt;&lt;strong&gt;The Cioppino Sprint was recently held in Bodega Bay, CA.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;http://coactivate.org/projects/snow-sprint-west-2011/project-home&quot;&gt;Cioppino Sprint&lt;/a&gt; was recently held in Bodega Bay, CA. It was a &lt;a class=&quot;reference external&quot; href=&quot;http://twitpic.com/3y21yk&quot;&gt;beautiful location&lt;/a&gt; for a gathering of awesome Plone folks; and much was accomplished. Unfortunately on the second morning of the sprint, we were all deeply saddened to hear about the passing of Dorneles Treméa.&lt;/p&gt;
&lt;img alt=&quot;Bodega Bay&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/bodega.jpg&quot; /&gt;
&lt;div class=&quot;section&quot; id=&quot;the-passing-of-dorneles-tremea&quot;&gt;
&lt;h2&gt;The passing of Dorneles Treméa&lt;/h2&gt;
&lt;p&gt;I didn&amp;#8217;t know Dorneles very well, but he was certainly someone I idolized during my initial Plone fascination days (e.g. &amp;#8220;Who are all these cool people with such cool names!&amp;#8221;). And after digging through my old emails, I now remember we had several pleasant exchanges over the years.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;memories&quot;&gt;
&lt;h3&gt;Memories&lt;/h3&gt;
&lt;p&gt;In particular, I have this memory of Dorneles and Alan Runyan sitting together at the Plone Conference 2008 sprint, smiling and working on their laptops. Before his death, it was just a random image that would occasionally pop into my head. Now, it&amp;#8217;s something I&amp;#8217;ll remember him by.&lt;/p&gt;
&lt;p&gt;We also corresponded briefly about his &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.ExternalStorage&quot;&gt;ExternalStorage&lt;/a&gt; add-on for Plone, around the time we upgraded plone.org from Plone 2.5 to Plone 3.0 (circa 2008), as well as traded emails about his invitation to attend Plone Conference 2008 in DC (for his visa application).&lt;/p&gt;
&lt;p&gt;The funniest thing he ever said to me was when I was making the rounds asking for donations for Plone Conference 2008. He replied,&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&amp;#8220;Are you aware that you&amp;#8217;re talking with a 3rd world citizen?&amp;#8221;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;m not sure if I offended him, or what. But it struck me funny at the time (and he went on to joke about how donations usually flow in the other direction, ending with his tongue stuck out i.e. &amp;#8221;:-p&amp;#8221;). It also reminded me of one the things I love most about Plone: the opportunity (I may never get otherwise) to correspond/collaborate with cool, passionate people all over the world.&lt;/p&gt;
&lt;p&gt;To me, Dorneles was one of the living embodiments of the &lt;em&gt;coolness&lt;/em&gt; and &lt;em&gt;worldliness&lt;/em&gt; of the Plone project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;wishes&quot;&gt;
&lt;h3&gt;Wishes&lt;/h3&gt;
&lt;p&gt;My condolences and best wishes to his family, I hope you know how much he meant to so many folks in the Plone and Python communities. And just how many lives he touched with his work. And goodbye Dorneles; though I knew you very little, I will miss you very much. May your legacy live on, long in to the future.&lt;/p&gt;
&lt;p&gt;Incidentally, if you would like to give money to help support Dorneles&amp;#8217; family in the aftermath of this tragedy, you can do so here: &lt;a class=&quot;reference external&quot; href=&quot;http://associacao.python.org.br/doacoes-familia-dorneles&quot;&gt;http://associacao.python.org.br/doacoes-familia-dorneles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, the sprint (or at least my part of it) was awesome! Amidst the very sad and shocking news of Dorneles&amp;#8217; passing, we all kept busy with our work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;sprint-report&quot;&gt;
&lt;h2&gt;Sprint report&lt;/h2&gt;
&lt;p&gt;It&amp;#8217;s a bit overwhelming to try and capture everything that happened (and I was only there for two days!); hopefully this report will be useful. The focus of this sprint was evaluator approachability (i.e. making Plone look good to prospective new users).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;day-1-and-day-2&quot;&gt;
&lt;h3&gt;Day 1 and Day 2&lt;/h3&gt;
&lt;p&gt;Steve McMahon (SteveM) was our host. Alex Limi (limi) provided general direction regarding strategies to improve plone.net, documentation, and end user support. But most importantly, he pointed out that the first stop for any prospective new user is the website, so it&amp;#8217;s important that it look good.&lt;/p&gt;
&lt;p&gt;David Glick (davisagli) and Elizabeth Leddy (eleddy) wasted no time in diving in to the 150 or so open tickets in the (now defunct) &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone.org&quot;&gt;plone.org issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I (aclark) quickly fell into the role of the &amp;#8220;deployment witch&amp;#8221; (a role I enjoy), and suggested people simply push the &lt;strong&gt;ACLARK&lt;/strong&gt; button (née Staples Easy Button) whenever they needed their code deployed to plone.org.&lt;/p&gt;
&lt;p&gt;We closed a good number of tickets this way.&lt;/p&gt;
&lt;p&gt;Additionally:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Ross Patterson (zenwryly) grabbed a hold of the &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/browser/plone.org/Products.PloneOrg/trunk&quot;&gt;PloneOrg add-on&lt;/a&gt; (the add-on that powers plone.org) and added tests (among other things).&lt;/li&gt;
&lt;li&gt;Tyler Randles (hennaheto) and Trish Ang (feeeeesh) fixed a number of CSS annoyances, which were &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/changeset/47345/&quot;&gt;committed by SteveM&lt;/a&gt; (while Tyler &amp;amp; Trish pondered core commit access). My favorite of which is the now-blissfully-aligned username and password fields of the login_form:&lt;/li&gt;
&lt;li&gt;zenwryly fixed the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/team&quot;&gt;team section&lt;/a&gt; of plone.org.&lt;/li&gt;
&lt;li&gt;davisagli completed the last remaining task to fix &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/collective/browser/Products.PloneSoftwareCenter/trunk&quot;&gt;PloneSoftwareCenter&lt;/a&gt; permissions on plone.org (the sharing tab finally works now!)&lt;/li&gt;
&lt;li&gt;limi &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/changeset/47428/&quot;&gt;fixed a CSS sprite issue&lt;/a&gt; on plone.org (involving https, I think).&lt;/li&gt;
&lt;li&gt;SteveM tackled &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/changeset/47507/&quot;&gt;SSL certificate issues&lt;/a&gt; on plone.org.&lt;/li&gt;
&lt;li&gt;aclark took a stab at plone.net by converting the old style add-on Product that powers it to a &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/collective/browser/Products.PloneServicesCenter/trunk&quot;&gt;new style Egg package&lt;/a&gt;. zenwryly then &lt;a class=&quot;reference external&quot; href=&quot;http://rpatterson.net/blog/cioppino-sprint&quot;&gt;took that ball and ran with it&lt;/a&gt;, added tests and otherwise prepared for the future (i.e. Plone 4 compat).&lt;/li&gt;
&lt;li&gt;Jon Stahl (remotely) added a &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/follow&quot;&gt;&amp;#8220;follow&amp;#8221; section&lt;/a&gt; to plone.org.&lt;/li&gt;
&lt;li&gt;hennaheto and feeeeesh produced this amazing (but &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/foundation/logo/logoguidelines.pdf/view&quot;&gt;possibly non-compliant&lt;/a&gt;) sprint logo&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;day-3-day-4-and-day-5&quot;&gt;
&lt;h3&gt;Day 3, Day 4 and Day 5&lt;/h3&gt;
&lt;p&gt;Unfortunately, I had to leave on Friday morning but these are some of the things that happened after I left. Most importantly, Tom Kapanka (spanktar) arrived Thursday night and Bill Deegan arrived on Friday. And then:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;zenwryly updated PloneServicesCenter to Plone 4.&lt;/li&gt;
&lt;li&gt;limi and zenwryly replaced images of &amp;#8220;showcased sites&amp;#8221; in PloneServicesCenter with a web screenshot service to eliminate the need for storing images. (This move is still in progress, and various folks are working on issues with the web screenshot service. Please be patient!)&lt;/li&gt;
&lt;li&gt;zenwryly and limi moved content from plone.net to plone.org.&lt;/li&gt;
&lt;li&gt;aclark (remotely) pulled the DNS trigger on plone.net (re-configured A records for plone.net, to resolve to the same IP as plone.org)&lt;/li&gt;
&lt;li&gt;eleddy and spanktar created and released &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/cioppino.twothumbs/1&quot;&gt;cioppino.twothumbs&lt;/a&gt; to facilitate &amp;#8220;thumb style&amp;#8221; (up/down) ratings in PloneSoftwareCenter.&lt;/li&gt;
&lt;li&gt;davisagli made it so Plone can start without PIL (via fixes to PlonePAS and plone.app.blob). And these fixes even made it in to Plone 4.1a3! To be clear, Plone still requires PIL to render images but it will start if it&amp;#8217;s missing.&lt;/li&gt;
&lt;li&gt;davisagli and eleddy refactored the PloneOrg buildout&lt;/li&gt;
&lt;li&gt;Bill and limi moved the remaining old Plone installers from Sourceforge to &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/archive/&quot;&gt;dist.plone.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;post-sprint-sprinting&quot;&gt;
&lt;h3&gt;Post-sprint sprinting&lt;/h3&gt;
&lt;p&gt;One of the great things about a sprint is that it really focuses
attendees on accomplishing their tasks, long after they have left the
event. To that end:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;aclark triaged the remaining tickets in the plone.org tracker, and did a final tally of closed ticket rankings: davisagli (55), aclark (32), eleddy (28), limi (7). davisagli wins!&lt;/li&gt;
&lt;li&gt;aclark got inspired to begin uploading the half dozen or so missing videos from various Plone Conference 2008 talks (which were finally sent to him by the video company circa last year). Look for these to &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/2008&quot;&gt;land on plone.org&lt;/a&gt; soon.&lt;/li&gt;
&lt;li&gt;eleddy continued to develop the “two thumbs” feature.&lt;/li&gt;
&lt;li&gt;eleddy and aclark deployed the &amp;#8220;two thumbs&amp;#8221; feature to plone.org.  (This feature may not work as expected yet, eleddy is resolving issues.) Check it out:&lt;/li&gt;
&lt;li&gt;limi continued to improve the documentation/ and support/ sections of plone.org. Here are some screenshots of how the new sections will look once they launch:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s it! Just so you don&amp;#8217;t worry the sprinters worked too hard, you can rest assured everyone was in good hands with zenwryly and his travelling-bar.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you enjoyed reading this report and/or appreciate all the fun-but-hard work that goes in to attending a sprint, please consider&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/01/21/help-alex-clark-help-plone/&quot;&gt;donating to my travel fund&lt;/a&gt;. &lt;em&gt;Only three days left, and I&amp;#8217;m still a few dollars short!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">In Defense of PyPI</title>
    <id>http://blog.aclark.net/2011/01/31/in-defense-of-pypi/</id>
    <updated>2011-01-31T00:00:00Z</updated>
    <published>2011-01-31T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/01/31/in-defense-of-pypi/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;in-defense-of-pypi&quot;&gt;

&lt;p&gt;&lt;strong&gt;Everyone on the Python Planet is probably already familiar with Peter Fein&amp;#8217;s recent article about PyPI.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everyone on the Python Planet is probably already familiar with Peter Fein&amp;#8217;s recent article &lt;a class=&quot;reference external&quot; href=&quot;http://blog.wearpants.org/elitism-and-the-importance-of-pypi&quot;&gt;about PyPI use (or lack thereof).&lt;/a&gt; But in case not, particularly striking was the number of folks who joined the &amp;#8220;PyPI bashing&amp;#8221; in the comments. In fact, it has inspired me to write this post &amp;#8220;in defense of PyPI&amp;#8221;. I would like to offer the Python community a summary of what I think are the general criticisms, along with my responses as a &amp;#8220;sysadmin / developer type&amp;#8221;.&lt;/p&gt;
&lt;p&gt;First let me say this: I love PyPI! And I agree with Peter, if your package isn&amp;#8217;t on PyPI it&amp;nbsp; &amp;#8220;doesn&amp;#8217;t exist&amp;#8221;. I wouldn&amp;#8217;t put it quite like that; but I would say it&amp;#8217;s fairly important if you are publishing open source Python code, to consider uploading it to the Python Package Index.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;because-everybody-wins&quot;&gt;
&lt;h2&gt;Because Everybody Wins&lt;/h2&gt;
&lt;p&gt;Believe it or not, the general Python community is interested in seeing your code. Whether to use it for an example, or to avoid reinventing the wheel, or whatever the reason; we&amp;#8217;d like a chance to see your code. But if you don&amp;#8217;t publish it to PyPI, we may never get that chance!&lt;/p&gt;
&lt;p&gt;For better or worse, PyPI is the canonical place on Earth for Python packages. It&amp;#8217;s the CPAN of Python. I understand that not everyone is 100% comfortable with this, but that doesn&amp;#8217;t make it any less true. If you accept that &amp;#8220;open source is good&amp;#8221;, and that &amp;#8220;Python rules&amp;#8221;, then you simply must take this next leap of faith: &amp;#8220;PyPI is &lt;em&gt;the&lt;/em&gt; place for Python packages&amp;#8221;.&lt;/p&gt;
&lt;p&gt;[waves hand]&lt;/p&gt;
&lt;p&gt;Moving on, why else should you consider uploading your packages to PyPI?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;because-it-is-the-right-thing-to-do&quot;&gt;
&lt;h2&gt;Because It Is The &amp;#8220;Right&amp;#8221; Thing To Do&lt;/h2&gt;
&lt;p&gt;Another thing that struck me is the number of folks who (appear to) confuse &amp;#8220;version control&amp;#8221; with &amp;#8220;distribution&amp;#8221;. If I&amp;#8217;m not mistaken, Launchpad, Github, and Bitbucket are primarily designed for Bazaar, Git, and Mercurial hosting respectively. These sites can host your distribution tarballs, but they certainly weren&amp;#8217;t &lt;em&gt;designed and built&lt;/em&gt; to do so. Rather, they were designed and built to host your source code.&lt;/p&gt;
&lt;p&gt;In some cases, a project may wish to host it&amp;#8217;s own &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/&quot;&gt;distribution server&lt;/a&gt;. Whether it be for redundancy (although PyPI has begun to tackle this) or &amp;#8220;branding&amp;#8221; or other reasons, I would argue this is the preferred way of handling it: &lt;em&gt;in addition to uploading to PyPI, not in place of it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;because-it-is-not-that-hard&quot;&gt;
&lt;h2&gt;Because It Is Not That Hard&lt;/h2&gt;
&lt;p&gt;Ahem… we get it. The situation with easy_install is &amp;#8220;less than ideal&amp;#8221;.  But this is something to be fixed, not avoided. If you are receiving too many support requests, may I suggest &lt;a class=&quot;reference external&quot; href=&quot;http://blog.jazkarta.com/2010/05/15/installing-plone-without-buildout/#comment-162&quot;&gt;simply telling people not to use easy_install&lt;/a&gt;. Or, if the problem is proper packaging, learn how to &lt;a class=&quot;reference external&quot; href=&quot;http://groups.google.com/group/pylons-devel/msg/abfe9e7a43f62594&quot;&gt;test your packages&lt;/a&gt; before uploading them. Due to the large number of screwed up releases I&amp;#8217;ve made, I&amp;#8217;ve come to rely on a&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.PloneSoftwareCenter&quot;&gt;local PyPI&lt;/a&gt; and a virtualenv to test installations. Others use &lt;a class=&quot;reference external&quot; href=&quot;http://groups.google.com/group/pylons-devel/msg/696c69843eecd026&quot;&gt;even simpler methods&lt;/a&gt;.  And with tools like &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/jarn.mkrelease&quot;&gt;mkrelease,&lt;/a&gt; it&amp;#8217;s easy to upload your package to multiple PyPI locations with just a single command (although leaping-tall-buildings-in-a single-bound is not yet supported.)&lt;/p&gt;
&lt;p&gt;The point is, please consider helping the community fix the problem rather than simply avoiding it. There are folks &lt;a class=&quot;reference external&quot; href=&quot;http://wiki.python.org/moin/Distutils/SprintParis&quot;&gt;actively trying to improve the situation&lt;/a&gt; right now.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s see, what else?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;because-it-does-not-have-to-be-perfect&quot;&gt;
&lt;h2&gt;Because It Does Not Have To Be Perfect&lt;/h2&gt;
&lt;p&gt;Over the years I&amp;#8217;ve seen various and sundry criticisms of the PyPI user interface. Fine. I have not looked into the current development process, but I assume the author/maintainers would be open to some constructive criticism and/or development assistance.&lt;/p&gt;
&lt;p&gt;It doesn&amp;#8217;t have to be Github-sexy to be useful. If you would like to report a bug or feature request, do it &lt;a class=&quot;reference external&quot; href=&quot;http://sourceforge.net/tracker/?group_id=66150&quot;&gt;here&lt;/a&gt; (at least, I think that is the right place.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this convinces at least some folks to consider uploading their packages to PyPI. If it doesn&amp;#8217;t, please let me know why in the comments.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Did you enjoy reading this article? If so, please consider `helping me help Plone`_.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Hostout Rules</title>
    <id>http://blog.aclark.net/2011/01/26/hostout-rules/</id>
    <updated>2011-01-26T00:00:00Z</updated>
    <published>2011-01-26T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/01/26/hostout-rules/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;hostout-rules&quot;&gt;

&lt;p&gt;&lt;strong&gt;As in &amp;#8220;dominates&amp;#8221;, not a &amp;#8220;list of rules&amp;#8221;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I spent a long time avoiding &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.hostout&quot;&gt;collective.hostout&lt;/a&gt; for reasons I will
call &amp;#8220;technical stylistic differences&amp;#8221; with the author Dylan Jay.&lt;/p&gt;
&lt;p&gt;But then I grew up (and in cases of Plone growth like this, I usually
end up crediting the probably-much-younger-than-me-in-years,
but-certainly-much-more-possessive-of-sage-like-wisdom-than-me-Martin-Aspeli;
and this time is certainly no exception. So thanks Martin!)&lt;/p&gt;
&lt;p&gt;As it turns out, Hostout (as I like to call it now, because we are on a
first name basis) is awesome! Let me break down the awesomeness for you.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;buildout&quot;&gt;
&lt;h2&gt;Buildout&lt;/h2&gt;
&lt;p&gt;It starts with Buildout. I won&amp;#8217;t bore you with the details of why
Buildout is awesome, but I will mention one key feature:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;INI-style configuration, y&amp;#8217;all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes you just want to specify something like:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and be done. I am not making this up folks. There is something about
INI-style configuration that transcends time and space, and reaches
across partisan-aisles to bring folks together in a &amp;#8220;let&amp;#8217;s just get this
done&amp;#8221; sort of way. Of course not everyone likes them, but if you are a
technical person and don&amp;#8217;t like them, I guarantee you at least
understand them and can see why they might be appropriate in some cases
over another technology.&lt;/p&gt;
&lt;p&gt;Anyway, back to the awesomeness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;fabric&quot;&gt;
&lt;h2&gt;Fabric&lt;/h2&gt;
&lt;p&gt;Fabric is awesome! I won&amp;#8217;t bore you with the details of why Fabric is
awesome. But I will mention one key feature:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;SSH, people. SSH.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes you just want to type:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab -H foo.com bar
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and be done. Fabric lets you execute the Python code you wrote in a
function called &amp;#8220;bar&amp;#8221;, inside a (local) file called fabfile.py, on a
(remote) host called foo.com. All with the touch of a button, so to
speak. That is to say, you create a local fabfile.py file, and Fabric
runs the code remotely for you on any number of hosts you give it.
Brilliant.&lt;/p&gt;
&lt;p&gt;Now, what could be better than these two technologies? These two
technologies &lt;em&gt;together&lt;/em&gt;, that&amp;#8217;s what. (See where I am going with this?)
And what could be better than joining these two technologies? Joining
them with &lt;em&gt;absolutely no effort required on your part whatsoever&lt;/em&gt;,
that&amp;#8217;s what.&lt;/p&gt;
&lt;p&gt;I have a long history of touting software that makes my job (and life)
easier, and Hostout fits right in with that tradition. I&amp;#8217;m just sorry it
took me this long to try it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;hostout&quot;&gt;
&lt;h2&gt;Hostout&lt;/h2&gt;
&lt;p&gt;As compelling as it is to write &amp;#8220;pure Python&amp;#8221; in fab files, and it is,
sometimes you just want to be done. And Hostout helps you get there. I
will explain in a minute, but first a slight detour.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;back-story&quot;&gt;
&lt;h3&gt;Back story&lt;/h3&gt;
&lt;p&gt;I recently blogged about the relaunch of this website &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/01/19/new-website-for-2011/&quot;&gt;here&lt;/a&gt;. Shortly
after the launch, I realized I needed a quick and easy way to deploy my
staging site to production. I pitched the idea of a utility called
&amp;#8220;mr.pusher&amp;#8221; to accomplish this task to Dylan, with the caveat that I was
interested in making it work with Hostout.&lt;/p&gt;
&lt;p&gt;As it turns out, between Hostout and a recipe I created years ago called
&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recipe.rsync&quot;&gt;collective.recipe.rsync&lt;/a&gt;, &amp;#8220;mr.pusher&amp;#8221; almost already existed. Now back
to the story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;fabric-integration-made-easy&quot;&gt;
&lt;h3&gt;Fabric integration made easy&lt;/h3&gt;
&lt;p&gt;Since I knew I wanted to be able to execute a &amp;#8220;push&amp;#8221; command remotely, I
figured I would finally get acclimated with Hostout.&lt;/p&gt;
&lt;p&gt;After a small wrestling match in my head with the docs, I came up with
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website/blob/master/buildout.cfg#L64&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Hostout makes Fabric integration easy
[staging]
recipe = collective.hostout
host = aclark.net
path = /srv/staging[production]
recipe = collective.hostout
host = aclark.net
path = /srv/aclark_net_website
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At this point (after running buildout) I was able to perform such great
feats of remote administration (on my already-deployed-sans-hostout
sites) as:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/hostout staging run git pull
$ bin/hostout staging run bin/buildout -c staging.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Armed with this ability, I added the following to my &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website/blob/master/staging.cfg&quot;&gt;staging.cfg:&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Create scripts to deploy staging data to production.
# Be VERY careful with this. You could easily overwrite your
# live production data if you either forget to use the script
# option, or accidentally run the bin/rsync-filestorage-to-production
# script without stopping the production site first.
[filestorage-to-production]
recipe = collective.recipe.rsync
source = var/filestorage/Data.fs
target = ../aclark_net_website/var/filestorage/Data.fs
script = true[blobstorage-to-production]
recipe = collective.recipe.rsync
source = var/blobstorage/
target = ../aclark_net_website/var/blobstorage/
script = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The result was two scripts I could use to &amp;#8220;push&amp;#8221; staging to production,
but only after stopping the production site first:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/hostout production run bin/supervisorctl shutdown
$ bin/hostout staging run bin/rsync-filestorage-to-production
$ bin/hostout staging run bin/rsync-blobstorage-to-production
$ bin/hostout production run bin/supervisord
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And we&amp;#8217;re deployed! This technique is particularly elegant when used in
combination with a&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website/blob/master/apache.conf&quot;&gt;custom 503&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I really like this setup, and I really appreciate what Hostout gets me
&amp;#8220;for free&amp;#8221;; I didn&amp;#8217;t have to create a fabfile.py, I just configured my
staging and production host parameters in buildout.cfg and off I went.&lt;/p&gt;
&lt;p&gt;Of course, there is always room for improvement. The next most logical
step for me would be to add cloud integration. If I could provision a
new Rackspace cloud server via buildout, and then host-it-out, I think
the future will have arrived. And since that is exactly what
&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/hostout.cloud&quot;&gt;hostout.cloud&lt;/a&gt; appears to do, welcome to the future!&lt;/p&gt;
&lt;p&gt;Alex Clark (January 2011)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Did you enjoy reading this article? Please consider `helping me help
Plone in February 2011`_.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">You Should Buy Plone 3 for Education Right Now</title>
    <id>http://blog.aclark.net/2011/01/25/you-should-buy-plone-3-for-education-right-now/</id>
    <updated>2011-01-25T00:00:00Z</updated>
    <published>2011-01-25T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/01/25/you-should-buy-plone-3-for-education-right-now/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;you-should-buy-plone-3-for-education-right-now&quot;&gt;

&lt;p&gt;&lt;strong&gt;With what must be the fifth or sixth round of apologies to both Erik Rose and PACKT publishing for the delay (very sorry guys), here is my review! Better late than never.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I get bored with the same ol&amp;#8217; blog entry titles:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&amp;#8220;A review of so and so&amp;#8217;s book, by such and such…&amp;#8221;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Not that there is anything wrong with these titles, they serve their purpose. It&amp;#8217;s not you… it&amp;#8217;s me. Can we still be friends?&lt;/p&gt;
&lt;p&gt;Anyway, I will cut to the chase with this one: if you care about Plone and you have not done so already, you should buy &lt;strong&gt;`Plone 3 for Education`_&lt;/strong&gt;right now.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Several reasons:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Erik Rose cares about Plone. He cares so much, he spent months of his life pouring his professional experiences into a book so you can benefit!&lt;/li&gt;
&lt;li&gt;PACKT publishing will donate a percentage of the proceeds to the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/foundation&quot;&gt;Plone Foundation.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You will learn a lot about Plone, from the perspective of someone who has supported its deployment and maintenance within a large educational institution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is not to say every Plone book is for you. You have to decide for yourself if you want this beautiful creation (see above) of Erik&amp;#8217;s to shine on your mantle piece for years to come. Even if you are a giant Plone supporter, and even if you make your living off of Plone, you may still not want to purchase this book. That&amp;#8217;s just the way that it goes.  But, I will to try to convince you anyway! Here is my chapter-by-chapter review:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;preface&quot;&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;The preface sets the tone of the book, and I like the tone Erik sets.  Erik has used Plone for many years at &lt;a class=&quot;reference external&quot; href=&quot;http://weblion.psu.edu/&quot;&gt;Penn State&lt;/a&gt; and you will find his experiences valuable. He&amp;#8217;s made mistakes so you don&amp;#8217;t have to!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-1&quot;&gt;
&lt;h2&gt;Chapter 1&lt;/h2&gt;
&lt;p&gt;Chapter 1 covers creating courses (of course!) Erik makes the argument that Plone can hold it&amp;#8217;s own against expensive course management software, and I believe him. Of particular interest are Erik&amp;#8217;s recommendations to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Put courses in large Plone folders&lt;/li&gt;
&lt;li&gt;Use news items, events and collections in the context of a course.&lt;/li&gt;
&lt;li&gt;Cut and paste the course framework once you are done creating it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-2&quot;&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;p&gt;Chapter 2 introduces calendaring in Plone, and Erik suggests using &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/p4a.plonecalendar&quot;&gt;Plone4artists calendar&lt;/a&gt; to make your course content easily browsable.  Of particular interest are Erik&amp;#8217;s recommendations to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Replace the stock Plone events folder (which is a collection contained within a folder) with (just) a collection.&lt;/li&gt;
&lt;li&gt;Make clever use of keywords to support lots of events.&lt;/li&gt;
&lt;li&gt;Reorder subfolders in a collection &amp;#8220;the hard way&amp;#8221;. (Also interesting that he opened this ticket: &lt;a class=&quot;reference external&quot; href=&quot;https://dev.plone.org/plone/ticket/9109&quot;&gt;https://dev.plone.org/plone/ticket/9109&lt;/a&gt;and that it has received no &amp;#8220;love&amp;#8221; to date. Perhaps the new collections UI: &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/ticket/10902&quot;&gt;http://dev.plone.org/plone/ticket/10902&lt;/a&gt; will save the day!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-3&quot;&gt;
&lt;h2&gt;Chapter 3&lt;/h2&gt;
&lt;p&gt;Chapter 3 showcases the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.FacultyStaffDirectory&quot;&gt;Faculty/Staff Directory&lt;/a&gt; (FSD) add-on for Plone which allows you to create an online personnel directory. Of particular interest is Erik&amp;#8217;s explanation of how to categorize and correlate people within FSD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-4&quot;&gt;
&lt;h2&gt;Chapter 4&lt;/h2&gt;
&lt;p&gt;Chapter 4 covers customizing Faculty/Staff Directory. Of particular interest is Erik&amp;#8217;s coverage of &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/archetypes.schemaextender&quot;&gt;AT Schema Extender&lt;/a&gt;(which is a great way to customize Plone these days).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-5&quot;&gt;
&lt;h2&gt;Chapter 5&lt;/h2&gt;
&lt;p&gt;Chapter 5 covers blogs and forums. Of particular interest is Erik&amp;#8217;s coverage of &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.Scrawl&quot;&gt;Scrawl&lt;/a&gt;, and the need to exercise extreme caution when installing add-ons (always good advice).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-6&quot;&gt;
&lt;h2&gt;Chapter 6&lt;/h2&gt;
&lt;p&gt;Chapter 6 covers audio and video. Of particular interest is Erik&amp;#8217;s coverage of &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.flowplayer&quot;&gt;collective.flowplayer&lt;/a&gt; which makes &lt;a class=&quot;reference external&quot; href=&quot;http://flowplayer.org/&quot;&gt;Flowplayer&lt;/a&gt; easy to use in Plone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-7&quot;&gt;
&lt;h2&gt;Chapter 7&lt;/h2&gt;
&lt;p&gt;Chapter 7 covers forms. Of particular interest is Erik&amp;#8217;s comparison of &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.PloneFormGen&quot;&gt;PloneFormGen&lt;/a&gt; to Archetypes content objects, and his explanation of when to use one over the other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-8&quot;&gt;
&lt;h2&gt;Chapter 8&lt;/h2&gt;
&lt;p&gt;Chapter 8 covers theming. Of particular interest is Erik&amp;#8217;s coverage of &amp;#8220;new style&amp;#8221; template customizations via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/z3c.jbot&quot;&gt;z3c.jbot&lt;/a&gt; (which you &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website/blob/master/buildout.cfg#L24&quot;&gt;don&amp;#8217;t even need a package for!&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-9&quot;&gt;
&lt;h2&gt;Chapter 9&lt;/h2&gt;
&lt;p&gt;Chapter 9 covers deployment. Of particular interest is Erik&amp;#8217;s coverage of a typical production software stack that includes ZEO, Zope2, Apache and of course Plone. Also covered is CacheFu, which has been superseded by &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plone.app.caching&quot;&gt;plone.app.caching&lt;/a&gt; in Plone 4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-10&quot;&gt;
&lt;h2&gt;Chapter 10&lt;/h2&gt;
&lt;p&gt;Chapter 10 covers maintenance. Of particular interest is Erik&amp;#8217;s coverage of &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recipe.backup&quot;&gt;collective.recipe.backup&lt;/a&gt; to automate the creation of repozo scripts. I would add to that, you can use &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/z3c.recipe.usercrontab&quot;&gt;z3c.recipe.usercrontab&lt;/a&gt;to automate the creation and removal of cron jobs to execute those scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;All in all, I enjoyed reading this book. And, I appreciate whenever a member of the community shares his/her experiences. So thank you, Erik!&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it! I hope you will consider purchasing a copy of &lt;a class=&quot;reference external&quot; href=&quot;https://www.packtpub.com/plone-3-for-education/book&quot;&gt;Plone 3 for Education&lt;/a&gt; right now.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And if you enjoyed reading this review, please consider `helping me help Plone in February 2011.`_&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Alex Clark (January 2011)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">Help Alex Clark help Plone</title>
    <id>http://blog.aclark.net/2011/01/21/help-alex-clark-help-plone/</id>
    <updated>2011-01-21T00:00:00Z</updated>
    <published>2011-01-21T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/01/21/help-alex-clark-help-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;help-alex-clark-help-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;It&amp;#8217;s been a few years since I last attended a Plone sprint.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And that is by no means for lack of desire. I fantasize about spending a year attending every Plone (and Python) related event on the planet, but I&amp;#8217;ve got a ways to go before I can make that dream a reality.&lt;/p&gt;
&lt;p&gt;In the meantime, I&amp;#8217;m excited to announce that the stars have aligned in February 2011 and I am planning to attend the &lt;a class=&quot;reference external&quot; href=&quot;http://www.coactivate.org/projects/snow-sprint-west-2011/project-home&quot;&gt;Cioppino sprint&lt;/a&gt; AKA West Coast &amp;#8220;Snow&amp;#8221; Sprint (plane tickets purchased!)&lt;/p&gt;
&lt;p&gt;But, I really need everyone&amp;#8217;s help to make this trip a success. While I would love to be able to afford it, our financial stars have not aligned for February 2011 and I will be seeking donations in order to offset the cost of travel and lodging.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be spending (at least) two full days working on Plone-related tasks, for whatever you can guestimate that may be worth (in a consulting context.) And in addition to helping out however I can with the&lt;a class=&quot;reference external&quot; href=&quot;http://www.coactivate.org/projects/snow-sprint-west-2011/project-home&quot;&gt;scheduled tasks&lt;/a&gt;, I have a long list of admin tasks I would like to try and tackle:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://admin-docs.plone.org/todo.html&quot;&gt;http://admin-docs.plone.org/todo.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot; id=&quot;why-you-should-donate&quot;&gt;
&lt;h2&gt;Why you should donate&lt;/h2&gt;
&lt;p&gt;Time I donate to the Plone project is a labor of love, but there are &amp;#8220;real world&amp;#8221; implications. If you have enjoyed, or otherwise benefited from any of the following, I would appreciate your generous contribution right now; very, very much!&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;Plone.org website maintenance&lt;/strong&gt;: I spend a lot of time wrangling troops and performing feats of great maintenance on plone.org: &lt;a class=&quot;reference external&quot; href=&quot;http://svn.plone.org/svn/plone/plone.org/Products.PloneOrg/trunk/&quot;&gt;http://svn.plone.org/svn/plone/plone.org/Products.PloneOrg/trunk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone.org systems maintenance&lt;/strong&gt;: I consider myself a provider of great services for a great community. I&amp;#8217;ve made a very significant effort to try and improve the services that volunteers are able to provide for such a great community. In documentation, and in deed I plan to&amp;nbsp; keep doing this for at least all of 2011: &lt;a class=&quot;reference external&quot; href=&quot;http://admin-docs.plone.org&quot;&gt;http://admin-docs.plone.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone software technical support&lt;/strong&gt;: I spend a great deal of time trying to de-mystify Plone technology for the masses. Early adoption is part of this process. I like to see Plone moving forward and I like to see others embracing that move: &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/01/19/new-website-for-2011/&quot;&gt;http://blog.aclark.net/2011/01/19/new-website-for-2011/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And much, much more!&lt;/strong&gt; I try to do as much for Plone as I can because it does a lot for me. I&amp;#8217;ve &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/2008&quot;&gt;organized a conference&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://www.packtpub.com/plone-33-site-administration/book&quot;&gt;written a book&lt;/a&gt; and I expect to be active in the community for at least the rest of 2011, and most likely4life.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;how-much-should-you-donate&quot;&gt;
&lt;h2&gt;How much should you donate&lt;/h2&gt;
&lt;p&gt;I am trying to raise $1,000 USD to cover the following:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;Plane tickets&lt;/strong&gt;: approximately $400 USD.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Housing&lt;/strong&gt;: approximately $400 USD.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Food and miscellaneous travel expenses&lt;/strong&gt;: approximately $200 USD.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would appreciate any amount you can afford to give, to help-me-help-Plone be as great as it can be!&lt;/p&gt;
&lt;p&gt;Please use the Chip-in below, or if you prefer (for all you anti-flash-ites), you can donate directly via PayPal with my email address: &lt;strong&gt;aclark&amp;#64;aclark.net&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Thank you all, very much, in advance.&lt;/p&gt;
&lt;p&gt;Alex Clark (January 2011)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2011/atom.xml">
    <title type="text">New Website For 2011!</title>
    <id>http://blog.aclark.net/2011/01/19/new-website-for-2011/</id>
    <updated>2011-01-19T00:00:00Z</updated>
    <published>2011-01-19T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/01/19/new-website-for-2011/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-website-for-2011&quot;&gt;

&lt;p&gt;&lt;strong&gt;Edit: In addition to &amp;#8220;cool overlays&amp;#8221;, I added a couple Plone-core todo items (that I may like to PLIP/implement)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;purpose-driven&quot;&gt;
&lt;h2&gt;Purpose-driven&lt;/h2&gt;
&lt;p&gt;Since &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website/commit/514a46a652d9ffb393fd7f83a296306761c995b7&quot;&gt;December 23, 2010&lt;/a&gt;, a new website has been in development at ACLARK.NET, LLC. It took approximately one month to complete; and we are proud to present it to the world today! We are particularly proud that this website can serve a dual-purpose: to make us look good, and to serve as an example of how easy and fun it is to install and use Plone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;look-ma-no-package&quot;&gt;
&lt;h2&gt;Look ma, no package!&lt;/h2&gt;
&lt;p&gt;One of the requirements I had in developing a new website was that I would ditch my old Products.aclark_net package in favor of… nothing.  (Sort of.)&lt;/p&gt;
&lt;p&gt;What I mean is, the entire website was developed and deployed within a single, small buildout: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website&quot;&gt;https://github.com/aclark4life/aclark_net_website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The buildout is meant to be instructional (!) so if you have questions, please ask them in the comments.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
# Extends import buildout config files from elsewhere
extends =
#    http://dist.aclark.net/build/plone/4.1.x/buildout.cfg
    http://dist.aclark.net/build/plone/4.1.x/zeo.cfg
    http://good-py.appspot.com/release/collective.xdv/1.0# Parts define what this buildout does
parts += trac xdv staging production blog[plone]
# Eggs are Python packages
eggs +=
# &amp;quot;New style&amp;quot; theming in Plone
    collective.xdv
# &amp;quot;New style&amp;quot; template overrides
    z3c.jbot# Plone is a modern web application that uses the Zope Toolkit
# internally to provide complex functionality in a manageable way.
#
# The Zope Toolkit features the Zope component architecure; and
# components are configured via the Zope Configuration Markup Language (ZCML).
#
# Rather than create a Python package to do simple customizations, we add
# our ZCML here and the plone.recipe.zope2instance will add it to our
# Zope 2 instance configuration file(s) for us whenever we run bin/buildout.
zcml-additional =
# Add static resource dir
    &amp;lt;configure
        xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;
    &amp;gt;
    &amp;lt;browser:resourceDirectory
        name=&amp;quot;static&amp;quot;
        directory=&amp;quot;${buildout:directory}/static&amp;quot;
    /&amp;gt;
# Add custom templates dir
    &amp;lt;include
        package=&amp;quot;z3c.jbot&amp;quot;
        file=&amp;quot;meta.zcml&amp;quot;
    /&amp;gt;
    &amp;lt;browser:jbot
        directory=&amp;quot;${buildout:directory}/templates&amp;quot;
    /&amp;gt;
    &amp;lt;/configure&amp;gt;[blog]
# Compile the blog theme
recipe = plone.recipe.command
command =
    bin/xdvcompiler -r theme/rules/blog.xml -t theme/templates/blog.html -o theme/blog.xsl
update-command = ${:command}[trac]
# Compile the trac theme
recipe = plone.recipe.command
command =
    bin/xdvcompiler -r theme/rules/trac.xml -t theme/templates/trac.html -o theme/trac.xsl
update-command = ${:command}# This creates bin/xdvcompiler
[xdv]
recipe = zc.recipe.egg# Hostout makes Fabric integration easy
[staging]
recipe = collective.hostout
host = aclark.net
path = /srv/staging[production]
recipe = collective.hostout
host = aclark.net
path = /srv/aclark_net_website[versions]
plone.registry = 1.0b4
plone.app.registry = 1.0b5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;diazo&quot;&gt;
&lt;h2&gt;Diazo&lt;/h2&gt;
&lt;p&gt;For the first time ever, I decided to try deploying Diazo (formerly XDV) within Plone itself. That meant installing &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.xdv&quot;&gt;collective.xdv&lt;/a&gt; in Plone and pointing it to a rules.xml file. This only works for Plone, though.  Wordpress and Trac are still themed outside Plone, by compiling their themes with xdvcompiler and pointing Apache to the resulting .xsl files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;content&quot;&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;I am obsessive about content. I am also obsessive about simplicity. And in today&amp;#8217;s world of &lt;a class=&quot;reference external&quot; href=&quot;http://twitter.com/aclark4life&quot;&gt;need-it-now&lt;/a&gt;, I have become conditioned to &amp;#8220;do&amp;#8221; now and ask questions later (which is not always recommended, by the way). That meant that for this website, rather than migrate content (which in some cases was contained in custom fields added by Archetypes schema extender) I opted to setup a &amp;#8220;clean&amp;#8221; Plone and copy/paste/edit content.&lt;/p&gt;
&lt;p&gt;On a small site like ours, this was a no-brainer for me. But it definitely exposes a weakness of Plone. Now that theming has improved, we really need a better &amp;#8220;content story&amp;#8221;. To me, that is starting to mean focusing on satisfying a &amp;#8220;simple&amp;#8221; use case like exporting and importing content in Plone. There are folks &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.transmogrifier&quot;&gt;working on this&lt;/a&gt; of course, it just needs to advance to the point where we can offer it in the Plone core IMHO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;todo&quot;&gt;
&lt;h2&gt;Todo&lt;/h2&gt;
&lt;p&gt;Of course there is always more to do. The first thing that jumps out that is missing from this deployment is &amp;#8220;cool (Javascript) overlays&amp;#8221; or &amp;#8220;pop-ups,&amp;#8221; depending on who you ask. I didn&amp;#8217;t have time to add them prior to launch, but I will most likely add them later &lt;a class=&quot;reference external&quot; href=&quot;http://www.stevemcmahon.com/steves-blog/tools&quot;&gt;because I can&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A couple more Plone-core related features I would love to see implemented (technically, Diazo is not in the core yet):&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I want to add GenericSetup (GS) profiles outside Python packages (i.e. in the buildout via ZCML). Currently GenericSetup expects to be passed a context which is (I think) the old-style Zope 2 product object in the ZODB. But I can&amp;#8217;t think of a reason why GS couldn&amp;#8217;t be made to work sans that requirement (I&amp;#8217;m just speculating though, I haven&amp;#8217;t looked at the code yet).&lt;/li&gt;
&lt;li&gt;I wish Diazo (collective.xdv) could be configured via GenericSetup.  I&amp;#8217;d like to configure the path to the rules.xml file in something like profiles/default/diazo.xml such that when a Plone site is created and the Diazo import step is run, the path to the rules file is set automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This is certainly one of the most fun times I&amp;#8217;ve head developing a Plone website (which is nice when you are in the Plone website business). I attribute that directly to all of the awesome folks involved in the project. I can&amp;#8217;t list everyone here, but I will &amp;#8220;shout out&amp;#8221; to some of the folks who I think were instrumental in getting us here: Eric Steele &amp;amp; the entire Plone 4 framework team, for their work on Plone 4. Hanno Schlichting for making Plone fast again. Martin Aspeli and Laurence Rowe for Diazo. And David Glick, for being &amp;#8220;always on&amp;#8221; (and my own personal devil&amp;#8217;s advocate).&lt;/p&gt;
&lt;p&gt;And really, everyone involved in the Plone project on a day to day basis. Plone development and consulting can be frustrating at times, but more often than not it is a magical experience, due in no small part due to the seemingly never-ending supply of cool and dedicated folks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;a-look-back&quot;&gt;
&lt;h3&gt;A look back&lt;/h3&gt;
&lt;p&gt;Also, I&amp;#8217;ve been doing this long enough now that it&amp;#8217;s now very entertaining (to me at least) to look back at the various incarnations of the ACLARK.NET, LLC website over the years (these are guestimates):&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Circa 2006: Plone 2.5 with a Cereblue skin I purchased for $50&lt;/li&gt;
&lt;li&gt;Circa 2007: Plone 3.0 with a custom &amp;#8220;old style&amp;#8221; theme that I designed
(and I&amp;#8217;m not a designer).&lt;/li&gt;
&lt;li&gt;Circa 2008: Plone 3.3 with XDV (now Diazo) plus &amp;#8220;open source&amp;#8221; theme.&lt;/li&gt;
&lt;li&gt;Circa 2011: Plone 4 with collective.xdv, z3c.jbot, and &amp;#8220;open source&amp;#8221;
buildout and theme, and nothing else.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;to-the-future&quot;&gt;
&lt;h2&gt;To the future&lt;/h2&gt;
&lt;p&gt;Onwards Plone team! Here is to 2011.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
