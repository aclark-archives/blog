<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Alex Clark's Blog - Posts in Python</title>
  <id>http://blog.aclark.net/blog/category/python/atom.xml</id>
  <updated>2016-11-23T00:00:00Z</updated>
  <link href="http://blog.aclark.net" />
  <link href="http://blog.aclark.net/blog/category/python/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.8.3">ABlog</generator>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Project Makefile Open for Business</title>
    <id>http://blog.aclark.net/2016/11/23/project-makefile-open-business/</id>
    <updated>2016-11-23T00:00:00Z</updated>
    <published>2016-11-23T00:00:00Z</published>
    <link href="http://blog.aclark.net/2016/11/23/project-makefile-open-business/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;project-makefile-open-for-business&quot;&gt;

&lt;p&gt;&lt;strong&gt;Makefile for Python Web Development &amp;amp; Related Projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A while back I was asked to speak to the Configuration Management Working Group of DC:&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;https://twitter.com/CMWorkingGrp/status/773228143939293185&quot;&gt;&lt;img alt=&quot;../../../_images/project-makefile-tweet.png&quot; class=&quot;img-thumbnail&quot; src=&quot;../../../_images/project-makefile-tweet.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;From that moment on, it was on: an excuse to finish and talk about the &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Makefile&lt;/span&gt;&lt;/code&gt; I&amp;#8217;d been dragging around &lt;em&gt;formerly since January&lt;/em&gt; and informerly much longer.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;finishing-the-makefile&quot;&gt;
&lt;h2&gt;Finishing the Makefile&lt;/h2&gt;
&lt;p&gt;I started writing slides on the &lt;a class=&quot;reference external&quot; href=&quot;http://slides.com/aclark/project-makefile&quot;&gt;impressive slides.com&lt;/a&gt; then I realized I had to finished the Makefile to finish the slides. This mostly involved deciding on target names and testing target execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;finishing-the-slides&quot;&gt;
&lt;h2&gt;Finishing the Slides&lt;/h2&gt;
&lt;p&gt;As I mentioned above, slides.com is &lt;em&gt;very&lt;/em&gt; nice. I had hoped to be able to build the slides myself with reveal.js, but in lieu of JavaScript skills I settled on using the slides.com editor. Later I exported and converted them to PDF with pandoc, which was not as nice (through no fault of pandoc, I&amp;#8217;m sure; I just wish I could get a better PDF copy from the slides.com HTML export.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;closed-for-business&quot;&gt;
&lt;h2&gt;Closed for Business&lt;/h2&gt;
&lt;p&gt;For month after month as I continued to tweak, the project-makefile repository README contained the following:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;**DO NOT USE THIS**

At some point I started using a ``Makefile`` in my Python projects. This repository
contains that ``Makefile``.

**shrug**
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;open-for-business&quot;&gt;
&lt;h2&gt;Open for Business&lt;/h2&gt;
&lt;p&gt;Now it contains this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installation
------------

::

    curl -O https://raw.githubusercontent.com/aclark4life/project-makefile/master/Makefile


Usage
-----

::

    Usage: make [TARGET]
    Available targets:

        - ablog
        - ablog-build
        - ablog-clean
        - ablog-init
        - ablog-install
        - ablog-serve
        - co
        - commit
        - commit-auto
        - commit-edit
        - django
        - django-clean
        - django-clean-migrations
        - django-init
        - django-install
        - django-migrate
        - django-migrations
        - django-serve
        - django-shell
        - django-static
        - django-su
        - django-test
        - django-yapf
        - git-checkout-remotes
        - git-commit
        - git-commit-auto
        - git-commit-auto-push
        - git-commit-edit
        - git-push
        - grunt
        - grunt-file
        - grunt-init
        - grunt-install
        - grunt-serve
        - h
        - he
        - heroku
        - heroku-debug-off
        - heroku-debug-on
        - heroku-init
        - heroku-push
        - heroku-remote
        - heroku-shell
        - heroku-web-off
        - heroku-web-on
        - install
        - lint
        - npm
        - npm-init
        - npm-install
        - package
        - package-check-manifest
        - package-init
        - package-lint
        - package-pyroma
        - package-readme
        - package-release
        - package-release-test
        - package-test
        - pdf
        - plone
        - plone-heroku
        - plone-init
        - plone-install
        - plone-serve
        - push
        - python-clean
        - python-flake
        - python-freeze
        - python-install
        - python-lint
        - python-serve
        - python-virtualenv
        - python-wc
        - python-yapf
        - release
        - release-test
        - review
        - serve
        - sphinx
        - sphinx-build
        - sphinx-clean
        - sphinx-init
        - sphinx-install
        - sphinx-serve
        - test
        - vagrant
        - vagrant-clean
        - vagrant-down
        - vagrant-init
        - vagrant-up
        - vagrant-update
        - vm

- Check out the `slides &amp;lt;http://slides.com/aclark/project-makefile&amp;gt;`_ for more information.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now I invite everyone to use and contribute!&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/project-makefile&quot;&gt;https://github.com/aclark4life/project-makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Yup, this blog is now powered by ABlog</title>
    <id>http://blog.aclark.net/2016/04/03/yup-this-blog-is-now-powered-by-ablog/</id>
    <updated>2016-04-03T00:00:00Z</updated>
    <published>2016-04-03T00:00:00Z</published>
    <link href="http://blog.aclark.net/2016/04/03/yup-this-blog-is-now-powered-by-ablog/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;yup-this-blog-is-now-powered-by-ablog&quot;&gt;

&lt;p&gt;&lt;strong&gt;Blog functionality for Sphinx&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;../../../_images/ablog-for-sphinx.jpg&quot; class=&quot;img-thumbnail&quot; src=&quot;../../../_images/ablog-for-sphinx.jpg&quot; /&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After years of using Pelican for blogging and Sphinx for everything else, I became annoyed that Pelican&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://docs.getpelican.com/en/3.6.3/content.html#file-metadata&quot;&gt;File metadata format&lt;/a&gt; did not match Sphinx&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://www.sphinx-doc.org/en/stable/rest.html#directives&quot;&gt;directives&lt;/a&gt;. Around the same time, I noticed that &lt;a class=&quot;reference external&quot; href=&quot;http://ablog.readthedocs.org/&quot;&gt;ABlog&lt;/a&gt; had matured enough to be usable.&lt;/p&gt;
&lt;p&gt;So late last year I began converting all my Pelican metadata to Sphinx directives, and did quite a bit of clean up as well. I&amp;#8217;m finally finished, and now ready to present the results (&lt;strong&gt;ta-da&lt;/strong&gt;). Thank you Pelican for all the years of service, and thank you ABlog for helping me use Sphinx for blogging!&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/blog&quot;&gt;https://github.com/aclark4life/blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Updated Django Website</title>
    <id>http://blog.aclark.net/2016/02/21/updated-django-website/</id>
    <updated>2016-02-21T00:00:00Z</updated>
    <published>2016-02-21T00:00:00Z</published>
    <link href="http://blog.aclark.net/2016/02/21/updated-django-website/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;updated-django-website&quot;&gt;

&lt;p&gt;&lt;strong&gt;One year later&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;../../../_images/aclarknet-website.png&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/aclarknet-website.png&quot; /&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Last year I wrote about developing our company website with Django:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2015/01/11/new-django-website/index.html&quot;&gt;http://blog.aclark.net/2015/01/11/new-django-website/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This year, I updated the site and am again very happy with the results. Here&amp;#8217;s an overview of the interesting aspects.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;makefile&quot;&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve continued to develop Python projects using a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Makefile&lt;/span&gt;&lt;/code&gt;. So much so I&amp;#8217;m now attempting to genericize the approach here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/python-project&quot;&gt;https://github.com/aclark4life/python-project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;project-app&quot;&gt;
&lt;h2&gt;Project/App&lt;/h2&gt;
&lt;p&gt;Last year around this time I didn&amp;#8217;t fully understand what I was doing with &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;startproject&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;startapp&lt;/span&gt;&lt;/code&gt; (as evidenced by &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-django/tree/master/aclarknet/aclarknet/aclarknet&quot;&gt;this insanely nested package structure&lt;/a&gt;). Now I understand a little bit more, so I settled on a project called &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;aclarknet&lt;/span&gt;&lt;/code&gt; and an app called &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;website&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;rest-powered&quot;&gt;
&lt;h2&gt;REST-powered&lt;/h2&gt;
&lt;p&gt;I haven&amp;#8217;t written about it yet, but I spent a lot of time in December developing a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-database&quot;&gt;time tracking and invoicing application&lt;/a&gt; (more on that later). As such, I couldn&amp;#8217;t tolerate storing identical data in multiple locations. So &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-database/blob/master/aclarknet/database/serializers.py&quot;&gt;exposed the data I needed&lt;/a&gt; via Django Rest Framework &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-website/blob/master/aclarknet/website/views.py#L37&quot;&gt;then consumed it with requests&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-nice-features&quot;&gt;
&lt;h2&gt;Other nice features&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Django 1.9.2&lt;/li&gt;
&lt;li&gt;Bootstrap 3.3.6&lt;/li&gt;
&lt;li&gt;Logo created with Illustrator (IANAGA, but it was &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-logo&quot;&gt;fun to try&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy the &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;site&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-website&quot;&gt;code&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/contact&quot;&gt;hire my business&lt;/a&gt; in 2016!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow 3-0-0 is Out</title>
    <id>http://blog.aclark.net/2015/10/03/pillow-3-0-0-is-out/</id>
    <updated>2015-10-03T00:00:00Z</updated>
    <published>2015-10-03T00:00:00Z</published>
    <link href="http://blog.aclark.net/2015/10/03/pillow-3-0-0-is-out/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-3-0-0-is-out&quot;&gt;

&lt;p&gt;&lt;strong&gt;Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/graphs/contributors&quot;&gt;Pillow Team&lt;/a&gt;  is excited to announce the release of Pillow 3.0.0. While &amp;#8220;3 is just a number after 2&amp;#8221;, there are some &lt;strong&gt;significant changes in this release all users should be aware of&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pillow.readthedocs.org/en/3.0.x/releasenotes/3.0.0.html#libjpeg-and-zlib-are-required-by-default&quot;&gt;LibJpeg and Zlib are Required by Default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pillow.readthedocs.org/en/3.0.x/releasenotes/3.0.0.html#deprecated-methods&quot;&gt;Deprecated Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m particularly happy to see libjpeg &amp;amp; zlib required; this will avoid many-a-broken-installation in the future. &lt;strong&gt;PIL is of little practical value when installed without JPEG support&lt;/strong&gt;, yet this has been the default for over 20 years. No more! Thanks to wiredfool for &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/issues/1412&quot;&gt;spearheading this change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more goodness, please see the release notes &amp;amp; changelog:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pillow.readthedocs.org/en/3.0.x/releasenotes/3.0.0.html&quot;&gt;http://pillow.readthedocs.org/en/3.0.x/releasenotes/3.0.0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/blob/3.0.x/CHANGES.rst#300-2015-10-01&quot;&gt;https://github.com/python-pillow/Pillow/blob/3.0.x/CHANGES.rst#300-2015-10-01&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, we&amp;#8217;re approaching 10 million downloads:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity -q pillow
Pillow has been downloaded 9,906,841 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;An exciting milestone!&lt;/p&gt;
&lt;p&gt;Thanks to all the developers &amp;amp; users of PIL &amp;amp; Pillow. Enjoy the 3.0.0 release, and as always &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/issues&quot;&gt;report&amp;#8217;em if you got&amp;#8217;em and we&amp;#8217;ll fix&amp;#8217;em&lt;/a&gt;.&lt;/p&gt;
&lt;a href=&quot;https://gratipay.com/pillow/&quot;&gt;
  &lt;img alt=&quot;Support via Gratipay&quot; src=&quot;https://cdn.rawgit.com/gratipay/gratipay-badge/2.3.0/dist/gratipay.png&quot;/&gt;
&lt;/a&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow 2-9-0 Is Almost Out</title>
    <id>http://blog.aclark.net/2015/06/28/pillow-2-9-0-is-almost-out/</id>
    <updated>2015-06-28T00:00:00Z</updated>
    <published>2015-06-28T00:00:00Z</published>
    <link href="http://blog.aclark.net/2015/06/28/pillow-2-9-0-is-almost-out/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-2-9-0-is-almost-out&quot;&gt;

&lt;p&gt;&lt;strong&gt;Pillow 2.9.0 will be released on July 1, 2015.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;pre-release&quot;&gt;
&lt;h2&gt;Pre-release&lt;/h2&gt;
&lt;p&gt;Please help the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/graphs/contributors&quot;&gt;Pillow Fighters&lt;/a&gt;  prepare for the Pillow &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;2.9.0&lt;/span&gt;&lt;/code&gt; release by downloading and testing this pre-release:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/archive/2.9.0.dev2.zip&quot;&gt;https://github.com/python-pillow/Pillow/archive/2.9.0.dev2.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;report-issues&quot;&gt;
&lt;h2&gt;Report issues&lt;/h2&gt;
&lt;p&gt;As you might expect, we&amp;#8217;d like to avoid the creation of a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;2.9.1&lt;/span&gt;&lt;/code&gt; release within 24-48 hours of &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;2.9.0&lt;/span&gt;&lt;/code&gt; due to any unforeseen circumstances. If you suspect such an issue to exist in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;2.9.0.dev2&lt;/span&gt;&lt;/code&gt;, please let us know:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/issues&quot;&gt;https://github.com/python-pillow/Pillow/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow 2015 Report</title>
    <id>http://blog.aclark.net/2015/06/05/pillow-2015-report/</id>
    <updated>2015-06-05T00:00:00Z</updated>
    <published>2015-06-05T00:00:00Z</published>
    <link href="http://blog.aclark.net/2015/06/05/pillow-2015-report/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-2015-report&quot;&gt;

&lt;img alt=&quot;Most interesting man&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/pillow-2015-report.png&quot; /&gt;
&lt;p&gt;&lt;strong&gt;Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-state-of-the-pillow&quot;&gt;
&lt;h2&gt;The state of the Pillow&lt;/h2&gt;
&lt;p&gt;Pillow Fighter #2 Eric Soroos had some time constraints recently so I managed the Pillow 2.8 release. While preparing the release I also reviewed and updated the entire project, including:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Issues&lt;/li&gt;
&lt;li&gt;Pull Requests&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;July of 2015 will mark Pillow&amp;#8217;s 5th anniversary and as of 2015, PIL is 20 years old. In early 2015, the state of the Pillow is good. Here are some statistics:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Over &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/vanity&quot;&gt;5.5 million PyPI downloads&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;About &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/Pillow/2.8.1#downloads&quot;&gt;36 distributions&lt;/a&gt; uploaded with each release, including Windows Eggs/Exes/Wheels, OS X Wheels and source distributions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 core contributors AKA Pillow Fighters, including the recently added Alexander Karpinsky (AKA &amp;#8216;homm&amp;#8217;).&lt;/li&gt;
&lt;li&gt;Over &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/graphs/contributors&quot;&gt;130 total contributors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;66 open issues (431 closed).&lt;/li&gt;
&lt;li&gt;12 open pull requests (672 closed).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;issues&quot;&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;p&gt;All issues were pruned, including:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Applying labels and milestones&lt;/li&gt;
&lt;li&gt;Changing state when appropriate&lt;/li&gt;
&lt;li&gt;Asking for status updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this time, most if not all issues have at least one label e.g. &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/labels/Bug&quot;&gt;&amp;#8220;bug&amp;#8221;&lt;/a&gt; and many have milestones configured e.g. &amp;#8220;2.9.0&amp;#8221;. The most meaningful milestones designate either &amp;#8220;this release&amp;#8221; or &amp;#8220;next release&amp;#8221; or &amp;#8220;future&amp;#8221;. The most meaningful labels designate &amp;#8220;needs code review or tests&amp;#8221; or &amp;#8220;bug or enhancement&amp;#8221; or &amp;#8220;question&amp;#8221;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;pull-requests&quot;&gt;
&lt;h2&gt;Pull Requests&lt;/h2&gt;
&lt;p&gt;All mergable pull requests were merged just prior to the 2.8.0 release. Of the remaining open pull requests, most &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/labels/Needs%20Code%20Review&quot;&gt;need code review&lt;/a&gt; and the rest are experimental or in progress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;documentation&quot;&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Pillow&amp;#8217;s documentation is now sizeable, a large part of which was forked from the PIL handbook and some of which is created automatically by Sphinx. The remainder is new and was the focus of recent updates &lt;a class=&quot;footnote-reference&quot; href=&quot;#id4&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;, &lt;a class=&quot;footnote-reference&quot; href=&quot;#id5&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;, &lt;a class=&quot;footnote-reference&quot; href=&quot;#id6&quot; id=&quot;id3&quot;&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/blob/master/README.rst&quot;&gt;https://github.com/python-pillow/Pillow/blob/master/README.rst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/blob/master/CONTRIBUTING.md&quot;&gt;https://github.com/python-pillow/Pillow/blob/master/CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/blob/master/RELEASING.md&quot;&gt;https://github.com/python-pillow/Pillow/blob/master/RELEASING.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pillow.readthedocs.org/installation.html&quot;&gt;http://pillow.readthedocs.org/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;website&quot;&gt;
&lt;h2&gt;Website&lt;/h2&gt;
&lt;p&gt;Finally, the website received some much needed attention. We&amp;#8217;re currently using a theme provided by GitHub Pages, and minimal effort is invested to maintain it, but we may be &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/issues/1180&quot;&gt;interested in building a new one&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id4&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/pull/1175&quot;&gt;https://github.com/python-pillow/Pillow/pull/1175&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id5&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/pull/1179&quot;&gt;https://github.com/python-pillow/Pillow/pull/1179&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id6&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id3&quot;&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/pull/1181&quot;&gt;https://github.com/python-pillow/Pillow/pull/1181&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;script data-gratipay-username=&quot;aclark4life&quot; src=&quot;//grtp.co/v1.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">New Django Website</title>
    <id>http://blog.aclark.net/2015/01/11/new-django-website/</id>
    <updated>2015-01-11T00:00:00Z</updated>
    <published>2015-01-11T00:00:00Z</published>
    <link href="http://blog.aclark.net/2015/01/11/new-django-website/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-django-website&quot;&gt;

&lt;p&gt;&lt;strong&gt;After a series of Django gigs in 2014, I had the urge to redevelop our company website in Django; I am very happy with the results.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This overview is roughly in order of development from start to finish. And since I am a &amp;#8220;packaging guy&amp;#8221;, I will take this opportunity to comment on miscellaneous packaging issues too*.&lt;/p&gt;
&lt;img alt=&quot;Website front page&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/aclarknet-django.png&quot; /&gt;
&lt;div class=&quot;section&quot; id=&quot;same-theme-different-backend&quot;&gt;
&lt;h2&gt;Same theme, different backend&lt;/h2&gt;
&lt;p&gt;The Pyramid version of aclark.net was almost two years old and needed an overhaul. Django appeared attractive because:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I know Django, but I don&amp;#8217;t know enough Django. Like with Pyramid and Plone before, I learned a lot of Django while developing this site over the last few weeks.&lt;/li&gt;
&lt;li&gt;There was no &amp;#8220;content&amp;#8221; with the previous (Pyramid) site. The idea of putting my &amp;#8220;content&amp;#8221; in Django models was appealing to me.&lt;/li&gt;
&lt;li&gt;The new &lt;a class=&quot;reference external&quot; href=&quot;https://djangoproject.com&quot;&gt;Django project&lt;/a&gt; website is awesome! An awesome website makes me want to build another awesome website with an awesome web framework. Awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;i-hate-code-generators&quot;&gt;
&lt;h2&gt;I hate code generators&lt;/h2&gt;
&lt;p&gt;I typically hate using code generators, full stop. But somehow Django&amp;#8217;s &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;startproject&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;startapp&lt;/span&gt;&lt;/code&gt; don&amp;#8217;t make me want to vomit. So I used them in an organic &lt;a class=&quot;footnote-reference&quot; href=&quot;#id7&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; way, to make some &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-django/tree/master/aclarknet/aclarknet/aclarknet&quot;&gt;obnoxiously long package names&lt;/a&gt;, and I &lt;em&gt;miraculously&lt;/em&gt; don&amp;#8217;t hate the results! This can only mean:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I am more tolerant of boilerplate code when learning a new framework, and/or:&lt;/li&gt;
&lt;li&gt;The process of creating the boilerplate code and the resulting boilerplate are so elegant/minimalistic that my insatiable desire for elegance/minimalism is at least partially satisified.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;no-postgres-no-problem&quot;&gt;
&lt;h2&gt;No Postgres? No problem&lt;/h2&gt;
&lt;p&gt;The idea of having to develop locally with Postgresql (or some other &amp;#8220;real&amp;#8221; database) feels &amp;#8220;heavy&amp;#8221; to me. With sqlite, I don&amp;#8217;t have to worry about database setup until I&amp;#8217;m ready to worry about database setup &lt;a class=&quot;footnote-reference&quot; href=&quot;#id8&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I even pushed to Heroku with the sqlite database checked in, until I was ready to deploy Postgres. And I still use sqlite locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bootstrap-all-the-things&quot;&gt;
&lt;h2&gt;Bootstrap all the things&lt;/h2&gt;
&lt;p&gt;Sure Bootstrap is ubiquitious now, but it remains attractive nonetheless. One of the first tasks I performed was add &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django-admin-bootstrapped&lt;/span&gt;&lt;/code&gt; to my &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;INSTALLED_APPS&lt;/span&gt;&lt;/code&gt; &lt;a class=&quot;footnote-reference&quot; href=&quot;#id9&quot; id=&quot;id3&quot;&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And because it&amp;#8217;s 2015, I Bower-installed Bootstrap and Fontawesome for my theme development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;make-like-a-tree-and-file&quot;&gt;
&lt;h2&gt;Make like a tree and file&lt;/h2&gt;
&lt;p&gt;Lately I&amp;#8217;ve gotten into the habit of using good-ol&amp;#8217; Make to automate various tasks &lt;a class=&quot;footnote-reference&quot; href=&quot;#id10&quot; id=&quot;id4&quot;&gt;[4]&lt;/a&gt;. This project was no exception:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dump:
    curl -o latest.dump `heroku pgbackups:url`
push:
    git push
    git push heroku master
sync:
    heroku run python aclarknet/manage.py syncdb
publish:
    git commit -a -m &amp;quot;Update&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;add-ons-apps-eggs-distributions-packages-products-wheels&quot;&gt;
&lt;h2&gt;Add-ons, Apps, Eggs, Distributions, Packages, Products, Wheels&lt;/h2&gt;
&lt;p&gt;I am &lt;em&gt;literally&lt;/em&gt; annoyed by the &lt;em&gt;figurative&lt;/em&gt; abomination that is Python packaging terminology. The proliferation of terms is understandable though because of the many layers of &lt;em&gt;technology&lt;/em&gt;, each with its own &lt;em&gt;terminology&lt;/em&gt;, that may or may not overlap:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The Python language&lt;/li&gt;
&lt;li&gt;Various packaging frameworks&lt;/li&gt;
&lt;li&gt;Software written in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And all of that was just so I could tell you I pip-installed the following:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Django
Pillow
django-admin-bootstrapped
django-cumulus
dj-database-url
dj-static
gunicorn
psycopg2
-e aclarknet
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;buildout-conda-easy-install-pip&quot;&gt;
&lt;h2&gt;Buildout, Conda, easy_install, pip&lt;/h2&gt;
&lt;p&gt;On a related subject, why do I have a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-django/blob/master/aclarknet/setup.py&quot;&gt;setup.py&lt;/a&gt;? I get the feeling that Django projects in the wild sometimes have one and sometimes don&amp;#8217;t. And the Django documentation &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/search/?q=setup+py&amp;amp;release=11&quot;&gt;has only a few mentions of setup.py&lt;/a&gt;. So why do I have one?&lt;/p&gt;
&lt;p&gt;In short, because I want my code in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;sys.path&lt;/span&gt;&lt;/code&gt;. I have another feeling that when Django projects/apps/etc don&amp;#8217;t have setup.py files, they are somehow manipulating sys.path manually to include themselves. There is &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/search/?q=sys+path&amp;amp;release=11&quot;&gt;slightly more mentioning of sys.path&lt;/a&gt; in Django&amp;#8217;s documentation, at least.&lt;/p&gt;
&lt;p&gt;Anyway, I use setup.py because I&amp;#8217;m familiar with setuptools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;contact-form&quot;&gt;
&lt;h2&gt;Contact Form&lt;/h2&gt;
&lt;p&gt;Enough packaging rants, back to the rest of the Django story.&lt;/p&gt;
&lt;p&gt;Every business website needs a contact form, right? And contact forms are tedious and boring to create, right? Yes and yes. That&amp;#8217;s why I thought using &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django-contact-form&lt;/span&gt;&lt;/code&gt; would be a good idea. Unfortunately I ran into an issue I couldn&amp;#8217;t easily work around, so I gave up and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-django/blob/master/aclarknet/aclarknet/aclarknet/views.py#L32&quot;&gt;made my own&lt;/a&gt; &lt;a class=&quot;footnote-reference&quot; href=&quot;#id11&quot; id=&quot;id5&quot;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;orm-i-really-on-my-own&quot;&gt;
&lt;h2&gt;ORM I really on my own?&lt;/h2&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;https://twitter.com/aclark4life/status/552626214008274944&quot;&gt;&lt;img alt=&quot;Tweet&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/aclark-tweet.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;That&amp;#8217;s right. After adding an &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ImageField&lt;/span&gt;&lt;/code&gt; I expected the image to be stored in the database and not the file system, and I&amp;#8217;m not ashamed. Since that was not the case, I ended up using &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django-cumulus&lt;/span&gt;&lt;/code&gt; &lt;a class=&quot;footnote-reference&quot; href=&quot;#id12&quot; id=&quot;id6&quot;&gt;[6]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;overall&quot;&gt;
&lt;h2&gt;Overall&lt;/h2&gt;
&lt;p&gt;Overall, this was a great experience. As such, I&amp;#8217;m now considering another &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt; reboot with Django; to further exercise my Django chops and fullfill the packaging-automation-vision I&amp;#8217;ve had since late 2011.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please let me know your reaction to my experiences in the comments.&lt;/em&gt;&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id7&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django-admin&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;startproject&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;aclarknet;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;aclarknet/aclarknet;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;django-admin&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;startapp&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;aclarknet&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id8&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Granted, the perceived heaviness is much worse than the &lt;em&gt;actual&lt;/em&gt; burden of &amp;#8220;real&amp;#8221; database setup which is admittedly fairly trivial: &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;postgres&lt;/span&gt;&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id9&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id3&quot;&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The Django admin without Bootstrap reminds me of the ZMI without Bootstrap, which &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/zope2_bootstrap&quot;&gt;I also don&amp;#8217;t like&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id10&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id4&quot;&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Embarrassingly, I create the tabs with &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;s/&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span class=&quot;pre&quot;&gt;/\t/&lt;/span&gt;&lt;/code&gt; because my tabstop is set to 4 spaces. Maybe I should be change my tabstop setting each time?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id11&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id5&quot;&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Something to do with Sendgrid integration, certainly not django-contact-form&amp;#8217;s fault!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id12&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id6&quot;&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Which is another story. First I tried &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django-storages&lt;/span&gt;&lt;/code&gt; only to discover Rackspace Cloud Files support moved to cumulus (or started in cumulus and moved back?) Then &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django-cumulus&lt;/span&gt;&lt;/code&gt; &lt;em&gt;almost&lt;/em&gt; worked but not quite. Rackspace Cloud Files returned a URL but upload failed. So I manually uploaded all the files to Rackspace Cloud Files as a workaround.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow Runs Itself</title>
    <id>http://blog.aclark.net/2014/10/02/pillow-runs-itself/</id>
    <updated>2014-10-02T00:00:00Z</updated>
    <published>2014-10-02T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/10/02/pillow-runs-itself/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-runs-itself&quot;&gt;

&lt;p&gt;&lt;strong&gt;As of Pillow 2.6.0, the Pillow project almost completely runs itself!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Of course when I say &amp;#8220;runs itself&amp;#8221; I mean &amp;#8220;runs without me&amp;#8221;, which is what &lt;strong&gt;every open source project lead hopes for&lt;/strong&gt;. For the first time ever, I was able to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Turn off GitHub Watching until two weeks before the release.&lt;/li&gt;
&lt;li&gt;Not run &lt;cite&gt;setup.py upload&lt;/cite&gt; or &lt;cite&gt;twine upload&lt;/cite&gt; myself.&lt;/li&gt;
&lt;li&gt;Watch in awe as Pillow Men #s 2 &amp;amp; 3 did all the work. [1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kudos to these gentlemen for making my life easier and for continuing to provide the Python community with a featureful, modern &amp;amp; secure Python Imaging Library. Additionally &lt;strong&gt;thanks to all the contributors from all over the world&lt;/strong&gt; who continue to develop and improve Pillow. I used to keep a list, but now there are &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/graphs/contributors&quot;&gt;too many to keep track of&lt;/a&gt;. Oh and lastly, &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/wiredfool/status/517382632267841536&quot;&gt;2.6.0 is out&lt;/a&gt;! Enjoy the release &amp;amp; please &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/issues&quot;&gt;report issues here&lt;/a&gt;.&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id1&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;[1]&lt;/td&gt;&lt;td&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/wiredfool&quot;&gt;Eric Soroos&lt;/a&gt; &amp;amp; &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/hugovk&quot;&gt;Hugo&lt;/a&gt; respectively. Additional thanks to Christoph Gohlke for &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/Pillow/2.6.0#downloads&quot;&gt;Windows Eggs, Exes, Wheels&lt;/a&gt;, Matthew Brett for &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/issues/766&quot;&gt;OS X Wheels&lt;/a&gt;, and Steve Johnson for &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-pillow/Pillow/issues/769&quot;&gt;Sphinx Documentation&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;P.S. New theme! Thanks &lt;a class=&quot;reference external&quot; href=&quot;http://purepelican.com/&quot;&gt;Pure Pelican Theme&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow 2-5-0 is Out</title>
    <id>http://blog.aclark.net/2014/07/05/pillow-2-5-0-is-out/</id>
    <updated>2014-07-05T00:00:00Z</updated>
    <published>2014-07-05T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/07/05/pillow-2-5-0-is-out/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-2-5-0-is-out&quot;&gt;

&lt;p&gt;&lt;strong&gt;Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since Pillow 2.0 the Pillow Team has adopted a quarterly release cycle; as such, Pillow 2.5.0 is out! Here&amp;#8217;s what&amp;#8217;s new in this release:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id1&quot;&gt;
&lt;h2&gt;2.5.0 (2014-07-01)&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Imagedraw rewrite
[terseus, wiredfool]&lt;/li&gt;
&lt;li&gt;Add support for multithreaded test execution
[wiredfool]&lt;/li&gt;
&lt;li&gt;Prevent shell injection #748
[mbrown1413, wiredfool]&lt;/li&gt;
&lt;li&gt;Support for Resolution in BMP files #734
[gcq]&lt;/li&gt;
&lt;li&gt;Fix error in setup.py for Python 3
[matthew-brett]&lt;/li&gt;
&lt;li&gt;Pyroma fix and add Python 3.4 to setup metadata #742
[wirefool]&lt;/li&gt;
&lt;li&gt;Top level flake8 fixes #741
[aclark]&lt;/li&gt;
&lt;li&gt;Remove obsolete Animated Raster Graphics (ARG) support
[hugovk]&lt;/li&gt;
&lt;li&gt;Fix test_imagedraw failures #727
[cgohlke]&lt;/li&gt;
&lt;li&gt;Fix AttributeError: class Image has no attribute &amp;#8216;DEBUG&amp;#8217; #726
[cgohlke]&lt;/li&gt;
&lt;li&gt;Fix msvc warning: &amp;#8216;inline&amp;#8217; : macro redefinition #725
[cgohlke]&lt;/li&gt;
&lt;li&gt;Cleanup #654
[dvska, hugovk, wiredfool]&lt;/li&gt;
&lt;li&gt;16-bit monochrome support for JPEG2000
[videan42]&lt;/li&gt;
&lt;li&gt;Fixed ImagePalette.save
[brightpisces]&lt;/li&gt;
&lt;li&gt;Support JPEG qtables
[csinchok]&lt;/li&gt;
&lt;li&gt;Add binary morphology addon
[dov, wiredfool]&lt;/li&gt;
&lt;li&gt;Decompression bomb protection
[hugovk]&lt;/li&gt;
&lt;li&gt;Put images in a single directory
[hugovk]&lt;/li&gt;
&lt;li&gt;Support OpenJpeg 2.1
[al45tair]&lt;/li&gt;
&lt;li&gt;Remove unistd.h #include for all platforms
[wiredfool]&lt;/li&gt;
&lt;li&gt;Use unittest for tests
[hugovk]&lt;/li&gt;
&lt;li&gt;ImageCms fixes
[hugovk]&lt;/li&gt;
&lt;li&gt;Added more ImageDraw tests
[hugovk]&lt;/li&gt;
&lt;li&gt;Added tests for Spider files
[hugovk]&lt;/li&gt;
&lt;li&gt;Use libtiff to write any compressed tiff files
[wiredfool]&lt;/li&gt;
&lt;li&gt;Support for pickling Image objects
[hugovk]&lt;/li&gt;
&lt;li&gt;Fixed resolution handling for EPS thumbnails
[eliempje]&lt;/li&gt;
&lt;li&gt;Fixed rendering of some binary EPS files (Issue #302)
[eliempje]&lt;/li&gt;
&lt;li&gt;Rename variables not to use built-in function names
[hugovk]&lt;/li&gt;
&lt;li&gt;Ignore junk JPEG markers
[hugovk]&lt;/li&gt;
&lt;li&gt;Change default interpolation for Image.thumbnail to Image.ANTIALIAS
[hugovk]&lt;/li&gt;
&lt;li&gt;Add tests and fixes for saving PDFs
[hugovk]&lt;/li&gt;
&lt;li&gt;Remove transparency resource after P-&amp;gt;RGBA conversion
[hugovk]&lt;/li&gt;
&lt;li&gt;Clean up preprocessor cruft for Windows
[CounterPillow]&lt;/li&gt;
&lt;li&gt;Adjust Homebrew freetype detection logic
[jacknagel]&lt;/li&gt;
&lt;li&gt;Added Image.close, context manager support.
[wiredfool]&lt;/li&gt;
&lt;li&gt;Added support for 16 bit PGM files.
[wiredfool]&lt;/li&gt;
&lt;li&gt;Updated OleFileIO to version 0.30 from upstream
[hugovk]&lt;/li&gt;
&lt;li&gt;Added support for additional TIFF floating point format
[Hijackal]&lt;/li&gt;
&lt;li&gt;Have the tempfile use a suffix with a dot
[wiredfool]&lt;/li&gt;
&lt;li&gt;Fix variable name used for transparency manipulations
[nijel]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;acknowledgements&quot;&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;With every release, there are notable contributions I must acknowledge:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Thanks to Stephen Johnson for contributing &lt;a class=&quot;reference external&quot; href=&quot;http://pillow.readthedocs.org&quot;&gt;http://pillow.readthedocs.org&lt;/a&gt;, we continue to rely on &amp;amp; extend this resource.&lt;/li&gt;
&lt;li&gt;Thanks to Christopher Gohlke for producing Windows Egg, Exe, and Wheel distributions.&lt;/li&gt;
&lt;li&gt;Thanks to Matthew Brett for producing OS X Wheels (for the first time ever!)&lt;/li&gt;
&lt;li&gt;Thanks to Eric Soroos for his contributions and serving as &amp;#8220;Pillow Man #2&amp;#8221; (2nd in command).&lt;/li&gt;
&lt;li&gt;Welcome to Hugo VK who has joined the Pillow Team &amp;amp; contributed significantly to this release.&lt;/li&gt;
&lt;li&gt;Thanks to all the remaining unnamed contributors! We appreciate every commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy Pillow 2.5.0 &amp;amp; please report issues here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues&quot;&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Matplotlib Plotting Cookbook Review</title>
    <id>http://blog.aclark.net/2014/05/19/matplotlib-plotting-cookbook-review/</id>
    <updated>2014-05-19T00:00:00Z</updated>
    <published>2014-05-19T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/05/19/matplotlib-plotting-cookbook-review/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;matplotlib-plotting-cookbook-review&quot;&gt;

&lt;p&gt;&lt;strong&gt;Here is my review&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was given a copy of &lt;a class=&quot;reference external&quot; href=&quot;http://www.packtpub.com/matplotlib-plotting-cookbook/book&quot;&gt;Matplotlib Plotting Cookbook by Alexandre Devert&lt;/a&gt; and asked to review it. Thanks PACKT! Here is my review.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;preface&quot;&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;But first, I&amp;#8217;ll mention I&amp;#8217;ve worked on two projects recently that involved rendering matplotlib graphs directly to the browser i.e. via content-type: image/png. This is fun! It&amp;#8217;s particularly enjoyable when you are trying to avoid performing the task &amp;#8220;the right way&amp;#8221;, which is arguably outputting JSON to some JavaScript graphing library e.g. &lt;a class=&quot;reference external&quot; href=&quot;http://www.highcharts.com/&quot;&gt;Highcharts&lt;/a&gt;. The dependencies are heavy i.e. pip install numpy, etc. but not &lt;em&gt;that&lt;/em&gt; heavy and once they are installed, &lt;strong&gt;your web application can output graphs rivaling those produced by JavaScript, all written in Python&lt;/strong&gt; &lt;a class=&quot;footnote-reference&quot; href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. Highly recommended!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-1&quot;&gt;
&lt;h2&gt;Chapter 1&lt;/h2&gt;
&lt;p&gt;I think the code examples in Chapter 1 alone are worth the price of admission. Here is a video of me walking through the Chapter 1 code examples:&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/YOFHkszsdR8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;You&amp;#8217;ll notice the typical fare here: bar, line and pie graphs along with some more complex boxplot, histogram, horizontal bar, scatter and triangle graphs, all in various colors. For reference, here are the excerpted commands called to produce these graphs:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/aclark4life/0f9e61f2d62a67c31346.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-2&quot;&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;p&gt;Chapter 2 is all about customization e.g. via matplotlibrc. Here is a video of me walking through the Chapter 2 code examples:&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/BzGv1soDaRU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;For reference, here is the sample matplotlibrc included with the matplotlib distribution (lib/python2.7/site-packages/matplotlib/mpl-data/matplotlibrc):&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/aclark4life/71c1edf815bd61aae8a9.js&quot;&gt;&lt;/script&gt;&lt;p&gt;As you can see, there are a lot of knobs you can turn here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-3&quot;&gt;
&lt;h2&gt;Chapter 3&lt;/h2&gt;
&lt;p&gt;Chapter 3 is all about &amp;#8220;annotations&amp;#8221;. Here is a video of me walking through the Chapter 3 code examples:&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/994vecwODaI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&amp;#8220;Annotations&amp;#8221; includes related topics such as adding shapes and controlling tick spacing and labeling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-4&quot;&gt;
&lt;h2&gt;Chapter 4&lt;/h2&gt;
&lt;p&gt;Chapter 4 is all about &amp;#8220;working with figures&amp;#8221;. Here is a video of me walking through the Chapter 4 code examples:&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Q6PFBSxkOc4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&amp;#8220;Working with figures&amp;#8221; includes obvious topics like &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;subplot&lt;/span&gt;&lt;/code&gt; and less obvious topics like setting the aspect ratio.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-5&quot;&gt;
&lt;h2&gt;Chapter 5&lt;/h2&gt;
&lt;p&gt;Chapter 5 is all about &amp;#8220;working with file output&amp;#8221;. For reference, here are some of the images produced by the examples in this chapter (I wrote &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;jpg&lt;/span&gt;&lt;/code&gt; files instead of &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;png&lt;/span&gt;&lt;/code&gt; files due to a problem with my libpng: &lt;a class=&quot;reference external&quot; href=&quot;https://www.google.com/#q=RuntimeError%3A+Could+not+create+write+struct&amp;amp;safe=off&quot;&gt;RuntimeError: Could not create write struct&lt;/a&gt;.)&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;http://blog.aclark.net/images/sinc1.jpg&quot; /&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;http://blog.aclark.net/images/sinc3.jpg&quot; /&gt;
&lt;p&gt;Also covered in this chapter is &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/images/sinc.pdf&quot;&gt;pdf output&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-6&quot;&gt;
&lt;h2&gt;Chapter 6&lt;/h2&gt;
&lt;p&gt;Chapter 6 is all about &amp;#8220;working with maps&amp;#8221;.&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/gKnR7IfNSsI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;This chapter also introduces the &lt;a class=&quot;reference external&quot; href=&quot;http://matplotlib.org/1.3.1/users/image_tutorial.html&quot;&gt;imshow command&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-7&quot;&gt;
&lt;h2&gt;Chapter 7&lt;/h2&gt;
&lt;p&gt;Chapter 7 is all about &amp;#8220;working with 3D figures&amp;#8221;.&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/7YFGHG62L5U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;For reference, here are the excerpted commands called to produce these graphs:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/aclark4life/6f7f3fd18ec4c7795028.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-8&quot;&gt;
&lt;h2&gt;Chapter 8&lt;/h2&gt;
&lt;p&gt;Chapter 8 is all about working with the &amp;#8220;user interface&amp;#8221; interactively.&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/k6984I_YGo4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Additionally, all of the popular graphical windowing environments are discussed: Tkinter, wxWidgets, GTK, Pyglet (three out of four of which I was able to install; GTK 2 vs GTK 3 &lt;a class=&quot;reference external&quot; href=&quot;https://www.google.com/#q=from+gi.repository+import+Gtk&amp;amp;safe=off&quot;&gt;confused me and I ran out of time debugging it&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall I enjoyed this book and would &lt;a class=&quot;reference external&quot; href=&quot;http://www.packtpub.com/matplotlib-plotting-cookbook/book&quot;&gt;recommend buying it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;You should probably&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;hire me&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://twitter.com/aclark4life&quot;&gt;follow me on Twitter&lt;/a&gt; &lt;em&gt;or both&lt;/em&gt;. &lt;em&gt;And speaking of PACKT, you should definitely&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/05/10/top-10-reasons-plone-33-site-admin-book-is-still-for-you/&quot;&gt;buy my book too&lt;/a&gt;.)&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id2&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes, I&amp;#8217;m familiar with &lt;a class=&quot;reference external&quot; href=&quot;http://bokeh.pydata.org/&quot;&gt;Bokeh&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Bro, do you even Pillow?</title>
    <id>http://blog.aclark.net/2014/04/07/bro-do-you-even-pillow/</id>
    <updated>2014-04-07T00:00:00Z</updated>
    <published>2014-04-07T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/04/07/bro-do-you-even-pillow/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;bro-do-you-even-pillow&quot;&gt;

&lt;img alt=&quot;Bro, do you even Pillow?&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/bro-do-you-even-pillow.jpg&quot; /&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pillow is a fork of the Python Imaging Library. Here is an update on the status of the project.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;released&quot;&gt;
&lt;h2&gt;2.4.0 released&lt;/h2&gt;
&lt;p&gt;Pillow 2.4.0 is out! Here are the highlights:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Indexed Transparency handled for conversions between L, RGB, and P modes. Fixes #510 [wiredfool]&lt;/li&gt;
&lt;li&gt;Conversions enabled from RGBA-&amp;gt;P, Fixes #544 [wiredfool]&lt;/li&gt;
&lt;li&gt;Improved icns support [al45tair]&lt;/li&gt;
&lt;li&gt;Fix libtiff leaking open files, fixes #580 [wiredfool]&lt;/li&gt;
&lt;li&gt;Fixes for Jpeg encoding in Python 3, fixes #577 [wiredfool]&lt;/li&gt;
&lt;li&gt;Added support for JPEG 2000 [al45tair]&lt;/li&gt;
&lt;li&gt;Add more detailed error messages to Image.py [larsmans]&lt;/li&gt;
&lt;li&gt;Avoid conflicting _expand functions in PIL &amp;amp; MINGW, fixes #538 [aclark]&lt;/li&gt;
&lt;li&gt;Merge from Philippe Lagadec’s OleFileIO_PL fork [vadmium]&lt;/li&gt;
&lt;li&gt;Fix ImageColor.getcolor [homm]&lt;/li&gt;
&lt;li&gt;Make ICO files work with the ImageFile.Parser interface, fixes #522 [wiredfool]&lt;/li&gt;
&lt;li&gt;Handle 32bit compiled python on 64bit architecture [choppsv1]&lt;/li&gt;
&lt;li&gt;Fix support for characters &amp;gt;128 using .pcf or .pil fonts in Py3k. Fixes #505 [wiredfool]&lt;/li&gt;
&lt;li&gt;Skip CFFI test earlier if it&amp;#8217;s not installed [wiredfool]&lt;/li&gt;
&lt;li&gt;Fixed opening and saving odd sized .pcx files, fixes #523 [wiredfool]&lt;/li&gt;
&lt;li&gt;Fixed palette handling when converting from mode P-&amp;gt;RGB-&amp;gt;P [d_schmidt]&lt;/li&gt;
&lt;li&gt;Fixed saving mode P image as a PNG with transparency = palette color 0 [d-schmidt]&lt;/li&gt;
&lt;li&gt;Improve heuristic used when saving progressive and optimized JPEGs with high quality values [e98cuenc]&lt;/li&gt;
&lt;li&gt;Fixed DOS with invalid palette size or invalid image size in BMP file [wiredfool]&lt;/li&gt;
&lt;li&gt;Added support for BMP version 4 and 5 [eddwardo, wiredfool]&lt;/li&gt;
&lt;li&gt;Fix segfault in getfont when passed a memory resident font [wiredfool]&lt;/li&gt;
&lt;li&gt;Fix crash on Saving a PNG when icc-profile is None [brutasse]&lt;/li&gt;
&lt;li&gt;Cffi+Python implementation of the PixelAccess object [wiredfool]&lt;/li&gt;
&lt;li&gt;PixelAccess returns unsigned ints for I16 mode [wiredfool]&lt;/li&gt;
&lt;li&gt;Minor patch on booleans + Travis [sciunto]&lt;/li&gt;
&lt;li&gt;Look in multiarch paths in GNU platforms [pinotree]&lt;/li&gt;
&lt;li&gt;Add arch support for pcc64, s390, s390x, armv7l, aarch64 [manisandro]&lt;/li&gt;
&lt;li&gt;Add arch support for ppc [wiredfool]&lt;/li&gt;
&lt;li&gt;Correctly quote file names for WindowsViewer command [cgohlke]&lt;/li&gt;
&lt;li&gt;Prefer homebrew freetype over X11 freetype (but still allow both) [dmckeone]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;os-x-10-9-2-issues&quot;&gt;
&lt;h2&gt;OS X 10.9.2 issues&lt;/h2&gt;
&lt;p&gt;This happened:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/527&quot;&gt;https://github.com/python-imaging/Pillow/issues/527&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;security-issues&quot;&gt;
&lt;h2&gt;Security issues&lt;/h2&gt;
&lt;p&gt;This happened:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/pull/548&quot;&gt;https://github.com/python-imaging/Pillow/pull/548&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;logo&quot;&gt;
&lt;h2&gt;Logo&lt;/h2&gt;
&lt;p&gt;Pillow has a logo thanks to Alastair Houghton:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/575&quot;&gt;https://github.com/python-imaging/Pillow/issues/575&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep using and supporting Pillow!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Virtualenv Support Update</title>
    <id>http://blog.aclark.net/2014/03/19/virtualenv-support-update/</id>
    <updated>2014-03-19T00:00:00Z</updated>
    <published>2014-03-19T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/03/19/virtualenv-support-update/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;virtualenv-support-update&quot;&gt;

&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/virtualenv-support-update.jpg&quot; /&gt;
&lt;p&gt;&lt;strong&gt;This is you: I use virtualenv all the time and I love it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is you: &amp;#8220;I use virtualenv all the time and I love it! But I hate having to manually upgrade setuptools within my virtualenvs because the &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/setuptools#changes&quot;&gt;PyPA has been so prolific with setuptools releases lately&lt;/a&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Actually this is me, but it may be you too. If this is you, you may be familiar with the following process. If not, you may want to be.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;virtualenv-and-setuptools&quot;&gt;
&lt;h2&gt;Virtualenv and setuptools&lt;/h2&gt;
&lt;p&gt;When a virtualenv is created, virtualenv installs setuptools from a local distribution located in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;site-packages/virtualenv_support&lt;/span&gt;&lt;/code&gt;. If that setuptools is out of date, so is the setuptools in your new virtualenv. To avoid having to manually upgrade setuptools within newly created virtualenvs, you can do this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cd /usr/local/lib/python2.7/site-packages/virtualenv_support
$ curl -O https://pypi.python.org/packages/source/s/setuptools/setuptools-3.3.zip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Et voila!&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv .
New python executable in ./bin/python2.7
Also creating executable in ./bin/python
Installing setuptools, pip...done.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/pip show setuptools
---
Name: setuptools
Version: 3.3
Location: /private/var/folders/1k/fmmlqcfn5jsbcqrqsw3q_slm0000gn/T/tmpE4vB1l/lib/python2.7/site-packages
Requires:
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are a Buildout user, this should save you &lt;strong&gt;endless frustration with Buildout attempting to upgrade Setuptools…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;attempting to upgrade Setuptools…&lt;/p&gt;
&lt;p&gt;attempting to upgrade Setuptools…&lt;/p&gt;
&lt;p&gt;attempting to upgrade Setuptools…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow 2-3-0 is Out</title>
    <id>http://blog.aclark.net/2014/01/01/pillow-2-3-0-is-out/</id>
    <updated>2014-01-01T00:00:00Z</updated>
    <published>2014-01-01T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/01/01/pillow-2-3-0-is-out/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-2-3-0-is-out&quot;&gt;

&lt;p&gt;&lt;strong&gt;Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since Pillow 2.0, the Pillow Team has adopted a quarterly release cycle; as such, Pillow 2.3.0 has just been released. Here&amp;#8217;s what&amp;#8217;s new in this release:&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/one-does-not-simply-make-a-release.jpg&quot; /&gt;
&lt;div class=&quot;section&quot; id=&quot;id1&quot;&gt;
&lt;h2&gt;2.3.0 (2014-01-01)&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Stop leaking filename parameter passed to getfont
[jpharvey]&lt;/li&gt;
&lt;li&gt;Report availability of LIBTIFF during setup and selftest
[cgohlke]&lt;/li&gt;
&lt;li&gt;Fix msvc build error C1189: &amp;#8220;No Target Architecture&amp;#8221;
[cgohlke]&lt;/li&gt;
&lt;li&gt;Fix memory leak in font_getsize
[wiredfool]&lt;/li&gt;
&lt;li&gt;Correctly prioritize include and library paths
[ohanar]&lt;/li&gt;
&lt;li&gt;Image.point fixes for numpy.array and docs
[wiredfool]&lt;/li&gt;
&lt;li&gt;Save the transparency header by default for PNGs
[wiredfool]&lt;/li&gt;
&lt;li&gt;Support for PNG tRNS header when converting from RGB-&amp;gt;RGBA
[wiredfool]&lt;/li&gt;
&lt;li&gt;PyQT5 Support
[wiredfool]&lt;/li&gt;
&lt;li&gt;Updates for saving color tiffs w/compression using libtiff
[wiredfool]&lt;/li&gt;
&lt;li&gt;2gigapix image fixes and redux
[wiredfool]&lt;/li&gt;
&lt;li&gt;Save arbitrary tags in Tiff image files
[wiredfool]&lt;/li&gt;
&lt;li&gt;Quote filenames and title before using on command line
[tmccombs]&lt;/li&gt;
&lt;li&gt;Fixed Viewer.show to return properly
[tmccombs]&lt;/li&gt;
&lt;li&gt;Documentation fixes
[wiredfool]&lt;/li&gt;
&lt;li&gt;Fixed memory leak saving images as webp when webpmux is available
[cezarsa]&lt;/li&gt;
&lt;li&gt;Fix compiling with FreeType 2.5.1
[stromnov]&lt;/li&gt;
&lt;li&gt;Adds directories for NetBSD.
[deepy]&lt;/li&gt;
&lt;li&gt;Support RGBA TIFF with missing ExtraSamples tag
[cgohlke]&lt;/li&gt;
&lt;li&gt;Lossless WEBP Support
[wiredfool]&lt;/li&gt;
&lt;li&gt;Take compression as an option in the save call for tiffs
[wiredfool]&lt;/li&gt;
&lt;li&gt;Add support for saving lossless WebP. Just pass &amp;#8216;lossless=True&amp;#8217; to save()
[liftoff]&lt;/li&gt;
&lt;li&gt;LCMS support upgraded from version 1 to version 2, fixes #343
[wiredfool]&lt;/li&gt;
&lt;li&gt;Added more raw decoder 16 bit pixel formats
[svanheulen]&lt;/li&gt;
&lt;li&gt;Document remaining Image* modules listed in PIL handbook
[irksep]&lt;/li&gt;
&lt;li&gt;Document ImageEnhance, ImageFile, ImageFilter, ImageFont, ImageGrab, ImageMath, and ImageOps
[irksep]&lt;/li&gt;
&lt;li&gt;Port and update docs for Image, ImageChops, ImageColor, and ImageDraw
[irksep]&lt;/li&gt;
&lt;li&gt;Move or copy content from README.rst to docs/
[irksep]&lt;/li&gt;
&lt;li&gt;Respect CFLAGS/LDFLAGS when searching for headers/libs
[iElectric]&lt;/li&gt;
&lt;li&gt;Port PIL Handbook tutorial and appendices
[irksep]&lt;/li&gt;
&lt;li&gt;Alpha Premultiplication support for transform and resize
[wiredfool]&lt;/li&gt;
&lt;li&gt;Fixes to make Pypy 2.1.0 work on Ubuntu 12.04/64
[wiredfool]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to everyone who contributed fixes to 2.3.0, especially Eric Soroos AKA &amp;#8220;wiredfool&amp;#8221; who is officially now &amp;#8220;Pillow Man #2&amp;#8221; &lt;a class=&quot;footnote-reference&quot; href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;handbook&quot;&gt;
&lt;h2&gt;Handbook&lt;/h2&gt;
&lt;p&gt;Additionally, we&amp;#8217;ve forked the PIL handbook and have included it with our documentation here: &lt;a class=&quot;reference external&quot; href=&quot;http://pillow.readthedocs.org&quot;&gt;http://pillow.readthedocs.org&lt;/a&gt;. Special thanks to Stephen Johnson AKA &amp;#8220;irksep&amp;#8221; for working on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;distributions&quot;&gt;
&lt;h2&gt;Distributions&lt;/h2&gt;
&lt;p&gt;Lastly, I&amp;#8217;m very grateful to Christopher Gohlke for producing Windows Egg, Exe, and Wheel distributions to accompany each source release. I suspect Christopher will produce his 2.3.0 distributions any second now at which point I will upload them to PyPI via &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/twine&quot;&gt;twine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy Pillow 2.3.0! And please report any issues you find here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues&quot;&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id3&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In case I&amp;#8217;m hit by a bus, Eric Soroos has the keys.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">New Year's Python Meme 2014</title>
    <id>http://blog.aclark.net/2013/12/30/new-years-python-meme-2014/</id>
    <updated>2013-12-30T00:00:00Z</updated>
    <published>2013-12-30T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/12/30/new-years-python-meme-2014/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-year-s-python-meme-2014&quot;&gt;

&lt;p&gt;&lt;strong&gt;Tarek Ziadé&amp;#8217;s New Year&amp;#8217;s Python Meme&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;whats-the-coolest-python-application-framework-or-library-you-discovered-this-year&quot;&gt;
&lt;h2&gt;What’s the coolest Python application, framework or library you discovered this year?&lt;/h2&gt;
&lt;p&gt;This year we have a tie between two must-have packaging-related utilities:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/check-manifest&quot;&gt;check-manifest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/pyroma&quot;&gt;pyroma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these utilities help you make better Python packages, and I regularly use them in my packages via a Makefile like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test:
    check-manifest
    flake8 *.py
    pyroma
    python setup.py sdist
    python setup.py test
    viewdoc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Good times! And better packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-new-programming-technique-did-you-learn-this-year&quot;&gt;
&lt;h2&gt;What new programming technique did you learn this year?&lt;/h2&gt;
&lt;p&gt;I didn&amp;#8217;t program much in 2013 but when I did, I tried to write tests too. Check out the following projects to see how I did:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/plock&quot;&gt;Plock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/pythonpackages/pythonpackages&quot;&gt;PythonPackages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;which-open-source-project-did-you-contribute-to-the-most-this-year-what-did-you-do&quot;&gt;
&lt;h2&gt;Which open source project did you contribute to the most this year? What did you do?&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow&quot;&gt;Pillow&lt;/a&gt;. Fork author and project lead. Aside from a working PIL, the most exciting thing about Pillow for me is my &lt;a class=&quot;reference external&quot; href=&quot;https://www.gittip.com/aclark4life/&quot;&gt;Gittip funding&lt;/a&gt; and working with the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging?tab=members&quot;&gt;Pillow Team&lt;/a&gt; which includes most notably Eric Soroos and Christopher Gohlke.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;which-python-blogs-websites-or-mailing-lists-did-you-read-the-most-this-year&quot;&gt;
&lt;h2&gt;Which Python blogs, websites, or mailing lists did you read the most this year?&lt;/h2&gt;
&lt;p&gt;This year I cut back to reading &lt;em&gt;only&lt;/em&gt; the following feeds, consumed via Feedly:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://planet.plone.org&quot;&gt;Planet Plone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://planet.python.org&quot;&gt;Planet Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dir.gmane.org/gmane.comp.web.zope.plone.devel&quot;&gt;gmane.comp.web.zope.plone.devel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dir.gmane.org/gmane.comp.web.zope.plone.user&quot;&gt;gmane.comp.web.zope.plone.user&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-are-the-top-three-things-you-want-to-learn-next-year&quot;&gt;
&lt;h2&gt;What are the top three things you want to learn next year?&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/javascript_goodparts&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/javascript_goodparts&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/javascript_goodparts&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-the-top-software-application-or-library-you-wish-someone-would-write-next-year&quot;&gt;
&lt;h2&gt;What is the top software, application or library you wish someone would write next year?&lt;/h2&gt;
&lt;p&gt;I wish there was some &amp;#8220;Python to JavaScript bridge software&amp;#8221;. It&amp;#8217;s not the complexities of JavaScript that keep me from learning it, it&amp;#8217;s that I don&amp;#8217;t have any reason to obsess over it. Plone gave me that opportunity with Python, but not JavaScript (yet). Once that happens, I&amp;#8217;m sure I&amp;#8217;ll be as proficient in JavaScript as I am currently in Python (which is enough to get by).&lt;/p&gt;
&lt;p&gt;Want to participate? Copy/paste/answer the questions below then tweet your entry with the #2014pythonmeme hash tag:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;New Year&amp;#39;s Python Meme
======================

What’s the coolest Python application, framework or library you discovered this year?
----------------------------------------------------------------------------------------
What new programming technique did you learn this year?
----------------------------------------------------------------------------------------
Which open source project did you contribute to the most this year? What did you do?
----------------------------------------------------------------------------------------
Which Python blogs, websites, or mailing lists did you read the most this year?
----------------------------------------------------------------------------------------
What are the top three things you want to learn next year?
----------------------------------------------------------------------------------------
What is the top software, application or library you wish someone would write next year?
----------------------------------------------------------------------------------------
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Python Packages Open Sourced</title>
    <id>http://blog.aclark.net/2013/10/13/python-packages-open-sourced/</id>
    <updated>2013-10-13T00:00:00Z</updated>
    <published>2013-10-13T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/10/13/python-packages-open-sourced/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;python-packages-open-sourced&quot;&gt;

&lt;p&gt;&lt;strong&gt;Today I am open sourcing the code that ran pythonpackages.com from late 2011 to late 2012.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can find it here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/pythonpackages/vanity_app&quot;&gt;https://github.com/pythonpackages/vanity_app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot; id=&quot;why-i-waited&quot;&gt;
&lt;h2&gt;Why I Waited&lt;/h2&gt;
&lt;p&gt;I waited a long time before doing this because:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;It&amp;#8217;s embarrassing. I originally wanted to have pythonpackages.com rewritten with some tests before doing this. But that never happened.&lt;/li&gt;
&lt;li&gt;Some of it was private. The original repository had things like the database checked in to it which had users&amp;#8217; names in it. There were also various and sundry account credentials and API keys that needed to be removed. It took some time and motivation to get all that done.&lt;/li&gt;
&lt;li&gt;I needed historical perspective which does not occur without the passage of time. The packaging landscape has totally changed for the better since I last worked on pythonpackages.com, and I&amp;#8217;m now ready to put the past behind me and focus on the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;why-now&quot;&gt;
&lt;h2&gt;Why Now&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I managed to find some time thanks to the U.S. Government &amp;lt;cough&amp;gt; (Speaking of that: this would be a great time to hire me for any tasks you need done. Email: &lt;a class=&quot;reference external&quot; href=&quot;mailto:aclark&amp;#37;&amp;#52;&amp;#48;aclark&amp;#46;net&quot;&gt;aclark&lt;span&gt;&amp;#64;&lt;/span&gt;aclark&lt;span&gt;&amp;#46;&lt;/span&gt;net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Folks have been asking about it. I originally planned to re-launch by Q2 2013, but that nevered happened. I&amp;#8217;m now planning to have something working by the end of the year and I&amp;#8217;m actively working on the site again as of right now.&lt;/li&gt;
&lt;li&gt;I know what to focus on. The original pythonpackages.com tried to do way too much, but the most useful thing it did was automate the release of packages from GitHub to PyPI through a GitHub service: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/github/github-services/blob/master/lib/services/pythonpackages.rb&quot;&gt;https://github.com/github/github-services/blob/master/lib/services/pythonpackages.rb&lt;/a&gt;. I&amp;#8217;m going to focus on getting that working again without all the spaghetti code wrapped around it. I believe a lot of useful services can be built around this feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;enjoy&quot;&gt;
&lt;h2&gt;Enjoy&lt;/h2&gt;
&lt;p&gt;I hope you enjoy reading the source and if you end up using it for something please drop me a line: &lt;a class=&quot;reference external&quot; href=&quot;mailto:aclark&amp;#37;&amp;#52;&amp;#48;aclark&amp;#46;net&quot;&gt;aclark&lt;span&gt;&amp;#64;&lt;/span&gt;aclark&lt;span&gt;&amp;#46;&lt;/span&gt;net&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow 2.2.1 Released</title>
    <id>http://blog.aclark.net/2013/10/03/pillow-2.2.1-released/</id>
    <updated>2013-10-03T00:00:00Z</updated>
    <published>2013-10-03T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/10/03/pillow-2.2.1-released/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-2-2-1-released&quot;&gt;

&lt;p&gt;&lt;strong&gt;Pillow is the &amp;#8220;friendly&amp;#8221; PIL fork. PIL is the Python Imaging Library.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;An earlier version of this entry was published yesterday with the wrong date. Apologies for any annoyance or confusion.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Pillow 2.2.1 source distribution is &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/Pillow/2.2.1&quot;&gt;now available on PyPI&lt;/a&gt;, featuring over 30 documented bug fixes and enhancements since 2.1.0 was released 3 months ago.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;changelog&quot;&gt;
&lt;h2&gt;Changelog&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/254&quot;&gt;#254&lt;/a&gt;: Bug in image transformations resulting from uninitialized memory [nikmolnar]&lt;/li&gt;
&lt;li&gt;Fix for encoding of b_whitespace, similar to closed issue &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/272&quot;&gt;#272&lt;/a&gt; [mhogg]&lt;/li&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/273&quot;&gt;#273&lt;/a&gt;: Add numpy array interface support for 16 and 32 bit integer modes [cgohlke]&lt;/li&gt;
&lt;li&gt;Partial fix for &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/290&quot;&gt;#290&lt;/a&gt;: Add preliminary support for TIFF tags. [wiredfool]&lt;/li&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/251&quot;&gt;#251&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/326&quot;&gt;#326&lt;/a&gt;: circumvent classification of pngtest_bad.png as malware [cgohlke]&lt;/li&gt;
&lt;li&gt;Add typedef uint64_t for MSVC. [cgohlke]&lt;/li&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/329&quot;&gt;#329&lt;/a&gt;: setup.py: better support for C_INCLUDE_PATH, LD_RUN_PATH, etc. [nu774]&lt;/li&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/328&quot;&gt;#328&lt;/a&gt;: _imagingcms.c: include windef.h to fix build issue on MSVC [nu774]&lt;/li&gt;
&lt;li&gt;Automatically discover homebrew include/ and lib/ paths on OSX [donspaulding]&lt;/li&gt;
&lt;li&gt;Fix bytes which should be bytearray [manisandro]&lt;/li&gt;
&lt;li&gt;Add respective paths for C_INCLUDE_PATH, LD_RUN_PATH (rpath) to build if specified as environment variables. [seanupton]&lt;/li&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/312&quot;&gt;#312&lt;/a&gt; + gif optimize improvement [d-schmidt]&lt;/li&gt;
&lt;li&gt;Be more tolerant of tag read failures [ericbuehl]&lt;/li&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/318&quot;&gt;#318&lt;/a&gt;: Catch truncated zTXt errors. [vytisb]&lt;/li&gt;
&lt;li&gt;Fix IOError when saving progressive JPEGs. [e98cuenc]&lt;/li&gt;
&lt;li&gt;Add RGBA support to ImageColor [yoavweiss]&lt;/li&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/304&quot;&gt;#304&lt;/a&gt;: test for str, not &amp;#8220;utf-8&amp;#8221;. [mjpieters]&lt;/li&gt;
&lt;li&gt;Fix missing import os in _util.py. [mnowotka]&lt;/li&gt;
&lt;li&gt;Added missing exif tags. [freyes]&lt;/li&gt;
&lt;li&gt;Fail on all import errors, fixes &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/298&quot;&gt;#298&lt;/a&gt;. [macfreek, wiredfool]&lt;/li&gt;
&lt;li&gt;Fixed Windows fallback (wasn&amp;#8217;t using correct file in Windows fonts). [lmollea]&lt;/li&gt;
&lt;li&gt;Moved ImageFile and ImageFileIO comments to docstrings. [freyes]&lt;/li&gt;
&lt;li&gt;Restore compatibility with ISO C. [cgohlke]&lt;/li&gt;
&lt;li&gt;Use correct format character for C int type. [cgohlke]&lt;/li&gt;
&lt;li&gt;Allocate enough memory to hold pointers in encode.c. [cgohlke]&lt;/li&gt;
&lt;li&gt;Fix &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/279&quot;&gt;#279&lt;/a&gt;, fillorder double shuffling bug when FillOrder ==2 and decoding using libtiff. [wiredfool]&lt;/li&gt;
&lt;li&gt;Moved Image module comments to docstrings. [freyes]&lt;/li&gt;
&lt;li&gt;Add 16-bit TIFF support, fixes &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/274&quot;&gt;#274&lt;/a&gt;. [wiredfool]&lt;/li&gt;
&lt;li&gt;Ignore high ascii characters in string.whitespace, fixes &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/272&quot;&gt;#272&lt;/a&gt;. [wiredfool]&lt;/li&gt;
&lt;li&gt;Added clean/build to tox to make it behave like travis. [freyes]&lt;/li&gt;
&lt;li&gt;Adding support for metadata in webp images. [heynemann]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;distributions&quot;&gt;
&lt;h2&gt;Distributions&lt;/h2&gt;
&lt;p&gt;In addition to the &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi?name=Pillow&amp;amp;version=2.2.1&amp;amp;:action=files&quot;&gt;source distribution&lt;/a&gt;, there are also Python Eggs and Windows Installers available (for 32 and 64 bit) and for the first time ever: Python Wheels! (New built-package format supported by pip.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;support&quot;&gt;
&lt;h2&gt;Support&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging?tab=members&quot;&gt;The Pillow Team&lt;/a&gt; has really settled in to the groove of making Pillow releases every three months, and I am very proud to be a part it! Special thanks to Eric Soroos and Christopher Gohlke for their invaluable help with Pillow 2.2.1.&lt;/p&gt;
&lt;p&gt;If you use Pillow professionally, please consider &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow#financial&quot;&gt;supporting its development&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow 2-1-0 is Out</title>
    <id>http://blog.aclark.net/2013/07/02/pillow-2-1-0-is-out/</id>
    <updated>2013-07-02T00:00:00Z</updated>
    <published>2013-07-02T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/07/02/pillow-2-1-0-is-out/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-2-1-0-is-out&quot;&gt;

&lt;p&gt;&lt;strong&gt;Pillow is a popular fork of PIL by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/pillow-2.1.0.png&quot; style=&quot;width: 75%;&quot; /&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/Pillow/2.1.0&quot;&gt;Pillow 2.1.0 is out!&lt;/a&gt; With this release, the Pillow team has &lt;em&gt;finally&lt;/em&gt; removed support for &amp;#8220;import _imaging&amp;#8221;, thus completing the move of PIL modules into the PIL namespace &lt;a class=&quot;footnote-reference&quot; href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;. Many thanks to Eric Soroos (AKA wiredfool) who completed the majority of this work. Also a big thanks to Christopher Gohlke and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/Arfrever&quot;&gt;Arfrever&lt;/a&gt; both of whom rallied around a push to get the 2.1.0 release out on schedule. And I want to thank everyone else who reported an issue and/or sent a pull request to help make this release the best it could be.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;quarterly-release-cycle&quot;&gt;
&lt;h2&gt;Quarterly release cycle&lt;/h2&gt;
&lt;p&gt;After the March 15, 2013 release of Pillow 2.0.0 we decided to adopt a quarterly release cycle. So every three months, as long as the patches keep coming you will see a new Pillow release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;look-ma-no-official-funding&quot;&gt;
&lt;h2&gt;Look ma no official funding&lt;/h2&gt;
&lt;p&gt;Pillow 2.0.0 was an enormous effort, made possible by a generous grant from the Python Software Foundation. But things have stablized quite a bit since then. So much so, that with help from many others I was able to squeeze this release into my normal schedule. However you are always welcome to financially help support Pillow, especially if you are using it in a commercial environment. Committers are encouraged to add their name here if they&amp;#8217;d like to receive donations:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/blob/master/README.rst#support&quot;&gt;https://github.com/python-imaging/Pillow/blob/master/README.rst#support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I have personally steered my gittip profile entirely towards Pillow production.&lt;/p&gt;
&lt;script data-gittip-username=&quot;aclark4life&quot;
src=&quot;https://www.gittip.com/assets/widgets/0002.js&quot;&gt;
&lt;/script&gt;&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;go-get-it-now&quot;&gt;
&lt;h2&gt;Go get it now&lt;/h2&gt;
&lt;p&gt;Pillow 2.1.0 source and binaries are available on PyPI. Please use, enjoy, and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues?state=open&quot;&gt;report issues&lt;/a&gt;.&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id3&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Which began with the first release of Pillow 1.0 on 2010-07-31 in which support for &amp;#8220;import Image&amp;#8221; was removed.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">New Pyramid Site</title>
    <id>http://blog.aclark.net/2013/04/22/new-pyramid-site/</id>
    <updated>2013-04-22T00:00:00Z</updated>
    <published>2013-04-22T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/04/22/new-pyramid-site/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-pyramid-site&quot;&gt;

&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/aclarknet/master/screenshot.png&quot; style=&quot;width: 98%;&quot; /&gt;
&lt;p&gt;&lt;strong&gt;For the first time in 10 years, http://aclark.net is not powered by Plone.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nothing against Plone: it&amp;#8217;s still one of the greatest loves of my life (inasmuch as you can love a software and community, as I do).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;why&quot;&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;This was not the result of a revolutionary plan, rather more of an evolution. It happened like this:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;As soon as Plone 4.3a1 was released (a year ago?) I deployed a new Plone site to aclark.net with it, featuring a &lt;strong&gt;Diazo&lt;/strong&gt; (new Plone theming engine) theme.&lt;/li&gt;
&lt;li&gt;Around the same time I became obsessed with deploying to Heroku, and also gained an interest in &lt;strong&gt;Python 3&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A few months ago, I got tired of paying $11/month to host my Plone site so I converted the site to &lt;strong&gt;static HTML&lt;/strong&gt; and moved it to &lt;strong&gt;GitHub pages&lt;/strong&gt;. But the result was flawed because maintenance involved editing duplicate copies of the website content (e.g. both clients.html and clients/foo.html contained the same text describing &amp;#8220;foo&amp;#8221;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So when it came time to do more than a few casual edits, I knew I had to find a new approach. That&amp;#8217;s when various elements of the Universe conspired to lead me in a new direction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;how&quot;&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;pyramid&quot;&gt;
&lt;h3&gt;Pyramid&lt;/h3&gt;
&lt;p&gt;I spent a lot of time (~ 1 year) developing &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt; in Pyramid, but the result was a mess (code-wise). I&amp;#8217;m in the process of rewriting and open sourcing it, but it&amp;#8217;s slow going. So what better way to get started than to do a small-ish site in Pyramid for fun?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;about-me&quot;&gt;
&lt;h3&gt;about.me&lt;/h3&gt;
&lt;p&gt;I also recently gave in and created an &lt;a class=&quot;reference external&quot; href=&quot;http://about.me/alex.clark&quot;&gt;about.me site&lt;/a&gt;. I was impressed by their content editing features, and my ability to create a page that looked OK using them.&lt;/p&gt;
&lt;p&gt;In my about.me profile, I used a picture of me and a picture of DC I took in early 2012. When it came time to redo aclark.net I felt like I really wanted to capture the simplicity of the about.me site, so I used the same photo in the background.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bootstrap&quot;&gt;
&lt;h3&gt;Bootstrap&lt;/h3&gt;
&lt;p&gt;Bootstrap is old news at this point, but I really enjoy using it and I particularly like that they have added more example templates. So I combined my background photo with one of &lt;a class=&quot;reference external&quot; href=&quot;http://twitter.github.io/bootstrap/getting-started.html#examples&quot;&gt;their example templates&lt;/a&gt; and a new site idea was born. As I&amp;#8217;m not a particularly talented visual artist, my ability to produce something that looked OK (with code this time) was exciting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what&quot;&gt;
&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;Until I added a contact form, the site was entirely unremarkable. There are views and routes and templates, typical fare for a web framework. Here is the entire &amp;#8220;main routine&amp;#8221;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyramid.session&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnencryptedCookieSessionFactoryConfig&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyramid.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configurator&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.redir&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.redir&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog_entry&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.redir&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog_slash&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;deform_bootstrap&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Oppan wsgi style! Configure and return WSGI application.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_session_factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnencryptedCookieSessionFactoryConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;itsaseekreet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configurator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_session_factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/blog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blog_entry&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/blog/{entry:.*}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blog_slash&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/blog/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;contact&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/contact&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;clients&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/clients&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;projects&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/projects&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;services&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/services&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;team&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/team&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;testimonials&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/testimonials&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_static_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;aclarknet:static&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache_max_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blog_entry&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog_slash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blog_slash&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aclarknet:templates/clients.mak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;clients&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aclarknet:templates/contact.mak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;contact&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aclarknet:templates/projects.mak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;projects&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aclarknet:templates/root.mak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aclarknet:templates/services.mak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;services&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aclarknet:templates/testimonials.mak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;testimonials&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aclarknet:templates/team.mak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;team&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deform_bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_wsgi_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;contact-form&quot;&gt;
&lt;h3&gt;Contact form&lt;/h3&gt;
&lt;p&gt;But then I wanted a contact form. Which lead me to wanting an elegant way to send mail via Heroku. Which lead me to discover &lt;a class=&quot;reference external&quot; href=&quot;http://sendgrid.com/&quot;&gt;SendGrid&lt;/a&gt;. Which lead me create some primitive marketing features I am quite proud of and excited about.&lt;/p&gt;
&lt;p&gt;I still ended up sending mail &amp;#8220;the old way&amp;#8221; via GMail. But now I send two mails: one to &lt;a class=&quot;reference external&quot; href=&quot;mailto:info&amp;#37;&amp;#52;&amp;#48;aclark&amp;#46;net&quot;&gt;info&lt;span&gt;&amp;#64;&lt;/span&gt;aclark&lt;span&gt;&amp;#46;&lt;/span&gt;net&lt;/a&gt; to alert our staff about the lead (using GMail). And one to the lead acknowledging their submission (using SendGrid). SendGrid keeps a record of all the leads we&amp;#8217;ve contacted, amongst other &amp;#8220;fancy marketing features&amp;#8221;. Here&amp;#8217;s the relevant view code:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;deform&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;smtplib&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;email.mime.text&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIMEText&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORM_ERROR&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORM_SUCCESS&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_ONE_RECIPIENT&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_ONE_SUBJECT&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_TWO_MESSAGE&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_TWO_SUBJECT&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GMAIL_HOSTNAME&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GMAIL_PASSWORD&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GMAIL_USERNAME&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SENDGRID_HOSTNAME&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SENDGRID_PASSWORD&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SENDGRID_USERNAME&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.forms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContactFormSchema&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Create and render deform form containing colander schema. Provide&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    sendgrid integration for marketing.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Send&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;span9 btn-block btn-large&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContactFormSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Send&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;appstruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidationFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# This is the form contents&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# This is the mail to info@aclark.net&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIMEText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_ONE_SUBJECT&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_ONE_RECIPIENT&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mime_document_one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# This is the mail to the new lead&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIMEText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIME_TWO_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_TWO_SUBJECT&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_ONE_RECIPIENT&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mime_document_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mime_document_two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# This is the mail to info@aclark.net&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smtplib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GMAIL_HOSTNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starttls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GMAIL_USERNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GMAIL_PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIME_ONE_RECIPIENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mime_document_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# This is the mail to the new lead&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smtplib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SENDGRID_HOSTNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starttls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SENDGRID_USERNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SENDGRID_PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIME_ONE_RECIPIENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mime_document_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;smtp_server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FORM_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FORM_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;errors&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appstruct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}),&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    This is the default view, to be used with most routes since we do not&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    provide any content editing ability yet. Even then, maybe a default view&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    would still be helpful.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;who-cares&quot;&gt;
&lt;h2&gt;Who cares&lt;/h2&gt;
&lt;p&gt;The best thing about all of this being able to run the site &lt;strong&gt;100% for free on Heroku&lt;/strong&gt;. Also:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Python 3 compat!&lt;/li&gt;
&lt;li&gt;Free caching via CloudFlare&lt;/li&gt;
&lt;li&gt;Free ping service from Pingdom keeps the site from &amp;#8220;going to sleep&amp;#8221; (HT: natea).&lt;/li&gt;
&lt;li&gt;Updating the site fits my workflow. If I&amp;#8217;m the content editor, I don&amp;#8217;t necessarily need or want to use Plone to edit my content. I can save Plone for my clients, and focus on &lt;strong&gt;what makes them happy&lt;/strong&gt; with their CMS system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">The Story of Pillow</title>
    <id>http://blog.aclark.net/2013/03/15/the-story-of-pillow/</id>
    <updated>2013-03-15T00:00:00Z</updated>
    <published>2013-03-15T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/03/15/the-story-of-pillow/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;the-story-of-pillow&quot;&gt;

&lt;p&gt;&lt;strong&gt;On March 4, 2013 I got an email from the Python Software Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On March 4, 2013 I got an email from the Python Software Foundation (PSF):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;This email notification is being sent to you to inform you of the PSF Board’s decision to fund the facilitation of a Python 3 compatible release of the Python Imaging Library for the amount of $1,300 USD. Please see the resolution that was passed unanimously on March 4, 2013 via email below:&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Yay! That was in response to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/psf-grant-proposal&quot;&gt;my proposal&lt;/a&gt; asking for funding to finish a Pillow 2.0.0 release. In that proposal, I presented the &amp;#8220;story of Pillow&amp;#8221; which I&amp;#8217;d like to present again now, for anyone interested:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Tired of seeing the proliferation of third party packagings of the Python Imaging Library, in 2010 Alex Clark took Hanno Schlicting&amp;#8217;s repackaging and used it to create a fork of the Python Imaging Library on GitHub. He subsequently released that fork to PyPI as Pillow 1.0. The ability to add additional development library paths to setup.py (e.g. 64 bit library and headers directories) and make releases quickly eventually led to widespread adoption of Pillow.&lt;/p&gt;
&lt;p&gt;A little over a year later on 2011-09-08, Takayuki Shimizukawa uploaded the first Windows (win32) eggs. Since then, every Pillow release included Windows eggs thanks to Takayuki. And on 2013-02-02, the first 64-bit Windows eggs (amd64) were uploaded to PyPI by Takayuki.&lt;/p&gt;
&lt;p&gt;For the first 3 years, the fork focused on packaging fixes only. Now a Python 3 compatible pull request from Brian Crowell has been merged, and the final stages of release preparation are underway. In early 2013, Barry Warsaw created an Ubuntu Personal Package Archive and tested it with Python 3. And the Fedora Project is now planning to include Pillow with their release of Fedora 19. Finally, the Pillow project has promised a Python 3 compatible release of Pillow by PyCon 2013.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;That release is now done! And I have had an absolute blast working on Pillow full time over the course of the last week or so. So much so, that I&amp;#8217;m going to propose you help me continue to have fun and be productive with Pillow… but more on that later. First, about the new release.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;about-2-0-0&quot;&gt;
&lt;h2&gt;About 2.0.0&lt;/h2&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/story-of-pillow.png&quot; /&gt;
&lt;p&gt;This release marks the first &amp;#8220;serious effort&amp;#8221; I have put into Pillow. While I&amp;#8217;ve always enjoyed working on it in my spare time, I knew that there was no way I could finish it in time for PyCon 2013 (as I promised) without getting some financial assistance.&lt;/p&gt;
&lt;p&gt;Enter: The PSF, who graciously offered to fund my work (and the work of one other contributor). Once I had funding in place, I knew exactly what needed to be done:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;So much time has passed since the fork, no one seemed to care if we made image code changes (we were originally a packaging fork), so this release contains &lt;strong&gt;EVERY PATCH EVER SUBMITTED TO PIL&lt;/strong&gt; but not released until now. I&amp;#8217;m exaggerating, but we really crammed a lot of &amp;#8220;goodness&amp;#8221; in to the 2.0.0 release along with Python 3 support which is what prompted the release in the first place.&lt;/li&gt;
&lt;li&gt;In order to fully test, I fine-tuned my tox environment on Mac OS X (tox is awesome) as well as fired up a new Windows VM (and used an already-existing Linux VM). Additionally, other folks joined in to test on their environments (most notably Christophe Gohlke and Eric Soroos). You&amp;#8217;ll find the results here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow#platform-support&quot;&gt;https://github.com/python-imaging/Pillow#platform-support&lt;/a&gt;. That means: &lt;strong&gt;THIS RELEASE HAS BEEN FULLY, EXTENSIVELY, AND EXHAUSTIVELY DEVELOPED AND TESTED&lt;/strong&gt;. Aside from the possible inconvenience of Pillow 2.0.0 dropping 2.4 and 2.5 support (use Pillow 1.x if you need Python 2.4,2.5), you should not have any trouble with it. If you do, please open a ticket here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues&quot;&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;As important as quality software is to me, quality presentation is almost equally important. (That&amp;#8217;s developer-eye quality, not designer-eye quality. ;-)) So I spent a lot of time cleaning up and enhancing the more subtle aspects of the release e.g. README.rst, docs/* (including the pythondoc documentation and HISTORY.txt and CONTRIBUTORS.txt). The pythondoc documentation has been converted to re-structured text and is hosted on ReadTheDocs: &lt;a class=&quot;reference external&quot; href=&quot;http://pillow.readthedocs.org/en/latest/&quot;&gt;http://pillow.readthedocs.org/en/latest/&lt;/a&gt;. The website has been updated to include an &lt;strong&gt;actual&lt;/strong&gt; image generated by PIL &lt;a class=&quot;reference external&quot; href=&quot;http://python-imaging.github.com/&quot;&gt;http://python-imaging.github.com/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you enjoy and use Pillow 2.0.0. If you&amp;#8217;d like to see me continue to devote significant time to maintaining Pillow, please &lt;a class=&quot;reference external&quot; href=&quot;http://gittip.com/aclark4life&quot;&gt;consider a gittip&lt;/a&gt;! Thank you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">I Love Checkoutmanager and Dotfiles</title>
    <id>http://blog.aclark.net/2013/02/08/i-love-checkoutmanager-and-dotfiles/</id>
    <updated>2013-02-08T00:00:00Z</updated>
    <published>2013-02-08T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/02/08/i-love-checkoutmanager-and-dotfiles/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;i-love-checkoutmanager-and-dotfiles&quot;&gt;

&lt;p&gt;&lt;strong&gt;An ode to my OS X development workstation setup&lt;/strong&gt; &lt;a class=&quot;footnote-reference&quot; href=&quot;#id11&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am big on setting up my development environment, and enjoying the environment I work in. And I&amp;#8217;m very thankful to the folks who make my life easier, including the authors of:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.ohloh.net/p/python/contributors/summary&quot;&gt;Python&lt;/a&gt;: Python Core Developers&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/dotfiles&quot;&gt;dotfiles&lt;/a&gt;: Jon Bernard&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/checkoutmanager&quot;&gt;checkoutmanager&lt;/a&gt;: Reinout Van Rees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also love &lt;strong&gt;repetition&lt;/strong&gt;. So picture if you will, a new &lt;strong&gt;Macbook Air or Pro&lt;/strong&gt; ready to serve as my development workstation. I like to perform, and study, the steps required to turn a new laptop in to my development workstation. So here we go. In this article, I will walk through the steps required to turn a new machine in to my developer workstation. Do follow along!&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;shell&quot;&gt;
&lt;h2&gt;Shell&lt;/h2&gt;
&lt;p&gt;One of the first things I do on a new system is change my shell to &lt;strong&gt;Zsh&lt;/strong&gt; in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;System&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Preferences&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Groups&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Advanced&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Options...&lt;/span&gt;&lt;/code&gt;. Don&amp;#8217;t forget to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;changes&lt;/span&gt;&lt;/code&gt; first.&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/zsh.png&quot; /&gt;
&lt;div class=&quot;section&quot; id=&quot;zsh&quot;&gt;
&lt;h3&gt;Zsh&lt;/h3&gt;
&lt;p&gt;Why &lt;strong&gt;Zsh&lt;/strong&gt;? One of my favorite features is &lt;strong&gt;shared history between open sessions&lt;/strong&gt;. So I can run a command in one window, and then run the same command from another window by fetching it from the history (with CTRL-R).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;xcode&quot;&gt;
&lt;h2&gt;XCode&lt;/h2&gt;
&lt;p&gt;After I take possession of my new laptop (running &lt;strong&gt;Mountain Lion&lt;/strong&gt;, the newest OS X at the time of this writing), I head to the App Store to download XCode. &lt;a class=&quot;footnote-reference&quot; href=&quot;#id12&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt; Among many other things, XCode gives me the GNU C Compiler and allows me to type &amp;#8220;gcc&amp;#8221; in my &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Applications&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Utilities&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Terminal&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/gcc.png&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/homebrew.png&quot; /&gt;
&lt;p&gt;Now I need a Python interpreter &lt;a class=&quot;footnote-reference&quot; href=&quot;#id13&quot; id=&quot;id4&quot;&gt;[3]&lt;/a&gt;. For development I use the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/buildout.python&quot;&gt;Collective Python Buildout&lt;/a&gt; but I also enjoy using &lt;a class=&quot;reference external&quot; href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&amp;#8217;s&lt;/a&gt; Python 2.7. I use Homebrew for a variety of other things too (e.g. mobile-shell AKA mosh) so here we go:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;… follow instructions …&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install python
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;git&quot;&gt;
&lt;h2&gt;Git&lt;/h2&gt;
&lt;p&gt;I think OS X (or XCode) includes git, but just in case:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install git
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which reminds me, don&amp;#8217;t forget that installing the command line utilities in Mountain Lion&amp;#8217;s XCode requires an additional step in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Preferences&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Downloads&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Line&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Tools&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Install&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/command-line-utils.png&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id5&quot;&gt;
&lt;h2&gt;Dotfiles&lt;/h2&gt;
&lt;p&gt;At this point, I can begin to get serious about turning this new machine in to my developer workstation. And that means: &lt;strong&gt;installing my private ssh key&lt;/strong&gt; so I can check out code without typing a password, of course. Normally this would be tedious, but with git and dotfiles it&amp;#8217;s not so bad. This is what I do from my home directory:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://super_secret_url/dotfiles.git Dotfiles
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I use https which requires a password for the first time only. Then I edit &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Dotfiles/.git/config&lt;/span&gt;&lt;/code&gt; and change the repository URL to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;git&amp;#64;super_secret_url/dotfiles.git&lt;/span&gt;&lt;/code&gt;. So every subsequent pull and push will require no password. And to &amp;#8220;install&amp;#8221; these dotfiles, I do &lt;a class=&quot;footnote-reference&quot; href=&quot;#id16&quot; id=&quot;id6&quot;&gt;[6]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install dotfiles
$ dotfiles -s --force
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note: the dotfiles command finds my dotfiles in the default directory &amp;#8220;Dotfiles&amp;#8221; and create symbolic links to them.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;distribute-pip&quot;&gt;
&lt;h3&gt;Distribute &amp;amp; Pip&lt;/h3&gt;
&lt;p&gt;Homebrew&amp;#8217;s Python includes pip, but even if it didn&amp;#8217;t:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -O http://python-distribute.org/distribute_setup.py
$ /usr/local/bin/python distribute_setup.py
$ {easy_install, pip install} dotfiles
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In other words, you can always install Distribute &lt;a class=&quot;footnote-reference&quot; href=&quot;#id14&quot; id=&quot;id7&quot;&gt;[4]&lt;/a&gt;. After which you can use &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;easy_install&lt;/span&gt;&lt;/code&gt; or &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt;&lt;/code&gt; to install dotfiles. (You can read up on the differences. TL;DR: neither is &amp;#8220;better&amp;#8221; or &amp;#8220;worse&amp;#8221;, it&amp;#8217;s just a question of which tradeoffs you are willing to make. I tend to use pip just because it&amp;#8217;s newer and I like its requirements.txt feature, but easy_install is still very well supported as part of the Distribute project.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id8&quot;&gt;
&lt;h2&gt;Checkoutmanager&lt;/h2&gt;
&lt;p&gt;Now I need some things to develop. Since I work on a bunch of different projects, I need a way to keep track of what should be checked out at any given time. So I do this &lt;a class=&quot;footnote-reference&quot; href=&quot;#id15&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install checkoutmanager
$ checkoutmanager co
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This creates and populates my &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;~/Developer&lt;/span&gt;&lt;/code&gt; directory with code. And it &amp;#8220;just works&amp;#8221; because I keep a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.checkoutmanager.cfg&lt;/span&gt;&lt;/code&gt; in my Dotfiles repository. It currently looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[aclark]
basedir = /Users/aclark/Developer/aclark
checkouts =
    git@github.com:aclark4life/aclark4life.github.com.git resume
    git@github.com:aclark4life/desktops.git
    git@github.com:aclark4life/hireme.git
    git@github.com:aclark4life/projects.git
    git@github.com:aclark4life/reinstall.git
    git@github.com:ACLARKNET/tweets.git
    git@github.com:aclark4life/usesthis.git
vcs = git

[alt]
basedir = /Users/aclark/Developer/alt
checkouts =
    git@github.com:alt-aclark-net/alt-aclark-net.github.com.git
    git@github.com:alt-aclark-net/dexter.git
    git@github.com:alt-aclark-net/headstraight.git
vcs = git

[buildout]
basedir = /Users/aclark/Developer/buildout
checkouts =
    git@github.com:collective/buildout.bootstrap.git
    git@github.com:buildout/buildout.git
    git@github.com:buildout/buildout.github.com.git
vcs = git

[distribute]
basedir = /Users/aclark/Developer
checkouts = ssh://hg@bitbucket.org/tarek/distribute
vcs = hg

[clients]
basedir = /Users/aclark/Developer
checkouts =
; Bunch o client repos
vcs = git

[clients-hg]
basedir = /Users/aclark/Developer
checkouts =
; Bunch o client repos
vcs = hg

[dcpython]
basedir = /Users/aclark/Developer/dcpython
checkouts =
    git@github.com:DCPython/dcpython.github.com.git
    git@github.com:DCPython/pyramid-tutorials.git
vcs = git

[misc]
basedir = /Users/aclark/Developer
checkouts =
    git@github.com:ACLARKNET/aclarknet.github.com.git blog
    git@github.com:ACLARKNET/new_style.git
    git@github.com:aclark4life/binfiles.git
;    git@github.com:aclark4life/pyramid_python_3.git
    git@github.com:aclark4life/vanity.git
    git@github.com:aclark4life/zope2-heroku.git
    git@github.com:aclark4life/zope2_bootstrap.git
    git@github.com:codekoala/django-axes.git
    git@github.com:collective/buildout.python
vcs = git

[pillow]
basedir = /Users/aclark/Developer/pillow
checkouts =
    git@github.com:python-imaging/Pillow.git
    git@github.com:python-imaging/python-imaging.github.com.git
vcs = git

[plethorasociety]
basedir = /Users/aclark/Developer/plethorasociety
checkouts =
    git@github.com:plethorasociety/plethorasociety.github.com.git
vcs = git

[plone]
basedir = /Users/aclark/Developer/plone
checkouts =
    git@github.com:aclark4life/Plone-Debug-Assistant.git
    git@github.com:aclark4life/collective.recipe.bluebream.git
    git@github.com:aclark4life/event_days_indexer.git
    git@github.com:aclark4life/hello_plone.git
    git@github.com:aclark4life/mr_migrator_demo.git
    git@github.com:aclark4life/parse2plone.git
    git@github.com:aclark4life/plone_1_fun.git
    git@github.com:aclark4life/plone_addon_upgrade.git
    git@github.com:aclark4life/plone_guide.git
    git@github.com:aclark4life/plone_workflow_events.git
    git@github.com:aclark4life/schemaextender-facetednav-demo.git
    git@github.com:aclark4life/silly_content_import.git
    git@github.com:aclark4life/transmogrify.extract.git
    git@github.com:aclark4life/transmogrify.regexp.git
    git@github.com:aclark4life/viewlets_dont_suck.git
    git@github.com:aclark4life/wordpress2plone.git
    git@github.com:collective/Products.AttachmentField.git
    git@github.com:collective/Products.CalendarX.git
    git@github.com:collective/Products.EventRegistration.git
    git@github.com:collective/Products.PloneSoftwareCenter.git
    git@github.com:collective/Products.ifQuotes.git
    git@github.com:collective/Products.naked_plone.git
    git@github.com:collective/buildout.plonetest.git
    git@github.com:collective/collective.contacts.git
    git@github.com:collective/collective.controlpanel.edit_css.git
    git@github.com:collective/collective.developermanual.git
    git@github.com:collective/collective.formtoy.git
    git@github.com:collective/collective.github.com.git
    git@github.com:collective/collective.googleanalytics.git
    git@github.com:collective/collective.package.git
    git@github.com:collective/collective.project.git
    git@github.com:collective/collective.recaptcha.git
    git@github.com:collective/collective.recipe.grp.git
    git@github.com:collective/collective.recipe.rsync.git
    git@github.com:collective/collective.rip.git
    git@github.com:collective/collective.stats.git
    git@github.com:collective/funnelweb.git
    git@github.com:collective/github-collective.git
    git@github.com:collective/mr.migrator.git
    git@github.com:collective/plonecom-buildout.git
    git@github.com:collective/plonecom.theme.git
    git@github.com:collective/plonetheme.coolblue.git
    git@github.com:collective/plonetheme.freshpick.git
    git@github.com:collective/plonetheme.grungeera.git
    git@github.com:collective/plonetheme.keepitsimple.git
    git@github.com:collective/plonetheme.unilluminated.git
    git@github.com:collective/transmogrify.filesystem.git
    git@github.com:plone/Installers-OS-X.git
    git@github.com:plone/Products.PloneOrg.git
    git@github.com:plone/admin-docs.git
    git@github.com:plone/buildout.coredev.git
    git@github.com:plone/planet.plone.org.git
    git@github.com:plone/plone.api.git
    git@github.com:plone/plone.github.com.git
    git@github.com:plone/ploneorg.admin.git
    git@github.com:plone/plonetheme.ploneorg.git
vcs = git

[pythonpackages]
basedir = /Users/aclark/Developer/pythonpackages
checkouts =
    git@github.com:aclark4life/buildout-apache-mysql.git
    git@github.com:aclark4life/buildout-munin.git
    git@github.com:aclark4life/buildout-mysql.git
    git@github.com:aclark4life/buildout-nginx.git
    git@github.com:aclark4life/buildout-plone-haproxy.git
    git@github.com:aclark4life/buildout-plone-varnish.git
    git@github.com:aclark4life/buildout-zenoss.git
    git@bitbucket.org:pythonpackages/pythonpackages.com.git vanity_app
    git@github.com:pythonpackages/buildout-apache-modwsgi.git
    git@github.com:pythonpackages/buildout-bluebream.git
    git@github.com:pythonpackages/buildout-django.git
    git@github.com:pythonpackages/buildout-jenkins.git
    git@github.com:pythonpackages/buildout-plone-getpaid.git
    git@github.com:pythonpackages/buildout-plone.git
    git@github.com:pythonpackages/buildout-wordpress.git
    git@github.com:pythonpackages/buildout-zope2.git
    git@github.com:pythonpackages/experimental.pythonpackages.git
    git@github.com:pythonpackages/github-services.git pythonpackages-github-services
    git@github.com:pythonpackages/pyramidpypi.git pythonpackages-index
    git@github.com:pythonpackages/pythonpackages-blog.git
    git@github.com:pythonpackages/pythonpackages-docs.git
    git@github.com:pythonpackages/pythonpackages-graphs.git
    git@github.com:pythonpackages/pythonpackages-paste.git
    git@github.com:pythonpackages/pythonpackages-scaffolds.git
    git@github.com:pythonpackages/pythonpackages.sendpickedversions.git
    git@github.com:pythonpackages/pythonpackages-whiskers.git
    git@github.com:pythonpackages/pythonpackages.git
vcs = git

[toys]
basedir = /Users/aclark/Developer/toys
checkouts =
    git@github.com:aclark4life/basic_pyramid_zodb.git
    git@github.com:aclark4life/github_repos_cloner.git
    git@github.com:aclark4life/other.git
    git@github.com:aclark4life/python_study.git
    git@github.com:aclark4life/django-hello.git
vcs = git
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now it&amp;#8217;s time to bootstrap the Collective Python Buildout, which gives me &lt;strong&gt;all versions of Python, ever&lt;/strong&gt; &lt;a class=&quot;footnote-reference&quot; href=&quot;#id17&quot; id=&quot;id10&quot;&gt;[7]&lt;/a&gt;. And off we go:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cd Developer/buildout.python
$ python bootstrap.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, there is some PATH configuration required to make all of this seemless. The Collective Python Buildout gets installed in /opt while brew&amp;#8217;s stuff is in /usr/local. My PATH config currently looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/Users/aclark/Developer/buildout.python/python-2.7/bin:$PATH
export PATH=~/Developer/binfiles:/usr/local/share/npm/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With the above configuration, I default to the Python 2.7 in the Collective Python Buildout. That means that is the &amp;#8220;python&amp;#8221; or &amp;#8220;virtualenv&amp;#8221; I get when I type those commands. I use the full path or expanded binary name when I need them e.g. /usr/local/bin/python or python3.3.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it! I hope you will check out dotfiles and checkoutmanager for all your development needs.&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id11&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not really an ode: &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Ode&quot;&gt;http://en.wikipedia.org/wiki/Ode&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id12&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I know about Kenneth Reitz&amp;#8217;s XCode Command line Tools only, but if I recall correctly there is some &amp;#8220;gotcha&amp;#8221; that has bitten me more than once if I use that instead of the full XCode. I wish I could remember what it was now, but it&amp;#8217;s not coming to me. If it works for you though, great!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id13&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id4&quot;&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I know about the system Python, and for small things like checkoutmanager and dotfiles I don&amp;#8217;t mind using it. But there is merit in avoiding it because Apple treats it like &amp;#8220;their&amp;#8221; Python and makes decisions for you that you may prefer to make yourself. E.g. I believe they use a crippled version of the readline library.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id14&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id7&quot;&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Distribute is a more actively maintained fork of the venerable setuptools library (which itself is built on top of the Python standard library&amp;#8217;s distutils). Are we having fun yet?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id15&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id9&quot;&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I also alias checkoutmanager to cm&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id16&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id6&quot;&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I force because I want to replace the newly created .ssh dir with the one I keep in my Dotfiles repository.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id17&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id10&quot;&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Well, 2.4 through 3.3 at last count.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Python 3 Porting</title>
    <id>http://blog.aclark.net/2013/01/10/python-3-porting/</id>
    <updated>2013-01-10T00:00:00Z</updated>
    <published>2013-01-10T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/01/10/python-3-porting/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;python-3-porting&quot;&gt;

&lt;p&gt;&lt;strong&gt;The 3 in 2013 is for Python 3&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/python-3-port.jpg&quot; /&gt;
&lt;p&gt;I tend to like projects that everyone else &lt;strong&gt;hates&lt;/strong&gt;, e.g.:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Removing persistent Python objects associated with missing classes in ZODB.&lt;/li&gt;
&lt;li&gt;Making new releases for old software that is still useful but unmaintained.&lt;/li&gt;
&lt;li&gt;Running flake8 on 10s or 100s of source files and hand-fixing the results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part of this has to do with &lt;strong&gt;repetition&lt;/strong&gt;. I know how to do these things, and I like doing them. Over and over. If someone says, &amp;#8220;my Data.fs file is broken&amp;#8221; I get excited. Anyway, I hope you get the idea.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;i-am-your-man&quot;&gt;
&lt;h2&gt;I am your man&lt;/h2&gt;
&lt;p&gt;Which brings me to the subject of this post: &lt;strong&gt;Python 3 Porting&lt;/strong&gt;. I&amp;#8217;ve been helping out porting the Python Imaging Library to Python 3 (via the Pillow fork, where I am the release manager). And it strikes me as the type of thing I&amp;#8217;d be very interested in doing professionally. So, if you or your company are in need of a &amp;#8220;workhorse&amp;#8221; to plow through old code and update it, &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/team/alex-clark&quot;&gt;I am your man&lt;/a&gt;. Please do &lt;a class=&quot;reference external&quot; href=&quot;mailto:info&amp;#37;&amp;#52;&amp;#48;aclark&amp;#46;net&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-in-it-for-you&quot;&gt;
&lt;h2&gt;What&amp;#8217;s in it for you&lt;/h2&gt;
&lt;p&gt;Now I know what you are thinking: &lt;strong&gt;porting Python 2 software to Python 3 is a lot of work for little gain&lt;/strong&gt;. Maybe. Maybe not. I&amp;#8217;m not going to try to convince you otherwise, however I will tell you this:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;For me, 2013 is &amp;#8220;the year of Python 3&amp;#8221;. I&amp;#8217;ve now promised to deliver and maintain a &lt;strong&gt;Python 3 compatible PIL by PyCon 2013&lt;/strong&gt;. I now care about Python 3 (this was not true before).&lt;/li&gt;
&lt;li&gt;The Python 3 Wall of Shame is now the &lt;a class=&quot;reference external&quot; href=&quot;https://python3wos.appspot.com/&quot;&gt;Python 3 Wall of Superpowers&lt;/a&gt;. We are over the hump.&lt;/li&gt;
&lt;li&gt;Many popular Python web frameworks support or are about to support Python 3 e.g. CherryPy, Django, Pyramid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, there is no time like the present to &lt;strong&gt;take a serious look at Python 3&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow Python 3</title>
    <id>http://blog.aclark.net/2013/01/10/pillow-python-3/</id>
    <updated>2013-01-10T00:00:00Z</updated>
    <published>2013-01-10T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/01/10/pillow-python-3/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-python-3&quot;&gt;

&lt;p&gt;&lt;strong&gt;PIL is on its way to Python 3 via Pillow.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Support from Brian Crowell and others has been merged into master here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/pull/35&quot;&gt;https://github.com/python-imaging/Pillow/pull/35&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And work continues toward a pre &lt;strong&gt;PyCon 2013&lt;/strong&gt; release! Please help if you can:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Ubuntu users, read through &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/18&quot;&gt;https://github.com/python-imaging/Pillow/issues/18&lt;/a&gt; and provide assistance with testing this Ubuntu package: &lt;a class=&quot;reference external&quot; href=&quot;https://launchpad.net/~pythoneers/+archive/ppa&quot;&gt;https://launchpad.net/~pythoneers/+archive/ppa&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Git experts, please comment on the merge issue described here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/pull/35&quot;&gt;https://github.com/python-imaging/Pillow/pull/35&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Everyone else, please git clone the master branch for testing: &lt;strong&gt;git://github.com/python-imaging/Pillow.git&lt;/strong&gt; and report issues as you find them: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues&quot;&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">New Year's Python Meme 2012</title>
    <id>http://blog.aclark.net/2012/12/29/new-years-python-meme-2012/</id>
    <updated>2012-12-29T00:00:00Z</updated>
    <published>2012-12-29T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/12/29/new-years-python-meme-2012/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-year-s-python-meme-2012&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is my entry for Tarek Ziadé&amp;#8217;s New Year&amp;#8217;s Python Meme, a tradition I have come to enjoy. Both to reflect on the current year and look back on previous years. So here it is.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/tarek-meme-reminder.png&quot; /&gt;
&lt;p&gt;I did this in &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2009/12/31/new-years-python-meme/&quot;&gt;2009&lt;/a&gt; &amp;amp; &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/12/21/new-years-python-meme-2011/&quot;&gt;2011&lt;/a&gt;. Let&amp;#8217;s try it again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. What’s the coolest Python application, framework or library you have discovered in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That would be &lt;a class=&quot;reference external&quot; href=&quot;http://docs.python-requests.org/en/latest/&quot;&gt;Kenneth Reitz&amp;#8217;s Requests&lt;/a&gt;. Like many others, I&amp;#8217;ve been bitten by the elegance and simplicity bug that is inherent and ingrained in the Requests library. Primarily, I used it to build pythonpackages.com. In particular, I used it to communicate with the almost-equally-elegant (IMHO) GitHub API. This is why I like requests (among other reasons): I don&amp;#8217;t need to use a &amp;#8220;third party&amp;#8221; library to communicate with the GitHub API. Such libraries (I think) attempt to make my job easier by hiding complexity and presenting simpler APIs to use. This is sometimes necessary, but no substitute for &lt;em&gt;really&lt;/em&gt; and &lt;em&gt;actually&lt;/em&gt; simple APIs and good documentation (both of which GitHub and Kenneth provide, with their respective APIs.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. What new programming technique did you learn in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript: check. Unit testing: check. These are techniques I have learned enough of to be effective in my &amp;#8220;day job&amp;#8221; (I&amp;#8217;m self-employed). But I learned (finally) that I am primarily: a Python Web Developer. And it feels good to say that. I use Python, and related web technologies to build web applications for my clients. I typically only care to learn enough of a technology to get my job done, then I lose interest (for the most part). That&amp;#8217;s because I&amp;#8217;m also a Hacker. I identify significantly with this monicker because it fits who I am and how I conduct myself professionally. I care about getting the job done above all else. And if there is a job to be done, my intellectual curiosity knows no bounds. If the job is done, I&amp;#8217;m going to play guitar. So whatever the technique, I&amp;#8217;ll learn it if it&amp;#8217;s something I care about for whatever reason.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Which open source project did you contribute to the most in 2012 ? What did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the first year that Plone did not consume my every moment. I also spent significant time working on &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/buildout&quot;&gt;Buildout&lt;/a&gt; (INI-config-driven system to install Python packages and other software, &amp;amp; perform other related and miscellaneous tasks) and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging&quot;&gt;Pillow (PIL fork)&lt;/a&gt;. With the help of many others, I hope to get a Python 3.3 compatible release of Pillow out by PyCon 2013. And I&amp;#8217;ll support Buildout &amp;lt; 2.x until such time as Buildout 2.x goes mainstream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Which Python blog or website did you read the most in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Planets: Django, Mozilla, Plone, Python. Reddits: Python. Other feeds: Hacker News &amp;amp; Tech Crunch. I added Tech Crunch this year to satisfy my &amp;#8220;startup itch&amp;#8221;, as was recommended to me by Jonathon Perrelli of Fortify.vc in DC.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. What are the three top things you want to learn in 2013?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How to hustle. Hustling, and more hustling. I&amp;#8217;ve gained a lot (enough?) technical skill over the years. Now I want to put that skill to good use in business. I&amp;#8217;ve managed to remain self-employed for a number of years, now I&amp;#8217;d like to employ others full time, build successful businesses and otherwise &amp;#8220;expand my empire&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. What is the top software, application or library you wish someone would write in 2013?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope that I get more significant time to put into my &amp;#8220;baby&amp;#8221;: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/pythonpackages&quot;&gt;pythonpackages.com&lt;/a&gt;. In particular, I&amp;#8217;m considering adding a Travis-like service which would spawn Windows VMs to run tests and produce executables for Python packages (to address a particular pain point I&amp;#8217;ve discovered along the way: people want to support Windows, but often don&amp;#8217;t have the ability to do so easily.)&lt;/p&gt;
&lt;p&gt;Happy (Python) New Year!&lt;/p&gt;
&lt;p&gt;Want to do your own list? Here&amp;#8217;s how:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Copy-paste the questions and answer to them in your blog&lt;/li&gt;
&lt;li&gt;Tweet it with the &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/search/realtime?q=%232012pythonmeme&amp;amp;src=typd&quot;&gt;#2012pythonmeme&lt;/a&gt; hashtag&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow 1-7-8</title>
    <id>http://blog.aclark.net/2012/11/02/pillow-1-7-8/</id>
    <updated>2012-11-02T00:00:00Z</updated>
    <published>2012-11-02T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/11/02/pillow-1-7-8/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-1-7-8&quot;&gt;

&lt;p&gt;&lt;strong&gt;Pillow is the friendly PIL fork. Initially just a packaging fork, now considering image code bug fixes and Python 3 support. To be friendly, we attempt to track changes against upstream tickets in PIL.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pillow 1.7.8 is out! Read about it here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Pillow/1.7.8&quot;&gt;http://pypi.python.org/pypi/Pillow/1.7.8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot; id=&quot;features&quot;&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;It&amp;#8217;s PIL (Python Imaging Library)&lt;/li&gt;
&lt;li&gt;It installs on all modern systems &lt;a class=&quot;footnote-reference&quot; href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Win32 eggs are provided (special thanks to Takayuki Shimizukawa)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;changes&quot;&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;p&gt;This release includes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Removed doctests.py that made tests of other packages fail. [thomasdesvenain]&lt;/li&gt;
&lt;li&gt;Fix opening psd files with RGBA layers when A mode is not of type 65535 but 3. Fixes issue &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues/3&quot;&gt;https://github.com/python-imaging/Pillow/issues/3&lt;/a&gt; [thomasdesvenain]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;install&quot;&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;To install Pillow:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install Pillow
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install Pillow
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py install (inside the extracted zip)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install zc.buildout
$ buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pillow&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pillow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(Note: easy_install &amp;amp; pip each handle namespace packages differently, so you should choose one or the other, and not mix the two.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;report-issues&quot;&gt;
&lt;h2&gt;Report issues&lt;/h2&gt;
&lt;p&gt;If you find an issue, please report it here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues&quot;&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Better yet: please fork, fix, and submit a pull request. Please also solicit for peer review once the pull request has been submitted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;discussion&quot;&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;You may discuss issues related to PIL, Pillow, and Python imaging on the image-sig list:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://mail.python.org/mailman/listinfo/image-sig&quot;&gt;http://mail.python.org/mailman/listinfo/image-sig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy using Pillow!&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id2&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If it doesn&amp;#8217;t, please report it: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow/issues&quot;&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Django Hello</title>
    <id>http://blog.aclark.net/2012/10/23/django-hello/</id>
    <updated>2012-10-23T00:00:00Z</updated>
    <published>2012-10-23T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/10/23/django-hello/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;django-hello&quot;&gt;

&lt;p&gt;&lt;strong&gt;Django doesn&amp;#8217;t really need a hello world style introduction, its documentation speaks for itself.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But this is what &amp;#8220;Hello, world!&amp;#8221; in Django looks like to me. I hate boilerplate and I love reducing software down to its core components; just enough to start the server.&lt;/p&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;setuptools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;requirements.txt:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Django==1.4.1
-e .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;settings.py:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;r&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hello.views.index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Based on https://docs.djangoproject.com/en/1.4/topics/http/views/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    This function takes a Django request object and returns a &amp;#39;Hello World&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    style response, by wrapping some HTML in a Django response object.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;It is now &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;installation&quot;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone this-repo
$ cd this-repo
$ virtualenv .
$ bin/pip install -r requirements.txt
$ bin/django-admin.py runserver --settings=hello.settings
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The above code can be found here:&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/django-hello&quot;&gt;https://github.com/aclark4life/django-hello&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Consider a&lt;/em&gt;&lt;/p&gt;
&lt;iframe style=&quot;border: 0; margin: 0; padding: 0;&quot;
        src=&quot;https://www.gittip.com/aclark4life/widget.html&quot;
        width=&quot;48pt&quot; height=&quot;20pt&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;lt;3&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Looking For Projects</title>
    <id>http://blog.aclark.net/2012/10/04/looking-for-projects/</id>
    <updated>2012-10-04T00:00:00Z</updated>
    <published>2012-10-04T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/10/04/looking-for-projects/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;looking-for-projects&quot;&gt;

&lt;img alt=&quot;I don't always work, but when I do I prefer to use Python.&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/use_python.jpg&quot; /&gt;
&lt;p&gt;&lt;strong&gt;With pythonpackages.com winding down, I am now actively seeking projects for Q4 2012 and beyond.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am good at:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Deploying Plone sites: &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/&quot;&gt;http://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maintaining and releasing Python packages: &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=aclark&amp;amp;submit=search&quot;&gt;http://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=aclark&amp;amp;submit=search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cat herding volunteers: &lt;a class=&quot;reference external&quot; href=&quot;http://lists.plone.org/pipermail/plone-com/Week-of-Mon-20120903/000039.html&quot;&gt;http://lists.plone.org/pipermail/plone-com/Week-of-Mon-20120903/000039.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing documentation: &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/index.html&quot;&gt;http://docs.pythonpackages.com/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing narrative text: &lt;a class=&quot;reference external&quot; href=&quot;http://www.packtpub.com/plone-33-site-administration/book&quot;&gt;http://www.packtpub.com/plone-33-site-administration/book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing Python code: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life&quot;&gt;https://github.com/aclark4life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, I&amp;#8217;ve put together a list of projects I am involved in (or have been involved in): &lt;a class=&quot;reference external&quot; href=&quot;http://resume.aclark.net/projects/&quot;&gt;http://resume.aclark.net/projects/&lt;/a&gt;, and please feel free to check out my résumé: &lt;a class=&quot;reference external&quot; href=&quot;http://resume.aclark.net/&quot;&gt;http://resume.aclark.net/&lt;/a&gt;. If you&amp;#8217;d like to discuss how I can help you or your team, please get in touch: &lt;a class=&quot;reference external&quot; href=&quot;mailto:aclark&amp;#37;&amp;#52;&amp;#48;aclark&amp;#46;net&quot;&gt;aclark&lt;span&gt;&amp;#64;&lt;/span&gt;aclark&lt;span&gt;&amp;#46;&lt;/span&gt;net&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">PythonPackages: One Year Later</title>
    <id>http://blog.aclark.net/2012/09/28/pythonpackages-com-one-year-later/</id>
    <updated>2012-09-28T00:00:00Z</updated>
    <published>2012-09-28T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/09/28/pythonpackages-com-one-year-later/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pythonpackages-one-year-later&quot;&gt;

&lt;p&gt;&lt;strong&gt;We are rolling up on the one year anniversary of pythonpackages.com (in October).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an exciting milestone (for me at least) because I&amp;#8217;ve had a tremendous amount of fun building the site, not to mention how much I learned about GitHub, PyPI, Pyramid, Stripe, Redis, Bootstrap, and more.&lt;/p&gt;
&lt;p&gt;We are hovering around 200 signups which I&amp;#8217;m quite proud of. But in terms of &lt;strong&gt;possible-financial-success&lt;/strong&gt; i.e. the potential of converting some of those sign ups in to actual customers I&amp;#8217;d feel better if we were at 2,000 or higher.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;what-happened&quot;&gt;
&lt;h2&gt;What happened?&lt;/h2&gt;
&lt;p&gt;As of the launch of the beta site 3 months ago, there are some actually-useful features available:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/introduction.html#introduction&quot;&gt;ability to release a package from GitHub to PyPI&lt;/a&gt; without a terminal (i.e. in the web browser).&lt;/li&gt;
&lt;li&gt;The ability to release a package with &lt;cite&gt;git push&lt;/cite&gt; (by adding the service: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/github/github-services/blob/master/services/pythonpackages.rb&quot;&gt;https://github.com/github/github-services/blob/master/services/pythonpackages.rb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The ability to &amp;#8220;manage packages&amp;#8221; (see image below)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/manage-packages.png&quot; /&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The ability to &amp;#8220;manage organizations&amp;#8221; (see image below)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/manage-organizations.png&quot; /&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/create-package.html#create-packages&quot;&gt;ability to create packages through the web&lt;/a&gt; (i.e. from the web browser to GitHub, whereas normally you&amp;#8217;d run PasteScript in your Terminal).&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/create-new-package.png&quot; /&gt;
&lt;p&gt;And a few more logistical features that are cool:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The ability to pay with a credit card (via Stripe)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/pay-with-stripe.png&quot; /&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The ability to oauth against PyPI:&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/pypi-oauth.png&quot; /&gt;
&lt;p&gt;Still, we have only scratched the surface of what could potentially be provided to the Python community. Future plans include:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The ability to easily &lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/pythonpackages/pythonpackages.com/issue/28/build-windows-installers&quot;&gt;build Windows installers&lt;/a&gt; for your Python software.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/pythonpackages/pythonpackages.com/issue/27/support-bitbucket-and-other-dvcs-services&quot;&gt;Support for other services&lt;/a&gt; e.g. bitbucket.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/pythonpackages/pythonpackages.com/issue/29/add-git-branch-support&quot;&gt;Support git branches&lt;/a&gt; i.e. for releasing from a branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, this is a great start to building &amp;#8220;github style&amp;#8221; automation for Python packaging but there is much more work to be done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-now&quot;&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;I am in the process of winding down the 3 month &amp;#8220;beta 1&amp;#8221; period. The &amp;#8220;beta 2&amp;#8221; period (from now until the end of the year) will likely include:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Adding MailChimp integration to make it easier to email subscribers.&lt;/li&gt;
&lt;li&gt;Turn off SSL to save $20/month.&lt;/li&gt;
&lt;li&gt;Write tests and open source the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-can-you-do-to-help&quot;&gt;
&lt;h2&gt;What can you do to help?&lt;/h2&gt;
&lt;p&gt;If you believe in the ideas behind pythonpackages.com (primarily: eliminating the need to think about packaging at all; e.g. through task automation, and process improvement behind the scenes; i.e. supporting new technology like distutils2/packaging, wheel, et al.; in order to present a seemless packaging story to developer-consumers.) then the best thing you can do is to purchase a paid plan:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/plans&quot;&gt;http://pythonpackages.com/plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second best thing you can do is support me on gittip:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://gittip.com/aclark4life&quot;&gt;https://gittip.com/aclark4life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These funds will go towards covering hosting costs until such time as the service can pay for itself. I am also asking folks who appreciate my open source work in general to consider a gittip donation. If you cannot help financially, you can still use the free plan to release packages! Please try it out and &lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new&quot;&gt;give feedback&lt;/a&gt;. (The paid plans get you access to more package slots, so you don&amp;#8217;t have to swap out the free slot, and organizations, so you can release packages from organization repos).&lt;/p&gt;
&lt;p&gt;Thanks for considering!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Sorry for the blog spam</title>
    <id>http://blog.aclark.net/2012/09/22/sorry-for-the-blog-spam/</id>
    <updated>2012-09-22T00:00:00Z</updated>
    <published>2012-09-22T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/09/22/sorry-for-the-blog-spam/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;sorry-for-the-blog-spam&quot;&gt;

&lt;p&gt;&lt;strong&gt;Just learning Pelican&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As I&amp;#8217;m just learning &lt;a class=&quot;reference external&quot; href=&quot;http://blog.getpelican.com&quot;&gt;Pelican&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2012/09/21/yes-this-blog-is-now-powered-by-pelican/#comment-658707601&quot;&gt;Dirkjan Ochtman pointed out&lt;/a&gt; that I can have &amp;#8220;fancy&amp;#8221; URLs via the &lt;cite&gt;ARTICLE_PERMALINK_STRUCTURE&lt;/cite&gt; setting. So the blog spam you are seeing is a result of my publishing the same two articles with two different URLs (fancy and non-fancy). My apologies for the noise.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;publishconf-py&quot;&gt;
&lt;h2&gt;publishconf.py&lt;/h2&gt;
&lt;p&gt;And actually, I found &lt;cite&gt;ARTICLE_URL&lt;/cite&gt; and &lt;cite&gt;ARTICLE_SAVE_AS&lt;/cite&gt; to be the settings I wanted to use instead &lt;a class=&quot;footnote-reference&quot; href=&quot;#id4&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. My &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet.github.com/blob/master/publishconf.py&quot;&gt;publishconf.py&lt;/a&gt; now looks like this &lt;a class=&quot;footnote-reference&quot; href=&quot;#id5&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ARTICLE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;}/{slug}/&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AUTHOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;u&amp;#39;Alex Clark&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CATEGORY_FEED_RSS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT_CATEGORY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Blog&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;en&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;aclark-blog&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GITHUB_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://github.com/ACLARKNET/aclarknet.github.com&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;UA-34988446-1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SITENAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;u&amp;#39;Alex Clark&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SITEURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://blog.aclark.net&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SOCIAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GitHub&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://github.com/aclark4life&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Gittip&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://www.gittip.com/aclark4life&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PythonPackages&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://pythonpackages.com/user/aclark4life&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://twitter.com/aclark4life&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;atom feed (Mozilla)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://blog.aclark.net/Mozilla.atom.xml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;atom feed (Plone)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://blog.aclark.net/Plone.atom.xml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;atom feed (Python)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://blog.aclark.net/Python.atom.xml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TAG_FEED_ATOM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TAG_FEED_RSS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TWITTER_USERNAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;aclark4life&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id4&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pelican.notmyidea.org/en/3.0/settings.html#url-settings&quot;&gt;http://pelican.notmyidea.org/en/3.0/settings.html#url-settings&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id5&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I removed the extraneous pelicanconf.py and put everything in one file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Yup, This Blog is Now Powered by Pelican</title>
    <id>http://blog.aclark.net/2012/09/21/yes-this-blog-is-now-powered-by-pelican/</id>
    <updated>2012-09-21T00:00:00Z</updated>
    <published>2012-09-21T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/09/21/yes-this-blog-is-now-powered-by-pelican/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;yup-this-blog-is-now-powered-by-pelican&quot;&gt;

&lt;p&gt;&lt;strong&gt;As an open source &amp;#8220;Plone guy&amp;#8221;, I&amp;#8217;m always prepared to defend and explain my choice to not use Plone for blogging.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As an open source &amp;#8220;Plone guy&amp;#8221;, I&amp;#8217;m always prepared to defend and explain my choice to &lt;strong&gt;not&lt;/strong&gt; use Plone for blogging. A couple years ago, I started using Wordpress in order to learn its feature set. I enjoyed my time with it, but after moving to wordpress.com for &amp;#8220;trouble free&amp;#8221; hosting, I found I couldn&amp;#8217;t control my category feeds the way I wanted; the honeymoon was over.&lt;/p&gt;
&lt;p&gt;This was a giant let down, because I was hoping to avoid putting any time in to my blogging infrastructure. For weeks I did nothing. I poked at various options: Pelican, Plone, Tumblr, others. Eventually, I found my way back to Pelican and now I&amp;#8217;m happy again.&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/pelican.png&quot; /&gt;
&lt;p&gt;Pelican is a static blog generator, as you may have heard. So &lt;strong&gt;one big advantage&lt;/strong&gt; is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;You can host it for free, or close to free on any number of free or cheap static website hosting services! (I&amp;#8217;m using GitHub Pages)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot; id=&quot;other-advantages&quot;&gt;
&lt;h2&gt;Other advantages&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;It does feeds right (I need 3 &amp;#8220;full body&amp;#8221; feeds for: Mozilla, Plone, Python) &lt;a class=&quot;footnote-reference&quot; href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s fun to configure (edit pelicanconf.py or publishconf.py).&lt;/li&gt;
&lt;li&gt;The &amp;#8220;cool kids&amp;#8221; use it: e.g. Tarek Ziadé, Kenneth Reitz, Daniel Greenfeld, many others.&lt;/li&gt;
&lt;li&gt;It grows with you: this is huge. You can start using it and feel comfortable right away, but there is always more to learn. This is how all software should be. Unfortunately, it&amp;#8217;s tough to get it right (I think this is formally called UX).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;some-disadvantages&quot;&gt;
&lt;h2&gt;Some disadvantages&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Don&amp;#8217;t like typing in the terminal? Pelican is not for you.&lt;/li&gt;
&lt;li&gt;No &amp;#8220;nested&amp;#8221; entries e.g. 2012/09/21/entry.html. I don&amp;#8217;t know if there is a formal name for this feature, but I miss it (if for no other reason than &amp;#8220;cool URLS never change&amp;#8221; i.e. I&amp;#8217;ve broken links with this move.)&lt;/li&gt;
&lt;li&gt;The pelican-import has some bugs, so I&amp;#8217;m doing a lot of manual cleanup (I don&amp;#8217;t mind this though.)&lt;/li&gt;
&lt;li&gt;Tags are categories and categories are tags (or something). I had to convert all my categories to tags, and then turn on tag feeds and turn off category feeds. Category feeds are on by default and tag feeds are off by default. Also ATOM is on and RSS is off, if that is of interest to you. (Since this is really just configuration change and not a disadvantage per sé, it probably belongs more in the next section where I discuss my setup.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are curious about my setup, here are the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;setup&quot;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Getting started with Pelican was easy, basically:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv .
$ bin/pip install pelican BeautifulSoup Markdown
$ bin/pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At this point, after I answer the quickstart questions I:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ source bin/activate
$ make html
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now the content is ready to host (which for me just involves a git push).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;tweaks&quot;&gt;
&lt;h2&gt;Tweaks&lt;/h2&gt;
&lt;p&gt;A few things were tricky.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I wanted to host my articles at the top level of the repo for serving on GitHub Pages, so I modified the Makefile to make it so &lt;a class=&quot;footnote-reference&quot; href=&quot;#id4&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Categories control what links are available in the header, so I disabled them all but one called &amp;#8220;Blog&amp;#8221;. Not ideal, but it works.&lt;/li&gt;
&lt;li&gt;The &amp;#8220;social&amp;#8221; links, and my disqus and analytics API keys were all a pleasure to configure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;workflow&quot;&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;Now I write articles in restructured text in the &lt;cite&gt;content/&lt;/cite&gt; directory and publish them like so:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make publish; git commit -a -m &amp;quot;Publish&amp;quot;; git push
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All the details are here if you&amp;#8217;d like to take a look:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet.github.com/commits/master&quot;&gt;https://github.com/ACLARKNET/aclarknet.github.com/commits/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comments from more knowledgable Pelican users welcome. Like this article? Tip me on Gittip!&lt;/p&gt;
&lt;iframe style=&quot;border: 0; margin: 0; padding: 0;&quot;
    src=&quot;https://www.gittip.com/aclark4life/widget.html&quot;
    width=&quot;48pt&quot; height=&quot;20pt&quot;&gt;&lt;/iframe&gt;&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id3&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is actually my first &amp;#8220;test&amp;#8221; post with Pelican so I will get a chance to see how the feeds perform. But they looked good in testing.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id4&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I think I broke &amp;#8220;make html&amp;#8221;, actually. Primarily I just needed to make it not &amp;#8220;clean&amp;#8221; the entire repo.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">pythonpackages.com: pyformance 0.2</title>
    <id>http://blog.aclark.net/2012/08/13/pythonpackages-com-pyformance-0-2/</id>
    <updated>2012-08-13T00:00:00Z</updated>
    <published>2012-08-13T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/08/13/pythonpackages-com-pyformance-0-2/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pythonpackages-com-pyformance-0-2&quot;&gt;

&lt;p&gt;&lt;strong&gt;pythonpackages.com helps Python programmers package and release their software with just a few clicks.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;pyformance-0-2&quot;&gt;
&lt;h2&gt;pyformance 0.2&lt;/h2&gt;
&lt;p&gt;pythonpackages.com recently processed it&amp;#8217;s first official release via the &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/pythonpackagescom-new-github-service-quotgit-push-to-releasequot.html&quot;&gt;new GitHub Service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As such, we are celebrating the release of &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/omergertel/pyformance&quot;&gt;pyformance&lt;/a&gt; 0.2! According to the author &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/omergertel&quot;&gt;Omer Gertel&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;It&amp;#39;s a straight forward port of Coda Hale&amp;#39;s fantastic metrics
package (originally for java). I don&amp;#39;t have all of it ported yet,
and it&amp;#39;s not tested as much as it should be, but it&amp;#39;s a good start.

(BTW, if you do blog about PyFormance, you may also want to mention
this talk by Coda Hale about metrics: http://www.youtube.com/watch?v=czes-oa0yik
He explains some of the math behind the package.)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Done! Thanks Omer for using our service. Check out pyformance on GitHub:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/omergertel/pyformance&quot;&gt;https://github.com/omergertel/pyformance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the &lt;a class=&quot;reference external&quot; href=&quot;http://www.youtube.com/watch?v=czes-oa0yik&quot;&gt;talk by Coda Hale&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pythonpackages.com: New GitHub Service - Push to Release</title>
    <id>http://blog.aclark.net/2012/08/10/pythonpackages-com-new-github-service-git-push-to-release/</id>
    <updated>2012-08-10T00:00:00Z</updated>
    <published>2012-08-10T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/08/10/pythonpackages-com-new-github-service-git-push-to-release/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pythonpackages-com-new-github-service-push-to-release&quot;&gt;

&lt;p&gt;&lt;strong&gt;pythonpackages.com helps Python programmers package and release their software with just a few clicks.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;pythonpackages-github-service&quot;&gt;
&lt;h2&gt;PythonPackages GitHub Service&lt;/h2&gt;
&lt;p&gt;There is a new &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/github/github-services&quot;&gt;GitHub Service&lt;/a&gt; available for pythonpackages.com that&amp;nbsp;allows you to release Python packages from GitHub to the Python Package Index, simply by pushing a commit message that begins with &amp;#8220;Release&amp;#8221; e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -a -m &amp;quot;Release 1.0&amp;quot;; git push
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(The release creates a tag with the appropriate version number, extracted from setup.py) To use the service, please follow the instructions below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;instructions&quot;&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Sign up for the pythonpackages.com beta: &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/signup&quot;&gt;http://pythonpackages.com/signup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Follow the &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/introduction.html&quot;&gt;Introduction&lt;/a&gt; instructions.&lt;/li&gt;
&lt;li&gt;On the Python Package Index, authorize pythonpackages.com to act on your behalf, as explained here:&amp;nbsp;&lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages.html&quot;&gt;http://blog.aclark.net/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages.html&lt;/a&gt; (&lt;strong&gt;pythonpackages.com -&amp;gt; Dashboard -&amp;gt; Manage accounts -&amp;gt; PyPI -&amp;gt; Authorize&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;On GitHub, configure the PythonPackages service to be Active on any repository that contains a Python package you want to release (&lt;strong&gt;Repo -&amp;gt; Admin -&amp;gt; Service Hooks -&amp;gt; PythonPackages -&amp;gt; [*] Active&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can git push to release! If you have any trouble, please &lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new&quot;&gt;open a ticket&lt;/a&gt;. These instructions will live permanently here:&amp;nbsp;&lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/github-service.html&quot;&gt;http://docs.pythonpackages.com/en/latest/github-service.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">pythonpackages.com: Using PyPI's OAuth1 support to register and upload packages</title>
    <id>http://blog.aclark.net/2012/08/07/pythonpackages-com-using-pypis-oauth1-support-to-register-and-upload-packages/</id>
    <updated>2012-08-07T00:00:00Z</updated>
    <published>2012-08-07T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/08/07/pythonpackages-com-using-pypis-oauth1-support-to-register-and-upload-packages/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pythonpackages-com-using-pypi-s-oauth1-support-to-register-and-upload-packages&quot;&gt;

&lt;p&gt;&lt;strong&gt;TL;DR PyPI has OAuth1 support; pythonpackages.com uses it to send your GitHub repos to PyPI.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks in very large part to &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/r1chardj0n3s&quot;&gt;Richard Jones&lt;/a&gt;, the Python Package Index now has support for registering and uploading packages via OAuth1. And using his &lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/0d46c48b230e61e18479&quot;&gt;sample code&lt;/a&gt; I was able to take advantage of it on pythonpackages.com. The result is a fairly &lt;strong&gt;elegant approach to releasing packages&lt;/strong&gt; sans dirty hacks (I had been asking users for their username and password, then storing them in an encrypted session cookies so I could send them to PyPI.) Here&amp;#8217;s how it works now.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;sign-in-with-github&quot;&gt;
&lt;h2&gt;Sign In With GitHub&lt;/h2&gt;
&lt;p&gt;GitHub provides an easy way to let folks sign in to pythonpackages.com with their APIv3. I was able to code the OAuth dance using only the requests library (HT Kenneth Reitz). This was working as of late 2011.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;select-a-package&quot;&gt;
&lt;h2&gt;Select a package&lt;/h2&gt;
&lt;p&gt;Once you are signed in, you can select a package. Selected packages can perform various actions, one of which is &lt;strong&gt;Tag and Release&lt;/strong&gt;.  As soon as you select Tag and Release, you are required to authenticate with PyPI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;strikeout-enter-your-pypi-credentials&quot;&gt;
&lt;h2&gt;[STRIKEOUT:Enter your PyPI credentials]&lt;/h2&gt;
&lt;p&gt;In order to get the beta out the door, a dirty hack was added to allow users to enter their PyPI credentials. Credentials were saved in an encrypted session cookie, then written out to .pypirc before calling `python setup.py upload`. Really terrible. This was shipped in early July 2012 and is thankfully no longer necessary (though it is &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/security.html#github-credentials&quot;&gt;still necessary to push the initial commit to GitHub.&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;authorize-pythonpackages-com&quot;&gt;
&lt;h2&gt;Authorize pythonpackages.com&lt;/h2&gt;
&lt;p&gt;Now authorization can happen elegantly via OAuth1. First, sign in to PyPI. Then authorize pythonpackages.com to act on your behalf. Lastly, profit (register and upload your package).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;register-and-upload-your-package&quot;&gt;
&lt;h2&gt;Register and upload your package&lt;/h2&gt;
&lt;p&gt;At this point you are free to tag and release. I am really excited about this. I began fantasizing about it almost a year ago and after several false starts (pypissh, openid, avoidance) it is now a reality. If you have a minute, please &lt;a class=&quot;reference external&quot; href=&quot;https://pythonpackages.com/signup&quot;&gt;give it a try&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Building Windows Installers in the Cloud</title>
    <id>http://blog.aclark.net/2012/08/01/building-windows-installers-in-the-cloud/</id>
    <updated>2012-08-01T00:00:00Z</updated>
    <published>2012-08-01T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/08/01/building-windows-installers-in-the-cloud/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;building-windows-installers-in-the-cloud&quot;&gt;

&lt;p&gt;&lt;strong&gt;With pythonpackages.com I want to solve real problems for people today.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So here&amp;#8217;s a proof of concept for building Windows installers quickly and easily &amp;#8220;in the cloud&amp;#8221; (i.e. without a Windows machine local). This article is mostly about the back end, as the front end is &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/introduction.html&quot;&gt;already documented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TL;DR: We&amp;#8217;re moving from proof-of-concept phase to useful-service phase. If you find the demo interesting and want to help build something great, please consider purchasing one of&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/plans&quot;&gt;our current plans&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;step-1-to-the-clouds&quot;&gt;
&lt;h2&gt;Step 1: To The Clouds&lt;/h2&gt;
&lt;p&gt;For the purpose of the demo, I booted up a Windows server on Rackspace Cloud and started installing things. On the short list of things to install was:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Python 2.7 from python.org.&lt;/li&gt;
&lt;li&gt;GitHub for Windows from github.com (mainly for git.)&lt;/li&gt;
&lt;li&gt;pythonpackages.com from bitbucket.org (free private repos!)&lt;/li&gt;
&lt;li&gt;Microsoft compiler (free version, make sure to use the same one used to compile Python.)&lt;/li&gt;
&lt;li&gt;Redis for Windows (Hell froze over, you can find this in Microsoft&amp;#8217;s GitHub account: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/MSOpenTech/Redis&quot;&gt;https://github.com/MSOpenTech/Redis&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Vim.exe (which I copy to vi.exe because I hate typing vim.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once I had all these things in place, I was able to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Install pythonpackages.com (pip install -r requirements.txt.)&lt;/li&gt;
&lt;li&gt;Compile and run Redis (Several projects bundled together in Visual
Studio is apparently called a &amp;#8220;solution&amp;#8221;, how quaint!)&lt;/li&gt;
&lt;li&gt;Start the site.&lt;/li&gt;
&lt;li&gt;Start testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-2-fix-all-the-bugs&quot;&gt;
&lt;h2&gt;Step 2: Fix all the bugs&lt;/h2&gt;
&lt;p&gt;This step involved a lot of cursing:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Backslashes.&lt;/li&gt;
&lt;li&gt;Lack of vi key bindings.&lt;/li&gt;
&lt;li&gt;Other Windows-isms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I also praised my &lt;a class=&quot;reference external&quot; href=&quot;http://cord.sourceforge.net/&quot;&gt;CoRD Remote Desktop Client&lt;/a&gt; because it worked awesome. Anyway, the bugs/issues I fixed (and didn&amp;#8217;t fix) were roughly:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Create new application on GitHub and configured keys accordingly.&lt;/li&gt;
&lt;li&gt;Switch Stripe keys to testing.&lt;/li&gt;
&lt;li&gt;Fix Python paths and other trivial changes, so the application can run `python setup.py bdist_wininst`.&lt;/li&gt;
&lt;li&gt;JavaScript is completely broken for some reason I&amp;#8217;ve yet to determine (haven&amp;#8217;t looked yet, but guessing Windows path related).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-3-profit&quot;&gt;
&lt;h2&gt;Step 3: Profit!&lt;/h2&gt;
&lt;p&gt;I have to admit: I was giddy when it started working, and I was able to create a Windows Installer for Pillow (Python Imaging Library fork). I was even happier when I ran the installer and it worked. That&amp;#8217;s it. Next I hope to &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/plans&quot;&gt;get some customers&lt;/a&gt; so I can keep the Windows box running, and make it available to the public.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;big-picture&quot;&gt;
&lt;h2&gt;Big Picture&lt;/h2&gt;
&lt;p&gt;In case you are interested, the &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/roadmap.html&quot;&gt;roadmap for beta Q3 is here&lt;/a&gt;. I will also mention that I recently used &lt;a class=&quot;reference external&quot; href=&quot;http://dia-installer.de/&quot;&gt;Dia&lt;/a&gt; (&amp;lt;3) to create this info-graphic, in hopes of better communicating what I&amp;#8217;m trying to build. Check it out!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow Moved to python-imaging Organization</title>
    <id>http://blog.aclark.net/2012/07/25/pillow-moved-to-python-imaging-organization/</id>
    <updated>2012-07-25T00:00:00Z</updated>
    <published>2012-07-25T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/07/25/pillow-moved-to-python-imaging-organization/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-moved-to-python-imaging-organization&quot;&gt;

&lt;p&gt;&lt;strong&gt;On 7/30/2010 Pillow, the friendly PIL fork, was released.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since then, there have been a number of releases:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity Pillow
           Pillow-1.0.tar.gz     2010-07-31      800
           Pillow-1.1.tar.gz     2010-08-01      652
           Pillow-1.2.tar.gz     2010-08-02    1,987
              Pillow-1.3.zip     2010-11-28      589
              Pillow-1.4.zip     2010-11-28      587
              Pillow-1.5.zip     2010-11-28      876
              Pillow-1.6.zip     2010-12-01    6,706
            Pillow-1.7.0.zip     2011-05-28      678
            Pillow-1.7.1.zip     2011-05-31      663
            Pillow-1.7.2.zip     2011-06-02    3,460
            Pillow-1.7.3.zip     2011-07-21      569
            Pillow-1.7.4.zip     2011-07-21    4,156
            Pillow-1.7.5.zip     2011-09-07   17,429
Pillow-1.7.5-py2.7-win32.egg     2011-09-08      917
Pillow-1.7.5-py2.6-win32.egg     2011-09-08      918
Pillow-1.7.5-py2.5-win32.egg     2011-09-08      516
Pillow-1.7.5-py2.4-win32.egg     2011-09-08      477
            Pillow-1.7.6.zip     2012-01-21    7,401
         Pillow-1.7.6.tar.gz     2012-01-21   10,540
Pillow-1.7.6-py2.7-win32.egg     2012-01-21      632
Pillow-1.7.6-py2.6-win32.egg     2012-01-21      439
Pillow-1.7.6-py2.5-win32.egg     2012-01-21      332
Pillow-1.7.6-py2.4-win32.egg     2012-01-21      336
            Pillow-1.7.7.zip     2012-04-05   28,704
Pillow-1.7.7-py2.7-win32.egg     2012-04-09      716
Pillow-1.7.7-py2.6-win32.egg     2012-04-09      354
Pillow-1.7.7-py2.5-win32.egg     2012-04-09      198
Pillow-1.7.7-py2.4-win32.egg     2012-04-09      201
----------------------------------------------------
Pillow has been downloaded 91,833 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Originally, I thought if the fork went nowhere, at least the Plone
community could maintain it for its own needs. However since then, a
number of folks outside the Plone community have taken an interest, so
I&amp;#8217;ve decided to move the repository from the &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/collective&quot;&gt;Plone collective&lt;/a&gt; to a
new organization called &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/python-imaging&quot;&gt;python-imaging&lt;/a&gt;. With this change, I hope to
gather folks to help develop a Python 3-compat release before PyCon
2013. (There are various PIL forks with Python 3-compat already in
existence, as well as the official PIL 1.2-dev tarball available from
bitbucket, which has some Python 3-compat if I understand correctly.)
The new home for Pillow is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-imaging/Pillow&quot;&gt;https://github.com/python-imaging/Pillow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">pythonpackages.com beta launch</title>
    <id>http://blog.aclark.net/2012/07/04/pythonpackages-com-beta-launch/</id>
    <updated>2012-07-04T00:00:00Z</updated>
    <published>2012-07-04T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/07/04/pythonpackages-com-beta-launch/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pythonpackages-com-beta-launch&quot;&gt;

&lt;p&gt;&lt;strong&gt;After 9 months of development, pythonpackages.com has grand-ceremoniously flipped the switch from alpha to beta. Here is an overview of the beta release features.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;killer-github-integration&quot;&gt;
&lt;h2&gt;Killer GitHub integration&lt;/h2&gt;
&lt;p&gt;The workflow you may now enjoy is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Login with your GitHub account&lt;/li&gt;
&lt;li&gt;Select a repository that contains a Python package&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;one-click-release&quot;&gt;
&lt;h2&gt;One-click release&lt;/h2&gt;
&lt;p&gt;More sweet workflow:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Click a button to release to a test index, PyPI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;create-packages-through-the-web-with-pastescript&quot;&gt;
&lt;h2&gt;Create packages through-the-web (with PasteScript)&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s a lot of room for growth, but this feature is exciting even in its simplest form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;dashboard-o-releases&quot;&gt;
&lt;h2&gt;Dashboard o releases&lt;/h2&gt;
&lt;p&gt;pythonpackages.com keeps track of your releases, using the same technology that powers the alpha release &amp;#8220;package featuring&amp;#8221; feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;github-organization-support&quot;&gt;
&lt;h2&gt;GitHub Organization support&lt;/h2&gt;
&lt;p&gt;But wait, there&amp;#8217;s more. Paid plans (which have not been deployed yet) get access to GitHub organizations, whose repositories can then be &amp;#8220;slotted&amp;#8221; like normal. If you&amp;#8217;d like to get started using the site, check out the &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/crashcourse.html&quot;&gt;crash course&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">A Simple Printer of Nested Lists</title>
    <id>http://blog.aclark.net/2012/05/23/a-simple-printer-of-nested-lists/</id>
    <updated>2012-05-23T00:00:00Z</updated>
    <published>2012-05-23T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/05/23/a-simple-printer-of-nested-lists/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;a-simple-printer-of-nested-lists&quot;&gt;

&lt;p&gt;&lt;strong&gt;A rant&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Do you ever get the urge to kill? How many of us cringe whenever we see these words? Lately I&amp;#8217;ve been spending a lot of time developing &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt;, (now running on heroku!) during which time I see a lot of these kinds of packages being released.&lt;/p&gt;
&lt;p&gt;I kid about the killing part, but seriously: &lt;strong&gt;this is a problem&lt;/strong&gt;.  Fortunately for us, our PyPI overloads see fit to occasionally remove these packages, and for this I am grateful.&lt;/p&gt;
&lt;p&gt;I mean it makes me &lt;em&gt;dance-around-the-room&lt;/em&gt; happy! Ahem. But are they really all gone? Close enough. A quick &lt;a class=&quot;reference external&quot; href=&quot;https://crate.io/?q=a+simple+printer+of+nested+lists&quot;&gt;crate.io search&lt;/a&gt; now shows only 2 packages instead of 4 pages of results.&lt;/p&gt;
&lt;p&gt;Hallelujah! But is this the best we can do? I know that some well-meaning person wrote a book containing the example that is leading some poor, misguided souls to spam PyPI (if only the author listed the test site instead: &lt;a class=&quot;reference external&quot; href=&quot;http://testpypi.python.org/pypi&quot;&gt;http://testpypi.python.org/pypi&lt;/a&gt;). And I have to assume that this was just some terrible mistake. But do we all have to live with this mistake?&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m asking because I honestly don&amp;#8217;t know the answer. I remember when I started pythonpackages.com, the &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/package/deliverance&quot;&gt;Deliverance&lt;/a&gt; documentation was being updated something like every 5 minutes (kidding again, but it was frequent enough to be annoying). After grousing about it in public, it stopped happening!&lt;/p&gt;
&lt;p&gt;I wonder if some good natured grousing about our friends (read: enemies) the &lt;em&gt;simple printers of nested lists&lt;/em&gt; will do the same?&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Test-plone tmp</title>
    <id>http://blog.aclark.net/2012/04/04/test-plone-tmp/</id>
    <updated>2012-04-04T00:00:00Z</updated>
    <published>2012-04-04T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/04/04/test-plone-tmp/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;test-plone-tmp&quot;&gt;

&lt;p&gt;&lt;strong&gt;Since Day 1 with Plone circa 2004, I&amp;#8217;ve always taken pride in and greatly enjoyed refining my development environment.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s been stable for a while now (&amp;gt; 1 year or so) so I thought I&amp;#8217;d share.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;operating-system&quot;&gt;
&lt;h2&gt;Operating system&lt;/h2&gt;
&lt;p&gt;Mac OS X Latest (Lion, at the time of this writing)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;terminal&quot;&gt;
&lt;h2&gt;Terminal&lt;/h2&gt;
&lt;p&gt;Mac OS X Terminal&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;editor&quot;&gt;
&lt;h2&gt;Editor&lt;/h2&gt;
&lt;p&gt;Vim&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;python&quot;&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;Yes. All versions, via the collective Python buildout:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/buildout.python&quot;&gt;https://github.com/collective/buildout.python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;plone&quot;&gt;
&lt;h2&gt;Plone&lt;/h2&gt;
&lt;p&gt;Yes. All versions, via pythonpackages.com:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://docs.pythonpackages.com/en/latest/advanced.html&quot;&gt;http://docs.pythonpackages.com/en/latest/advanced.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;additional-tools&quot;&gt;
&lt;h2&gt;Additional tools&lt;/h2&gt;
&lt;p&gt;A &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/binfiles/blob/master/test-plone&quot;&gt;shell script to run virtualenv, buildout, etc&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[bash] #!/bin/sh if ! [ -n &amp;quot;$1&amp;quot; ] then echo &amp;quot;Usage:nn$0 &amp;lt;dir&amp;gt;n&amp;quot; exit 1
fi if ! [ -d $1 ] then mkdir $1 fi cd $1 virtualenv-2.7 . bin/pip
install zc.buildout bin/buildout init cat &amp;lt;&amp;lt; EOF &amp;gt; buildout.cfg
[buildout] extends =
http://build.pythonpackages.com/buildout/plone/4.2.x-dev EOF
bin/buildout bin/plone start sleep 4 echo &amp;quot;Adding Plone site...&amp;quot; curl -d
form.submitted:boolean=&amp;quot;True&amp;quot;
http://admin:admin@localhost:8080/@@plone-addsite?site\_id=Plone
bin/plone stop bin/plone fg [/bash]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/binfiles/blob/master/tmp&quot;&gt;Python script to create temporary directories&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[python] #!/usr/bin/env python

import os import tempfile print os.path.abspath(tempfile.mkdtemp())
[/python]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A default buildout config file:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
eggs-directory = /Users/aclark/Developer/eggs-directory
download-cache = /Users/aclark/Developer/download-cache
extends-cache = /Users/aclark/Developer/extends-cache
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;workflow&quot;&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;My typical workflow looks like this:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Hang in #plone on irc.freenode.net and wait for questions&lt;/li&gt;
&lt;li&gt;Hear question and get inspired to run Plone&lt;/li&gt;
&lt;li&gt;Run: &lt;strong&gt;$ test-plone `tmp`&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/2304317&quot;&gt;~ 1 minute later&lt;/a&gt; I&amp;#8217;m browsing &lt;strong&gt;http://localhost:8080/Plone&lt;/strong&gt; and can install add-ons, check ZMI settings, etc.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">New Vanity Release</title>
    <id>http://blog.aclark.net/2012/01/30/new-vanity-release/</id>
    <updated>2012-01-30T00:00:00Z</updated>
    <published>2012-01-30T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/01/30/new-vanity-release/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-vanity-release&quot;&gt;

&lt;p&gt;&lt;strong&gt;This release features the ability to display per package download statistics.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With all the Python &lt;a class=&quot;reference external&quot; href=&quot;http://crate.io/&quot;&gt;stats&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://python3wos.appspot.com/&quot;&gt;goodness&lt;/a&gt; going on recently, I got inspired to make a new &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/vanity&quot;&gt;vanity&lt;/a&gt; release. This release features the ability to display per package download statistics via the `-v` or `&amp;#8211;verbose` command line argument.&lt;/p&gt;
&lt;p&gt;Here are some of my favorite results.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;vanity&quot;&gt;
&lt;h2&gt;Vanity&lt;/h2&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity vanity -v
     vanity-1.0.zip     2011-04-14      352
   vanity-1.1.0.zip     2011-10-26      139
   vanity-1.1.1.zip     2011-10-28      114
   vanity-1.1.2.zip     2011-10-28      145
vanity-1.2.0.tar.gz     2012-01-30        0
-------------------------------------------
Package `vanity` has been downloaded 750 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;django&quot;&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity django -v
Django-1.1.3.tar.gz     2010-12-23    2,618
Django-1.1.4.tar.gz     2011-02-09    4,476
  Django-1.2.tar.gz     2010-05-17   15,876
Django-1.2.1.tar.gz     2010-05-24   65,120
Django-1.2.2.tar.gz     2010-09-09    2,467
Django-1.2.3.tar.gz     2010-09-11   73,984
Django-1.2.4.tar.gz     2010-12-23   49,904
Django-1.2.5.tar.gz     2011-02-09   63,977
Django-1.2.6.tar.gz     2011-09-10      427
Django-1.2.7.tar.gz     2011-09-11    6,825
  Django-1.3.tar.gz     2011-03-23  238,504
Django-1.3.1.tar.gz     2011-09-10  176,054
-------------------------------------------
Package `Django` has been downloaded 700,232 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;plone&quot;&gt;
&lt;h2&gt;Plone&lt;/h2&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity plone -v
     Plone-3.2.zip     2008-12-31    1,690
   Plone-3.2.1.zip     2009-02-04    2,466
   Plone-3.2.2.zip     2009-03-03    4,893
   Plone-3.2.3.zip     2009-06-20    2,731
   Plone-3.2a1.zip     2008-10-10      976
  Plone-3.2rc1.zip     2008-12-15      758
     Plone-3.3.zip     2009-08-19    4,611
   Plone-3.3.1.zip     2009-09-09    4,148
Plone-3.3.2.tar.gz     2009-11-03    3,043
   Plone-3.3.3.zip     2009-12-08    1,733
   Plone-3.3.4.zip     2010-01-14    4,906
   Plone-3.3.5.zip     2010-03-03   12,131
Plone-3.3.6.tar.gz     2011-07-19      787
   Plone-3.3b1.zip     2009-03-12      940
  Plone-3.3rc1.zip     2009-03-30      743
  Plone-3.3rc2.zip     2009-04-05    1,822
  Plone-3.3rc3.zip     2009-05-23    2,036
  Plone-3.3rc4.zip     2009-07-07    2,163
  Plone-3.3rc5.zip     2009-08-01    1,211
     Plone-4.0.zip     2010-08-30    3,659
   Plone-4.0.1.zip     2010-10-04    4,224
   Plone-4.0.2.zip     2010-11-22    4,022
   Plone-4.0.3.zip     2011-01-21    3,339
   Plone-4.0.4.zip     2011-03-01    2,711
   Plone-4.0.5.zip     2011-04-09    3,152
   Plone-4.0.6.zip     2011-05-22    1,469
   Plone-4.0.7.zip     2011-06-06    2,192
   Plone-4.0.8.zip     2011-07-17      509
   Plone-4.0.9.zip     2011-07-29      958
  Plone-4.0.10.zip     2011-10-12      495
   Plone-4.0a1.zip     2009-11-19      946
   Plone-4.0a2.zip     2009-12-04      921
   Plone-4.0a3.zip     2009-12-21    1,272
   Plone-4.0a4.zip     2010-02-01    1,121
   Plone-4.0a5.zip     2010-02-19      850
   Plone-4.0b1.zip     2010-03-09    1,308
   Plone-4.0b2.zip     2010-04-10    1,028
   Plone-4.0b3.zip     2010-05-04    1,722
   Plone-4.0b4.zip     2010-06-13    1,642
Plone-4.0b5.tar.gz     2010-07-08    1,995
  Plone-4.0rc1.zip     2010-08-06    1,598
     Plone-4.1.zip     2011-07-17    4,479
Plone-4.1.1.tar.gz     2011-09-21      429
Plone-4.1.2.tar.gz     2011-10-08    2,187
Plone-4.1.3.tar.gz     2011-11-29    1,883
   Plone-4.1a1.zip     2011-01-21      699
   Plone-4.1a2.zip     2011-02-11      451
   Plone-4.1a3.zip     2011-02-15      680
   Plone-4.1b1.zip     2011-03-08      958
   Plone-4.1b2.zip     2011-04-09    1,040
  Plone-4.1rc2.zip     2011-05-22      797
  Plone-4.1rc3.zip     2011-06-06    1,329
   Plone-4.2a1.zip     2011-08-10      521
   Plone-4.2a2.zip     2011-09-16      884
Plone-4.2b1.tar.gz     2011-12-06      619
------------------------------------------
Package `Plone` has been downloaded 111,877 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;pyramid&quot;&gt;
&lt;h2&gt;Pyramid&lt;/h2&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity pyramid -v
   pyramid-1.0.tar.gz     2011-01-31   24,055
 pyramid-1.0.1.tar.gz     2011-08-13      460
 pyramid-1.0.2.tar.gz     2011-12-15      185
 pyramid-1.0a1.tar.gz     2010-11-05    1,128
 pyramid-1.0a2.tar.gz     2010-11-09      952
 pyramid-1.0a3.tar.gz     2010-11-16      803
 pyramid-1.0a4.tar.gz     2010-11-21    1,732
 pyramid-1.0a5.tar.gz     2010-12-15      639
 pyramid-1.0a6.tar.gz     2010-12-16      834
 pyramid-1.0a7.tar.gz     2010-12-20      912
 pyramid-1.0a8.tar.gz     2010-12-27    1,233
 pyramid-1.0a9.tar.gz     2011-01-08    1,313
pyramid-1.0a10.tar.gz     2011-01-18      960
 pyramid-1.0b1.tar.gz     2011-01-22      871
 pyramid-1.0b2.tar.gz     2011-01-25    1,003
 pyramid-1.0b3.tar.gz     2011-01-28      816
   pyramid-1.1.tar.gz     2011-07-22    5,674
 pyramid-1.1.1.tar.gz     2011-08-13    1,057
 pyramid-1.1.2.tar.gz     2011-08-17    1,560
 pyramid-1.1.3.tar.gz     2011-12-15      160
 pyramid-1.1a1.tar.gz     2011-06-20    1,146
 pyramid-1.1a2.tar.gz     2011-06-23    1,003
 pyramid-1.1a3.tar.gz     2011-06-26    1,252
 pyramid-1.1a4.tar.gz     2011-07-01    1,517
 pyramid-1.1b1.tar.gz     2011-07-10      981
 pyramid-1.1b2.tar.gz     2011-07-13      844
 pyramid-1.1b3.tar.gz     2011-07-15      742
 pyramid-1.1b4.tar.gz     2011-07-18    1,094
   pyramid-1.2.tar.gz     2011-09-13    6,450
 pyramid-1.2.1.tar.gz     2011-09-28   10,357
 pyramid-1.2.2.tar.gz     2011-11-20      322
 pyramid-1.2.3.tar.gz     2011-11-21    3,078
 pyramid-1.2.4.tar.gz     2011-12-06    1,193
 pyramid-1.2.5.tar.gz     2011-12-15      555
 pyramid-1.2.6.tar.gz     2012-01-05      514
 pyramid-1.2.7.tar.gz     2012-01-20      472
 pyramid-1.2a1.tar.gz     2011-08-24      907
 pyramid-1.2a2.tar.gz     2011-08-27      696
 pyramid-1.2a3.tar.gz     2011-08-29    3,268
 pyramid-1.2a4.tar.gz     2011-09-02      593
 pyramid-1.2a5.tar.gz     2011-09-04      840
 pyramid-1.2a6.tar.gz     2011-09-07      602
 pyramid-1.2b1.tar.gz     2011-09-08      493
 pyramid-1.2b2.tar.gz     2011-09-08      700
 pyramid-1.2b3.tar.gz     2011-09-11      674
 pyramid-1.3a1.tar.gz     2011-12-09    1,264
 pyramid-1.3a2.tar.gz     2011-12-14    1,641
 pyramid-1.3a3.tar.gz     2011-12-21    2,716
 pyramid-1.3a4.tar.gz     2012-01-05      675
 pyramid-1.3a5.tar.gz     2012-01-09    2,369
 pyramid-1.3a6.tar.gz     2012-01-20    1,917
---------------------------------------------
Package `pyramid` has been downloaded 97,222 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Enjoy the new release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Introducing pythonpackages.com</title>
    <id>http://blog.aclark.net/2011/11/29/introducing-pythonpackages-com/</id>
    <updated>2011-11-29T00:00:00Z</updated>
    <published>2011-11-29T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/11/29/introducing-pythonpackages-com/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;introducing-pythonpackages-com&quot;&gt;

&lt;p&gt;&lt;strong&gt;The website for Python egoists™&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have this overwhelming desire to know how many times my favorite Python packages have been downloaded. Don&amp;#8217;t you? If so, look no further than &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;count-downloads&quot;&gt;
&lt;h2&gt;Count downloads&lt;/h2&gt;
&lt;p&gt;Where you can enter a package like &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/django&quot;&gt;Django&lt;/a&gt; and find out the number of downloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;count-favorites&quot;&gt;
&lt;h2&gt;Count favorites&lt;/h2&gt;
&lt;p&gt;Or click on &lt;strong&gt;Count favorites&lt;/strong&gt; to reveal how many times it has been favorited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;find-trash&quot;&gt;
&lt;h2&gt;Find trash&lt;/h2&gt;
&lt;p&gt;Or even poke some good natured fun at it, for its &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/trash/django&quot;&gt;failure to provide adequate package metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;discuss-packages&quot;&gt;
&lt;h2&gt;Discuss packages&lt;/h2&gt;
&lt;p&gt;You can even &lt;em&gt;discuss&lt;/em&gt;packages on &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;recent-activity&quot;&gt;
&lt;h2&gt;Recent activity&lt;/h2&gt;
&lt;p&gt;But wait there is more! You can also browse the &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/pypi&quot;&gt;latest changelog activity&lt;/a&gt; from PyPi right on the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;package-info&quot;&gt;
&lt;h2&gt;Package info&lt;/h2&gt;
&lt;p&gt;Lastly, if you get bored counting package downloads and favorites you can look at the &lt;em&gt;actual&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/django&quot;&gt;package metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Sound interesting? Or utterly silly, perhaps? I think &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt; is the best of both. It started off as a front end to the command line utility &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/vanity&quot;&gt;vanity&lt;/a&gt;, but has taken on a life of it&amp;#8217;s own.&lt;/p&gt;
&lt;p&gt;After a small run on Python reddit and Hacker News, I&amp;#8217;m looking forward to seeing what Python Planet folks think. So please check out &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt; and let me know. You can leave comments about the site here.&lt;/p&gt;
&lt;p&gt;Or open a new ticket here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new&quot;&gt;https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">New Year's Python Meme 2011</title>
    <id>http://blog.aclark.net/2011/12/21/new-years-python-meme-2011/</id>
    <updated>2011-11-21T00:00:00Z</updated>
    <published>2011-11-21T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/12/21/new-years-python-meme-2011/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-year-s-python-meme-2011&quot;&gt;

&lt;p&gt;&lt;strong&gt;My response&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My response to &lt;a class=&quot;reference external&quot; href=&quot;http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/&quot;&gt;http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was fun &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2009/12/31/new-years-python-meme/&quot;&gt;answering in 2009&lt;/a&gt;, so I thought I&amp;#8217;d play again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s the coolest Python application, framework or library you have discovered in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.pylonsproject.org/&quot;&gt;Pyramid&lt;/a&gt;. In early 2011 I released &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/vanity&quot;&gt;vanity&lt;/a&gt;, which later became &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt;(more or less). I used building the site as an excuse to learn Pyramid, and it was well worth it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What new programming technique did you learn in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I learned to &lt;strong&gt;not&lt;/strong&gt; reinvent the wheel, and to collaborate with others on solving hard problems (which in and of itself is hard). Long story short, I took a little bit of heat within the Plone CMS community for creating a &amp;#8220;one off&amp;#8221; migration script:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/parse2plone&quot;&gt;http://pythonpackages.com/info/parse2plone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ve since learned my lesson and have been collaborating meaningfully with &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/#!/djay75&quot;&gt;Dylan Jay&lt;/a&gt;on the more widely-supported &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/mr.migrator&quot;&gt;mr.migrator&lt;/a&gt; and friends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s the name of the open source project you contributed to the most in 2011? What did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I contributed to the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org&quot;&gt;Plone&lt;/a&gt; project quite a bit (as I have been doing for years now), but I also fell in love with &lt;a class=&quot;reference external&quot; href=&quot;http://mozilla.org&quot;&gt;Mozilla&lt;/a&gt; (and their mission) and began working on various things, including a virtual machine to help with the development of &lt;a class=&quot;reference external&quot; href=&quot;http://support.mozilla.com&quot;&gt;support.mozilla.com&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/kitsune-vagrant&quot;&gt;https://github.com/aclark4life/kitsune-vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What was the Python blog or website you read the most in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://news.ycombinator.com/&quot;&gt;Hacker news&lt;/a&gt;. I have the start-up bug.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are the three top things you want to learn in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript, JavaScript, and JavaScript. I first heard the term 15 years ago and have been avoiding it ever since. Time to jump in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the top software, application or library you wish someone would write in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope someone (me) writes a &amp;#8220;secret&amp;#8221; feature for &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com&quot;&gt;pythonpackages.com&lt;/a&gt; and launches it in first quarter of 2012; and I hope folks find it useful.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Plone: First Class Python Citizen</title>
    <id>http://blog.aclark.net/2011/10/24/plone-first-class-python-citizen/</id>
    <updated>2011-10-24T00:00:00Z</updated>
    <published>2011-10-24T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/10/24/plone-first-class-python-citizen/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-first-class-python-citizen&quot;&gt;

&lt;p&gt;&lt;strong&gt;The Plone community and software fit nicely within the larger Python ecosystem. Here&amp;#8217;s why.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For almost as long as I have been involved in the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org&quot;&gt;Plone&lt;/a&gt; project, I&amp;#8217;ve been interested in Plone&amp;#8217;s role in the Python ecosystem. Today as I look across the current landscape, I&amp;#8217;m proud to announce a new milestone the Plone community can take pride in. But the change didn&amp;#8217;t happen overnight, so first let&amp;#8217;s take a quick look back.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;pypi-support-in-psc&quot;&gt;
&lt;h2&gt;PyPI support in PSC&lt;/h2&gt;
&lt;p&gt;Circa 2008, Tarek Ziadé and others finished the PyPI integration branch of PloneSoftwareCenter started by Sidnei Da Silva 2 years before.&lt;/p&gt;
&lt;p&gt;This was a big step towards the &amp;#8220;Pythonification&amp;#8221; of Plone, mainly because Plone packages could now be published on plone.org in the same way Python packages are published to the Python Package Index: via &amp;#8220;python setup.py upload&amp;#8221;. In fact if you are publishing Plone packages, it is recommended that you release to &lt;em&gt;both&lt;/em&gt; PyPI and plone.org simultaneously. This ensures your package is visible to the most number of potential users. And you can use &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/jarn.mkrelease&quot;&gt;mkrelease&lt;/a&gt; to automate the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;collective-docs-at-rtd&quot;&gt;
&lt;h2&gt;Collective docs at RTD&lt;/h2&gt;
&lt;p&gt;Just when you thought things couldn&amp;#8217;t get more exciting in Python land, along came &lt;a class=&quot;reference external&quot; href=&quot;http://readthedocs.org/&quot;&gt;readthedocs.org&lt;/a&gt; (a Django Dash production, IIRC). And to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/collective.developermanual/commit/4dc34d113b1a62064c83f3c431acc7d8deb42f1a&quot;&gt;join the fun in July 2011&lt;/a&gt;, I moved Mikko Ohtamaa&amp;#8217;s awesome &lt;strong&gt;Plone Community Managed Developer Manual&lt;/strong&gt; to the &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/collective&quot;&gt;Github collective&lt;/a&gt; and configured the RTD &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/blog/41-service-integration&quot;&gt;service hook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This means that whenever anyone commits a change to the developer manual, within a few minutes a new Sphinx build &lt;a class=&quot;reference external&quot; href=&quot;http://collective-docs.readthedocs.org/en/latest/index.html&quot;&gt;gets published&lt;/a&gt;. It was so easy to set this up, I wish I had done it sooner.&lt;/p&gt;
&lt;p&gt;So you can that see over the years, we have been working ourselves into a frenzy of Python goodness! And last week, it got even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;introducing-plone-packages&quot;&gt;
&lt;h2&gt;Introducing: Plone packages!&lt;/h2&gt;
&lt;p&gt;Thanks to the good folks at &lt;a class=&quot;reference external&quot; href=&quot;http://www.cartwheelweb.com/&quot;&gt;Cartwheel Web&lt;/a&gt;, makers of the fine &lt;a class=&quot;reference external&quot; href=&quot;http://opencomparison.org/&quot;&gt;Open Comparison&lt;/a&gt; service, Plone now has its very own &lt;a class=&quot;reference external&quot; href=&quot;http://plone.opencomparison.org&quot;&gt;grid comparison website&lt;/a&gt;! (&lt;a class=&quot;reference external&quot; href=&quot;http://djangopackages.com&quot;&gt;Djangopackages.com&lt;/a&gt; was first, followed by &lt;a class=&quot;reference external&quot; href=&quot;http://pyramid.opencomparison.org&quot;&gt;pyramid.opencomparison.org&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This is a site where folks can add packages hosted elsewhere (e.g. svn, github, pypi), vote on them, and add grid comparisons to compare similarly-featured add-ons, frameworks, and other related software.  Grids are the killer feature of this site, and personally I&amp;#8217;ve been waiting to use them to answer questions like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;Q: What&amp;#8217;s the best blogging add-on for Plone?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: http://plone.opencomparison.org/grids/g/weblogs/&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The content is entirely user driven (TTW only) so please head over to &lt;a class=&quot;reference external&quot; href=&quot;http://plone.opencomparison.org&quot;&gt;plone.opencomparison.org&lt;/a&gt;, login with your github ID, and start adding packages! And while you are at it, please report any issues you find here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/opencomparison/opencomparison/issues&quot;&gt;https://github.com/opencomparison/opencomparison/issues&lt;/a&gt;. Lastly, let&amp;#8217;s all tweet a big thanks to &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/#!/pydanny&quot;&gt;&amp;#64;pydanny&lt;/a&gt;and &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/#!/audreyr&quot;&gt;&amp;#64;audreyr&lt;/a&gt; for their hard work and generosity!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Pillow: One Year Later</title>
    <id>http://blog.aclark.net/2011/10/14/pillow-one-year-later/</id>
    <updated>2011-10-14T00:00:00Z</updated>
    <published>2011-10-14T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/10/14/pillow-one-year-later/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;pillow-one-year-later&quot;&gt;

&lt;p&gt;&lt;strong&gt;For anyone unfamiliar with Pillow, it is the friendly PIL fork: a fork of PIL that aims to remain a good citizen in the PIL community through its actions.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;warm-and-fluffy-history&quot;&gt;
&lt;h2&gt;Warm and fluffy history&lt;/h2&gt;
&lt;p&gt;Pillow 1.0 was released on 2010-07-31, a little over a year later came Pillow 1.7.5 which features:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Many packaging fixes (mostly to support dependency libraries)&lt;/li&gt;
&lt;li&gt;Windows binaries&lt;/li&gt;
&lt;li&gt;Over 13K downloads&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pillow is used in Plone&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://launchpad.net/plone/4.1/4.1.2/+download/Plone-4.1.2-UnifiedInstaller.tgz&quot;&gt;UnifiedInstaller&lt;/a&gt;, and I know &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/Pillow/commit/8a282c9ea4382045822ca4fc15e586ebd2f7ace7&quot;&gt;folks from the Django community&lt;/a&gt;are using it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;future-creature-comforts&quot;&gt;
&lt;h2&gt;Future creature comforts&lt;/h2&gt;
&lt;p&gt;All in all, a mild success. So what&amp;#8217;s next? &lt;strong&gt;More of the same&lt;/strong&gt;. To &lt;a class=&quot;reference external&quot; href=&quot;http://stackoverflow.com/questions/2485295/the-problem-with-installing-pil-using-virtualenv-or-buildout/7770547#7770547&quot;&gt;quote myself from a recent Stack Overflow answer&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;If PIL ever does exactly what Pillow does, then the fork will die. Until that happens, we have Pillow.&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bottom-line-accommodations&quot;&gt;
&lt;h2&gt;Bottom line accommodations&lt;/h2&gt;
&lt;p&gt;This may never happen of course, which is part of the reason for the fork. You can&amp;#8217;t force someone to maintain software for you. But in the open source world you can grab the bull by the horns (take the lead) and try to make things better. Even better: if your project and community are healthy and functioning properly, your success or failure will be determined by the folks in the community (as it should be). In this case, the Plone and Python communities have spoken clearly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Vagrant, Puppet and Mozilla, Oh my</title>
    <id>http://blog.aclark.net/2011/10/03/vagrant-puppet-and-mozilla-oh-my/</id>
    <updated>2011-10-03T00:00:00Z</updated>
    <published>2011-10-03T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/10/03/vagrant-puppet-and-mozilla-oh-my/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;vagrant-puppet-and-mozilla-oh-my&quot;&gt;

&lt;p&gt;&lt;strong&gt;This post is only loosely Python related and not at all Plone related.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post is only loosely Python related and not at all Plone related, but I thought folks might enjoy hearing about Vagrant and Puppet because these tools may help you do your Plone and Python jobs better.&lt;/p&gt;
&lt;p&gt;For the past couple weeks I&amp;#8217;ve been working on creating a virtual machine to bootstrap a kitsune environment. Kitsune is the Django site that powers support.mozilla.com. I&amp;#8217;ve now reached what I call the &lt;strong&gt;2nd milestone&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;milestones&quot;&gt;
&lt;h2&gt;Milestones&lt;/h2&gt;
&lt;p&gt;The milestones are as follows:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;Get the VM running to the point where one can type &lt;strong&gt;./manage.py&lt;/strong&gt; and receive the help output (and not a traceback). This sounds trivial but there is actually a lot of work involved to get to this point. Namely, figuring out how to make &lt;a class=&quot;reference external&quot; href=&quot;http://puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt; execute each of the required steps successfully, together. (You would expect to be able to just define the steps in order, but those with this expectation will be disappointed. I assume Puppet has their reasons, and they are probably even good ones.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get the VM running to the point where one can open http://33.33.33.10:8000 from the host to see kitsune running. Once step #1 is done, this is actually easier than it sounds because I&amp;#8217;m &amp;#8220;cheating&amp;#8221;. Test data has been imported and a syncdb has been run, but I&amp;#8217;m using supervisor to manage the runserver process (for now).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Get the VM running like it does in production. This will involve configuring &lt;strong&gt;Apache&lt;/strong&gt;and &lt;strong&gt;mod_wsgi&lt;/strong&gt; as well as resolving any issues that remain with the app. I&amp;#8217;ll rely on the kitsune team to help with this, as I&amp;#8217;m still learning the app. This is the &amp;#8220;exciting&amp;#8221; part for me because I get to learn something new. While Vagrant and Puppet are also new to me, I consider these technologies part of my &amp;#8220;past life&amp;#8221; (as a system administrator) and Django sites part of my &amp;#8220;future life&amp;#8221; (as a web developer).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now about the technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;vagrant&quot;&gt;
&lt;h2&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;I had heard of &lt;a class=&quot;reference external&quot; href=&quot;http://vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; before, but never tried it. I am now sorry I waited so long because the &amp;#8220;cool factor&amp;#8221; is very high. It requires that &lt;a class=&quot;reference external&quot; href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt; be installed, which I also danced around for too long before committing (being a former Parallels user).&lt;/p&gt;
&lt;p&gt;On OS X Lion[1], installing Vagrant is simply a matter of:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gem install vagrant
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Once you have `vagrant` installed you can do:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vagrant init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;inside some revision-controlled directory and you have the beginnings of a virtual machine you can share with the masses. This is how &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/kitsune-vagrant&quot;&gt;kitsune-vagrant&lt;/a&gt; was born. Hopefully this shared virtual machine will eventually make some new developer&amp;#8217;s life much easier.&lt;/p&gt;
&lt;p&gt;We now arrive at a fork in the road; though Vagrant makes it easy to follow both paths: Chef or Puppet (it supports both). I don&amp;#8217;t recall what made me choose Puppet over Chef, but it might have been that the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rhelmer/socorro-vagrant&quot;&gt;Socorro folks were using it already&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you decide on Puppet (and assuming you do), it&amp;#8217;s pretty easy to figure out that your next move is to create a manifest file for Puppet to apply[2].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;puppet&quot;&gt;
&lt;h2&gt;Puppet&lt;/h2&gt;
&lt;p&gt;My knowledge of Puppet is currently quite limited. Specifically, I only know how to create a manifest file. (Vagrant does the rest!) I imagine there is much more to Puppet, especially with regard to doing actual configuration management on production servers. But I have not explored any of that yet.&lt;/p&gt;
&lt;p&gt;However, I did learn quite a bit about Puppet just from writing the manifest. The first most important thing I learned is this: &lt;strong&gt;Puppet is in charge&lt;/strong&gt;. It does things the way it wants to and you need to follow its rules. The first and biggest challenge is to achieve a linear execution of tasks.&lt;/p&gt;
&lt;p&gt;You cannot write rules in order and hope for the best. This will fail spectacularly when something executes before something else was supposed to. The way around this is via `require =&amp;gt;` statements.&lt;/p&gt;
&lt;p&gt;A grep through kitsune.pp reveals:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;require =&amp;gt; Exec[&amp;#39;git_clone&amp;#39;],
require =&amp;gt; Exec[&amp;#39;db_sync&amp;#39;],
require =&amp;gt; Exec[&amp;#39;packages_upgrade&amp;#39;],
require =&amp;gt; Exec[&amp;#39;packages_update&amp;#39;],
require =&amp;gt; Package[$packages_native],
require =&amp;gt; Exec[&amp;#39;git_clone&amp;#39;],
require =&amp;gt; Exec[&amp;#39;chown_kitsune&amp;#39;],
require =&amp;gt; Exec[&amp;#39;packages_compiled&amp;#39;],
require =&amp;gt; Exec[&amp;#39;packages_vendor&amp;#39;],
require =&amp;gt; Exec[&amp;#39;db_create&amp;#39;],
require =&amp;gt; Exec[&amp;#39;db_import&amp;#39;],
require =&amp;gt; file[&amp;#39;/etc/supervisor/supervisord.conf&amp;#39;],
require =&amp;gt; Exec[&amp;#39;supervisor_stop&amp;#39;],
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This roughly translates to the following workflow logic:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Ensure that `aptitude -y update; aptitude -y upgrade` have been run before you try to install the list of packages we require.&lt;/li&gt;
&lt;li&gt;Ensure the list of packages we require is installed before we checkout the code.&lt;/li&gt;
&lt;li&gt;Ensure the code has been checked out (and pip install / git submodule have been run) before you try to syncdb and run the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a bit more to it, but with that knowledge you should be able to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/kitsune-vagrant/blob/master/manifests/kitsune.pp&quot;&gt;read and understand kitsune.pp in full&lt;/a&gt;. I learned most of the remaining required puppeteering from this site:&lt;a class=&quot;reference external&quot; href=&quot;http://www.puppetcookbook.com/&quot;&gt;http://www.puppetcookbook.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;mozilla&quot;&gt;
&lt;h2&gt;Mozilla&lt;/h2&gt;
&lt;p&gt;Oh my! This Mozilla work is a ton of fun[3]; I attribute this in part due to the structure of their organization: I was invited immediately to collaborate in IRC with the kitsune team and as a result, we all have something to show for it[4]. Next I will be working on the 3rd milestone! Hope to finish by the end
of this week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] This did not work on Snow Leopard, because `gem` is too old.  However if you `brew install ruby` and try again, it should work.&lt;/p&gt;
&lt;p&gt;[2] I didn&amp;#8217;t bother to investigate Chef, but I am curious about it.&lt;/p&gt;
&lt;p&gt;[3] And I hope this is only the beginning.&lt;/p&gt;
&lt;p&gt;[4] I hope to get a Mozilla gig but even if I don&amp;#8217;t, being able to do this type of work is very rewarding (which is why you will often hear people in open source say that to get paid for the type of work they do is a dream come true).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Mozilla and PyPI</title>
    <id>http://blog.aclark.net/2011/09/22/mozilla-and-pypi/</id>
    <updated>2011-09-22T00:00:00Z</updated>
    <published>2011-09-22T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/09/22/mozilla-and-pypi/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;mozilla-and-pypi&quot;&gt;

&lt;p&gt;&lt;strong&gt;VM setup for kitsune&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/in-defense-of-pypi&quot;&gt;last time I wrote about PyPI&lt;/a&gt; some folks mistook the subject to be &lt;a class=&quot;reference external&quot; href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt;, so let me be clear: this article is about the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi&quot;&gt;Python Packaging Index&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recently began doing some volunteer work for Mozilla[1], working on a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/kitsune-vagrant&quot;&gt;virtual machine setup&lt;/a&gt; to make kitsune development easier (kitsune is the code name for the Django site that powers &lt;a class=&quot;reference external&quot; href=&quot;http://support.mozilla.com&quot;&gt;support.mozilla.com&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;git-submodules&quot;&gt;
&lt;h2&gt;Git submodules&lt;/h2&gt;
&lt;p&gt;In doing so, I came across an interesting command from their &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/jsocol/kitsune/blob/master/docs/installation.rst&quot;&gt;installation docs&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I can recall some vague rumblings about git submodules prior to this incident, but nothing I&amp;#8217;d call &amp;#8220;familiarity&amp;#8221;. So, I shrugged it off and went about the business of creating the VM (and resisting the urge to use &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/zc.buildout/1.5.2&quot;&gt;zc.buildout&lt;/a&gt; to do it):&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;On day 1, I created a &lt;a class=&quot;reference external&quot; href=&quot;http://virtualbox.org&quot;&gt;VirtualBox&lt;/a&gt; VM using the latest Ubuntu Server and was able to assemble and run the application by following the instructions.&lt;/li&gt;
&lt;li&gt;On day 2, I began to &lt;a class=&quot;reference external&quot; href=&quot;http://vagrantup.com&quot;&gt;&amp;#8220;vagrantize&amp;#8221;&lt;/a&gt; the process. Here I ran into a bit of trouble with the git-submodule command[2]. This led me to seek alternative methods to install the various Python packages it was trying to install (when stuck on a problem I often like to pursue the alternatives immediately, so I have them if I need them.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;zamboni&quot;&gt;
&lt;h2&gt;Zamboni&lt;/h2&gt;
&lt;p&gt;Then, in the Mozilla IRC channel #sumodev (&lt;strong&gt;su&lt;/strong&gt;pport &lt;strong&gt;mo&lt;/strong&gt;zilla) some nice Mozillian (willkg) pointed me to this gem:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://mozweb.readthedocs.org/en/latest/packaging.html&quot;&gt;http://mozweb.readthedocs.org/en/latest/packaging.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which in turn led me to the following two links:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://jbalogh.github.com/zamboni/topics/packages/&quot;&gt;http://jbalogh.github.com/zamboni/topics/packages/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://playdoh.readthedocs.org/en/latest/packages.html#packages&quot;&gt;http://playdoh.readthedocs.org/en/latest/packages.html#packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, faint rumblings… this time about zamboni (not THAT Zamboni). I know I&amp;#8217;ve heard of it, but I wouldn&amp;#8217;t call myself familiar with it. So, I innocently read the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;Python projects can incur a number of dependencies. ``pip`` can be handy, but we’ve had better luck with distributing a ``vendor`` library.&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;At which point I immediately thought to myself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;Yeah… I hear that.&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Followed a few seconds later by:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;Wait… what?!?&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;playdoh&quot;&gt;
&lt;h2&gt;Playdoh&lt;/h2&gt;
&lt;p&gt;Some time/research later[3], I (re)discovered that zamboni is the codename for &lt;a class=&quot;reference external&quot; href=&quot;https://addons.mozilla.org&quot;&gt;addons.mozilla.org&lt;/a&gt;[4]. And &lt;a class=&quot;reference external&quot; href=&quot;http://playdoh.readthedocs.org/&quot;&gt;Playdoh&lt;/a&gt; is the code name for Mozilla&amp;#8217;s base Django project setup. If you aren&amp;#8217;t familiar with Playdoh, please do give it a whirl[5].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;pypi&quot;&gt;
&lt;h2&gt;PyPI&lt;/h2&gt;
&lt;p&gt;While all of this is very, very interesting to me, I am primarily a &amp;#8220;systems and processes&amp;#8221; guy; and what ultimately stuck with me after two days of Mozilla-ing is the following blurb from the Playdoh packaging documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;The ``/vendor`` library is supposed to contain all packages and repositories. It enables the project to be deployed as one package onto many machines, without relying on PyPI-based installations on each target machine.&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;#8220;Nooooooooooooooo&amp;#8221;, I am now saying to myself over and over. &amp;#8220;Without relying on PyPI-based installations on each target machine.&amp;#8221; Another &amp;#8220;noooooooooooooooo!&amp;#8221; I certainly don&amp;#8217;t fault Mozilla for taking this approach, but it makes me sad that large organizations like Mozilla are passing over PyPI in favor of alternative methods of distributing Python software.&lt;/p&gt;
&lt;p&gt;Let us all now hang our heads, for a moment of pause and reflection.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[a minute passes]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-future&quot;&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;I can&amp;#8217;t speak for anyone else, but I would certainly like to see this change in the future. I would LOVE to see PyPI become a place that Mozilla felt confident it could use to deploy Python software. And this is something I&amp;#8217;d love to work on &lt;em&gt;for&lt;/em&gt; Mozilla, if given the opportunity[6].&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;great-for-python-great-for-mozilla&quot;&gt;
&lt;h3&gt;Great for Python == great for Mozilla?&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s obvious what&amp;#8217;s in it for Python, but what&amp;#8217;s in for Mozilla?&lt;/p&gt;
&lt;p&gt;Simple.&lt;/p&gt;
&lt;p&gt;I happen to share Mozilla&amp;#8217;s vision for an open web and open source in general. And it&amp;#8217;s great to see them embracing &amp;amp; using Python for their web projects! Without a doubt,&amp;nbsp; they are interested in giving back to the Python community (e.g. via Playdoh and the Django community, in this case.) So I suspect they&amp;#8217;d be open to helping the Python community fix a long standing issue: the stability and reliability of the Python Package Index. It would certainly benefit them in the long run to simplify their build process to the point where git-submodule was no longer needed[7].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] I am actively courting Mozilla in hopes of landing a gig by the end of the year. So all you Mozillians who know me personally, please put in a good word! And all you Mozillians I have not met yet: nice to meet you!&lt;/p&gt;
&lt;p&gt;[2] The problem turned out to be git-submodule failing to run because things like: grep and sed were missing from the PATH. Easily fixed by modifying the puppet configuration, but not easily discovered because git-submodule itself returned zero! Some guy on #puppet was very helpful in getting me to print out debug info.&lt;/p&gt;
&lt;p&gt;[3] More help from friendly Mozillians in #webdev:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;11:13 &amp;lt; groovecoder&amp;gt; aclark: yeah, zamboni is amo 11:13 &amp;lt; kumar&amp;gt; playdoh was extracted from zamboni and other apps 11:13 &amp;lt; kumar&amp;gt; but zamboni itself does not eat the playdoh dog food, actually 11:15 &amp;lt; kumar&amp;gt; aclark also, in case you&amp;#8217;re not steeped in our initialisms, amo is addons.mozilla.org&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;[4] There is a great presentation about it here: &lt;a class=&quot;reference external&quot; href=&quot;http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098&quot;&gt;http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;[5] More from kumar (emphasis is my own):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;11:25 &amp;lt; kumar&amp;gt; &lt;strong&gt;Playdoh is starting to stabilize&lt;/strong&gt; so it would be &lt;strong&gt;good to see some use of it outside Mozilla&lt;/strong&gt;; this would probably help us catch Mozilla-specific things that need extraction&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;[6] LARGE HINT ;-)&lt;/p&gt;
&lt;p&gt;[7] Again, not that there is anything wrong with what Mozilla is doing here. As a systems guy, I just happen to gravitate toward simplifying processes by eliminating steps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">You're So Vain, So Why Not Use Vanity?</title>
    <id>http://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/</id>
    <updated>2011-06-16T00:00:00Z</updated>
    <published>2011-06-16T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;you-re-so-vain-so-why-not-use-vanity&quot;&gt;

&lt;p&gt;&lt;strong&gt;A few months ago I created a package called Vanity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A few months ago I created a package called &lt;strong&gt;Vanity&lt;/strong&gt;[0] that provides easy access to package download statistics from &lt;strong&gt;PyPI&lt;/strong&gt;. You can find the source code here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/vanity&quot;&gt;https://github.com/aclark4life/vanity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I love this tool, and I use it all the time to gauge the value of a package. Of course, downloads are only one criteria you can use to judge the value of a package, and arguably not even a very good one.  &lt;strong&gt;Vanity&lt;/strong&gt; itself is a good example of this phenomenon. I find it incredibly useful, but in it&amp;#8217;s history it has only been downloaded &lt;em&gt;130&lt;/em&gt; times.&lt;/p&gt;
&lt;p&gt;Other packages I have created with much less value have been downloaded more times, e.g. &lt;strong&gt;plonetheme.aclark_twitter&lt;/strong&gt; which has been downloaded&amp;nbsp; &lt;em&gt;674&lt;/em&gt; times. But that package has also been around much longer. So obviously another useful metric would be the &lt;em&gt;time period&lt;/em&gt; during which the downloads occurred.&lt;/p&gt;
&lt;p&gt;Anyway, here is how it works:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install vanity
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity &amp;lt;package&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity vanity
Package `vanity` has been downloaded 130 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity plonetheme.aclark_twitter
Package `plonetheme.aclark_twitter` has been downloaded 674 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Some of my other favorites:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity Django[1]
Package `Django` has been downloaded 302111 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity zope.component
Package `zope.component` has been downloaded 210541 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vanity pyramid
Package `pyramid` has been downloaded 26067 times!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another thing to consider is if hitting &lt;strong&gt;PyPI&lt;/strong&gt; each time is really necessary. I&amp;#8217;m told there is &lt;strong&gt;PyPI&lt;/strong&gt; data living somewhere else, and in future versions I would like to make vanity use that data by default.&lt;/p&gt;
&lt;p&gt;So, this post is simply to announce &lt;strong&gt;Vanity&lt;/strong&gt; to a wider audience in the event that some folks may find it useful. Otherwise, I will be happy to continue to watch &lt;strong&gt;Vanity&lt;/strong&gt; downloads crawl ever so slowly towards 200.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[0] By standing on the shoulders of some Plone giants, &lt;a class=&quot;reference external&quot; href=&quot;http://davisagli.com/&quot;&gt;David Glick,&lt;/a&gt; in particular.&lt;/p&gt;
&lt;p&gt;[1] There is a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/vanity/issues/1&quot;&gt;known issue&lt;/a&gt; with regard to making Vanity case insensitive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">In Defense of PyPI</title>
    <id>http://blog.aclark.net/2011/01/31/in-defense-of-pypi/</id>
    <updated>2011-01-31T00:00:00Z</updated>
    <published>2011-01-31T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/01/31/in-defense-of-pypi/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;in-defense-of-pypi&quot;&gt;

&lt;p&gt;&lt;strong&gt;Everyone on the Python Planet is probably already familiar with Peter Fein&amp;#8217;s recent article about PyPI.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everyone on the Python Planet is probably already familiar with Peter Fein&amp;#8217;s recent article &lt;a class=&quot;reference external&quot; href=&quot;http://blog.wearpants.org/elitism-and-the-importance-of-pypi&quot;&gt;about PyPI use (or lack thereof).&lt;/a&gt; But in case not, particularly striking was the number of folks who joined the &amp;#8220;PyPI bashing&amp;#8221; in the comments. In fact, it has inspired me to write this post &amp;#8220;in defense of PyPI&amp;#8221;. I would like to offer the Python community a summary of what I think are the general criticisms, along with my responses as a &amp;#8220;sysadmin / developer type&amp;#8221;.&lt;/p&gt;
&lt;p&gt;First let me say this: I love PyPI! And I agree with Peter, if your package isn&amp;#8217;t on PyPI it&amp;nbsp; &amp;#8220;doesn&amp;#8217;t exist&amp;#8221;. I wouldn&amp;#8217;t put it quite like that; but I would say it&amp;#8217;s fairly important if you are publishing open source Python code, to consider uploading it to the Python Package Index.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;because-everybody-wins&quot;&gt;
&lt;h2&gt;Because Everybody Wins&lt;/h2&gt;
&lt;p&gt;Believe it or not, the general Python community is interested in seeing your code. Whether to use it for an example, or to avoid reinventing the wheel, or whatever the reason; we&amp;#8217;d like a chance to see your code. But if you don&amp;#8217;t publish it to PyPI, we may never get that chance!&lt;/p&gt;
&lt;p&gt;For better or worse, PyPI is the canonical place on Earth for Python packages. It&amp;#8217;s the CPAN of Python. I understand that not everyone is 100% comfortable with this, but that doesn&amp;#8217;t make it any less true. If you accept that &amp;#8220;open source is good&amp;#8221;, and that &amp;#8220;Python rules&amp;#8221;, then you simply must take this next leap of faith: &amp;#8220;PyPI is &lt;em&gt;the&lt;/em&gt; place for Python packages&amp;#8221;.&lt;/p&gt;
&lt;p&gt;[waves hand]&lt;/p&gt;
&lt;p&gt;Moving on, why else should you consider uploading your packages to PyPI?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;because-it-is-the-right-thing-to-do&quot;&gt;
&lt;h2&gt;Because It Is The &amp;#8220;Right&amp;#8221; Thing To Do&lt;/h2&gt;
&lt;p&gt;Another thing that struck me is the number of folks who (appear to) confuse &amp;#8220;version control&amp;#8221; with &amp;#8220;distribution&amp;#8221;. If I&amp;#8217;m not mistaken, Launchpad, Github, and Bitbucket are primarily designed for Bazaar, Git, and Mercurial hosting respectively. These sites can host your distribution tarballs, but they certainly weren&amp;#8217;t &lt;em&gt;designed and built&lt;/em&gt; to do so. Rather, they were designed and built to host your source code.&lt;/p&gt;
&lt;p&gt;In some cases, a project may wish to host it&amp;#8217;s own &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/&quot;&gt;distribution server&lt;/a&gt;. Whether it be for redundancy (although PyPI has begun to tackle this) or &amp;#8220;branding&amp;#8221; or other reasons, I would argue this is the preferred way of handling it: &lt;em&gt;in addition to uploading to PyPI, not in place of it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;because-it-is-not-that-hard&quot;&gt;
&lt;h2&gt;Because It Is Not That Hard&lt;/h2&gt;
&lt;p&gt;Ahem… we get it. The situation with easy_install is &amp;#8220;less than ideal&amp;#8221;.  But this is something to be fixed, not avoided. If you are receiving too many support requests, may I suggest &lt;a class=&quot;reference external&quot; href=&quot;http://blog.jazkarta.com/2010/05/15/installing-plone-without-buildout/#comment-162&quot;&gt;simply telling people not to use easy_install&lt;/a&gt;. Or, if the problem is proper packaging, learn how to &lt;a class=&quot;reference external&quot; href=&quot;http://groups.google.com/group/pylons-devel/msg/abfe9e7a43f62594&quot;&gt;test your packages&lt;/a&gt; before uploading them. Due to the large number of screwed up releases I&amp;#8217;ve made, I&amp;#8217;ve come to rely on a&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.PloneSoftwareCenter&quot;&gt;local PyPI&lt;/a&gt; and a virtualenv to test installations. Others use &lt;a class=&quot;reference external&quot; href=&quot;http://groups.google.com/group/pylons-devel/msg/696c69843eecd026&quot;&gt;even simpler methods&lt;/a&gt;.  And with tools like &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/jarn.mkrelease&quot;&gt;mkrelease,&lt;/a&gt; it&amp;#8217;s easy to upload your package to multiple PyPI locations with just a single command (although leaping-tall-buildings-in-a single-bound is not yet supported.)&lt;/p&gt;
&lt;p&gt;The point is, please consider helping the community fix the problem rather than simply avoiding it. There are folks &lt;a class=&quot;reference external&quot; href=&quot;http://wiki.python.org/moin/Distutils/SprintParis&quot;&gt;actively trying to improve the situation&lt;/a&gt; right now.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s see, what else?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;because-it-does-not-have-to-be-perfect&quot;&gt;
&lt;h2&gt;Because It Does Not Have To Be Perfect&lt;/h2&gt;
&lt;p&gt;Over the years I&amp;#8217;ve seen various and sundry criticisms of the PyPI user interface. Fine. I have not looked into the current development process, but I assume the author/maintainers would be open to some constructive criticism and/or development assistance.&lt;/p&gt;
&lt;p&gt;It doesn&amp;#8217;t have to be Github-sexy to be useful. If you would like to report a bug or feature request, do it &lt;a class=&quot;reference external&quot; href=&quot;http://sourceforge.net/tracker/?group_id=66150&quot;&gt;here&lt;/a&gt; (at least, I think that is the right place.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this convinces at least some folks to consider uploading their packages to PyPI. If it doesn&amp;#8217;t, please let me know why in the comments.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Did you enjoy reading this article? If so, please consider `helping me help Plone`_.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">No, Really, You Can Just Use Buildout To Install Plone</title>
    <id>http://blog.aclark.net/2010/01/07/no-really-you-can-just-use-buildout-to-install-plone/</id>
    <updated>2010-01-07T00:00:00Z</updated>
    <published>2010-01-07T00:00:00Z</published>
    <link href="http://blog.aclark.net/2010/01/07/no-really-you-can-just-use-buildout-to-install-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;no-really-you-can-just-use-buildout-to-install-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a follow up to my &amp;#8216;Getting Excited about Plone as Eggs&amp;#8217; post.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a follow up to my &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2008/12/15/getting-excited-about-plone-as-eggs/&quot;&gt;Getting Excited about Plone as Eggs&lt;/a&gt; post.&lt;/p&gt;
&lt;p&gt;Generally speaking, the recommended and supported way to install Plone is via the installers, e.g. the &lt;a class=&quot;reference external&quot; href=&quot;http://launchpad.net/plone/3.3/3.3.3/+download/Plone-3.3.3-UnifiedInstaller.tgz&quot;&gt;Unified Installer&lt;/a&gt;. Obviously, if you want things to Just Work™ you should be using the latest stable release, which is why I linked to the 3.3.3 unified installer (although there is no Windows installer for 3.3.3 yet, which is why it&amp;#8217;s not released on plone.org).&lt;/p&gt;
&lt;p&gt;That said, since both Plone and Zope 2 have been packaged as eggs&amp;nbsp; (Plone became an egg in version 3.2 and Zope 2 became an egg as of Zope 2.12 which is the version of Zope 2 that Plone 4 will use) it has become &amp;#8220;mostly trivial&amp;#8221; to write a buildout.cfg to install Plone with. That means that you don&amp;#8217;t even need paster to do it. You can just fire up an editor and type:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
parts = instance

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    Plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Amazing!&lt;/p&gt;
&lt;p&gt;Of course there is the nasty bit about PIL, which I get around now-a-days by adding a very specific find-link, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
parts = instance
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What you should have at this point is a working Plone, but not necessarily a repeatable buildout. The reason being we have not pinned any egg versions yet, so we are effectively asking for whatever the latest version of Plone is on PyPI. Fun for playing, not fun for production. Fortunately the nice Plone people have created a bunch of version pins for us, so we just need to use them:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = http://dist.plone.org/release/4.0a3/versions.cfg
versions = versions
parts = instance
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are completely new to buildout and you are thinking to yourself right now &amp;#8220;what in the world is this guy talking about?&amp;#8221; then you will likely want to install buildout first so you can join in the fun. Fortunately, the nice Python people have made that easy with a package called &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/distribute&quot;&gt;Distribute&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following their instructions, you can do this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -O http://python-distribute.org/distribute_setup.py
$ python distribute_setup.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install zc.buildout
$ mkdir plone
$ cd plone
$ buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After which you will have a buildout.cfg file, and you can follow along with the above steps. Happy?&lt;/p&gt;
&lt;p&gt;The best part about all of this is that (on a fast internet connection) it should only be a matter of minutes before you are able to do this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/instance fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and be staring at a thing of beauty.&lt;/p&gt;
&lt;p&gt;Of course, if you are running in the foreground (recommended for debugging) you should see something like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aclark@Alex-Clarks-MacBook-Pro:~/Developer/public-plone/ &amp;gt; bin/instance fg
/Users/aclark/Developer/public-plone/parts/instance/bin/runzope -X debug-mode=on
2010-01-07 12:07:56 INFO ZServer HTTP server started at Thu Jan  7 12:07:56 2010
 Hostname: 0.0.0.0
 Port: 8080
2010-01-07 12:08:14 INFO Zope Ready to handle requests
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you&amp;#8217;d like to get a little less noisy and skip debug mode but still run in the foreground, you can use April 2008&amp;#8217;s famous addition to plone.recipe.zope2instance:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aclark@Alex-Clarks-MacBook-Pro:~/Developer/public-plone/ &amp;gt; bin/instance console
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Sweet, blissful, silent running Plone.&lt;/p&gt;
&lt;p&gt;Happy Plone 4&amp;#8217;ing all!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">New Year’s Python Meme</title>
    <id>http://blog.aclark.net/2009/12/31/new-years-python-meme/</id>
    <updated>2009-12-31T00:00:00Z</updated>
    <published>2009-12-31T00:00:00Z</published>
    <link href="http://blog.aclark.net/2009/12/31/new-years-python-meme/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;new-years-python-meme&quot;&gt;

&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;https://raw.github.com/ACLARKNET/blog/gh-pages/images/lenin_packaging.png&quot; style=&quot;width: 100%;&quot; /&gt;
&lt;p&gt;&lt;strong&gt;Tarek&amp;#8217;s new thing&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;whats-the-coolest-python-application-framework-or-library-you-have-discovered-in-2009&quot;&gt;
&lt;h2&gt;What’s the coolest Python application, framework or library you have discovered in 2009?&lt;/h2&gt;
&lt;p&gt;That would be &lt;a class=&quot;reference external&quot; href=&quot;http://zenoss.org&quot;&gt;Zenoss&lt;/a&gt;. I&amp;#8217;m very impressed with the application as well as the community, which is awesome. They remind me a lot of the Plone community; I think the two can learn a lot from each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-new-programming-technique-did-you-learn-in-2009&quot;&gt;
&lt;h2&gt;What new programming technique did you learn in 2009?&lt;/h2&gt;
&lt;p&gt;Generally speaking, I&amp;#8217;m happy with my progress as a Plone integrator, plowing through the tremendous Plone code stack, on my way to complete mastery. I may never get there, but I&amp;#8217;m having fun trying. In other words, I know a lot more about how far the Zope2/CMF/Five rabbit hole goes. If I had to pick, I&amp;#8217;d choose Grok in Plone, mostly as it relates to Dexterity: &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/dexterity/documentation/manual/five.grok&quot;&gt;http://plone.org/products/dexterity/documentation/manual/five.grok&lt;/a&gt;. I created &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/collective-project&quot;&gt;http://plone.org/products/collective-project&lt;/a&gt; as a result, or rather, I converted the package to use Dexterity types so I could learn Dexterity, in part ;-). At first I was angry at being &amp;#8220;forced&amp;#8221; to use Grok techniques in Plone, but then it grew on me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;whats-the-name-of-the-open-source-project-you-contributed-the-most-in-2009-what-did-you-do&quot;&gt;
&lt;h2&gt;What’s the name of the open source project you contributed the most in 2009? What did you do?&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://plone.org&quot;&gt;Plone&lt;/a&gt;.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I dug out from &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/events/conferences/2008-washington-dc&quot;&gt;Plone Conference 2008&lt;/a&gt;, which included publishing the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/events/conferences/2008-washington-dc/agenda&quot;&gt;videos and slides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I helped move plone.org to &lt;a class=&quot;reference external&quot; href=&quot;http://sixfeetup.com&quot;&gt;Six Feet Up&lt;/a&gt;, and have been looking after &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/browser/Products.PloneOrg/trunk&quot;&gt;it&lt;/a&gt; as well as &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/news/plone-domain-dns-changes&quot;&gt;other infrastructure issues&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I worked on a book called &amp;#8216;Plone Site Admin&amp;#8217;, which will most likely come out in early 2010 (via &lt;a class=&quot;reference external&quot; href=&quot;http://packtpub.com&quot;&gt;Packt&lt;/a&gt;). I hope the community will find it useful.&lt;/li&gt;
&lt;li&gt;I contributed a &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/ticket/9330&quot;&gt;new feature&lt;/a&gt; to Plone 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-was-the-python-blog-or-website-you-read-the-most-in-2009&quot;&gt;
&lt;h2&gt;What was the Python blog or website you read the most in 2009?&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://planet.plone.org&quot;&gt;Planet Plone&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-are-the-three-top-things-you-want-to-learn-in-2010&quot;&gt;
&lt;h2&gt;What are the three top things you want to learn in 2010?&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://zenoss.org&quot;&gt;Zenoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://wsgi.org/wsgi/&quot;&gt;WSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/browser/buildouts/plone-coredev/branches/4.0&quot;&gt;Plone 4 core development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy (Python) New Year everyone!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">A Sane Buildout For repoze.zope2 + Plone</title>
    <id>http://blog.aclark.net/2009/06/18/a-sane-buildout-for-repoze-zope2-plone/</id>
    <updated>2009-06-18T00:00:00Z</updated>
    <published>2009-06-18T00:00:00Z</published>
    <link href="http://blog.aclark.net/2009/06/18/a-sane-buildout-for-repoze-zope2-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;a-sane-buildout-for-repoze-zope2-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a follow-up to Martin Aspeli&amp;#8217;s introduction to repoze and Plone from last year&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;a-tale-of-two-buildouts&quot;&gt;
&lt;h2&gt;A Tale of Two Buildouts&lt;/h2&gt;
&lt;p&gt;There are two stories going on here, both of which &lt;a class=&quot;reference external&quot; href=&quot;http://www.martinaspeli.net/articles/scrambled-eggs&quot;&gt;Martin Aspeli recently described in great detail&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://plope.com/Members/chrism/distribution_links_considered_harmful&quot;&gt;Chris McDonough tackled last year&lt;/a&gt;. For the purposes of this blog entry, I&amp;#8217;ll refer to the issue as the &amp;#8220;index vs. find-links&amp;#8221; conundrum in buildout&amp;nbsp; (find-links in buildout are equivalent to distribution_links in setuptools).&lt;/p&gt;
&lt;p&gt;For those that want strict repeatability, using the index parameter is the clear winner. It simply forces buildout to do the right thing now and forever, by limiting what packages it can select from. For those that want functionality and don&amp;#8217;t mind the occasional egg-out-of-whack (i.e. unexpected upgrade), then using the find-links parameter can provide a &amp;#8220;sexy&amp;#8221; way to get decent results quickly (but may, and probably will, shoot you in the foot later).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;sexy-but-dangerous&quot;&gt;
&lt;h2&gt;Sexy, but Dangerous&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s start with the sexy, but with less repeat-ability method first.  Using this method we are not specifying our own index. Therefore you are free to add any package from &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/simple/&quot;&gt;PyPI&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/simple&quot;&gt;plone.org&lt;/a&gt; as you see fit.  This is essentially why people like this method (the counter argument is that it is simple to add any additional egg you may want to your index, but we&amp;#8217;ll get to that later).&lt;/p&gt;
&lt;p&gt;So a simple buildout using this method might look like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv plone; cd plone
bin/easy\_install zc.buildout
bin/buildout init
Edit buildout.cfg:
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends =
# Using Martin Aspeli&amp;#39;s good-py, thanks!
    http://good-py.appspot.com/release/repoze.zope2/1.0
    http://dist.plone.org/release/3.3rc3/versions.cfg
versions = versions
find-links =
    http://dist.repoze.org/zope2/latest
    http://dist.repoze.org/zope2/dev/
    http://dist.plone.org/release/3.3rc3
parts = instance[instance]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    repoze.zope2
    Plone
    PIL

4. bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few more steps are required, which we could certainly automate in
buildout, but for now I&amp;#8217;ll just list them here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class=&quot;arabic simple&quot; start=&quot;5&quot;&gt;
&lt;li&gt;bin/mkzopeinstance&lt;/li&gt;
&lt;li&gt;bin/addzope2user admin admin&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now, the moment we&amp;#8217;ve all been waiting for… the fun part!&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class=&quot;arabic simple&quot; start=&quot;7&quot;&gt;
&lt;li&gt;bin/paster serve etc/zope2.ini&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;You should see something like:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[aclark@alex-clarks-macbook-pro]~/Developer/plone% bin/paster serve etc/zope2.ini
2009-06-18 22:52:24 INFO Marshall libxml2-python not available. Unable to register libxml2 based marshallers.
2009-06-18 22:52:27 WARNING ZODB.FileStorage Ignoring index for
/Users/aclark/Developer/p3-repoze-2/var/Data.fsDeprecationWarning: zope.app.annotation has moved to
zope.annotation. Import of zope.app.annotation will become
unsupported in Zope 3.5
/Users/aclark/Developer/plone/eggs/zopelib-2.10.7.0-py2.4-macosx-10.5-i386.egg/zope/configuration/xmlconfig.py:323:
  __import__(arguments[0])
------
2009-06-18T22:52:24 INFO Marshall libxml2-python not available. Unable to register libxml2 based marshallers.
------
2009-06-18T22:52:27 WARNING ZODB.FileStorage Ignoring index for /Users/aclark/Developer/plone/var/Data.fs
Starting server in PID 26900.
zserver on port 8080
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At this point, you should be able to login to
&lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080/manage&quot;&gt;http://localhost:8080/manage&lt;/a&gt; and create a Plone site.&lt;/p&gt;
&lt;p&gt;Of course, we did a sloppy job here, creating the Zope2 instance in the
root of the buildout, etc. It is possible that
&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plone.recipe.zope2instance/3.2&quot;&gt;plone.recipe.zope2install&lt;/a&gt; may help us in the future by supporting
repoze.zope2 instances (or maybe it does already, I didn&amp;#8217;t try).&lt;/p&gt;
&lt;p&gt;Next up?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;boring-but-repeatable&quot;&gt;
&lt;h2&gt;Boring, but Repeatable&lt;/h2&gt;
&lt;p&gt;I kid, but this is actually a very serious concern for many people, and
rightfully so. The notion that your buildout will work the same today as
it does in one year from now may be a strict requirement for your
project. If it is, we can accommodate you (I hope) with the &amp;#8220;index&amp;#8221;
buildout that follows. The downside is that *you* can&amp;#8217;t control what I
put in the index. However, you can certainly create your own index using
this technique.&lt;/p&gt;
&lt;p&gt;An arguably even simpler buildout using this technique might look like
this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class=&quot;arabic simple&quot; start=&quot;0&quot;&gt;
&lt;li&gt;virtualenv plone; cd plone&lt;/li&gt;
&lt;li&gt;bin/easy_install zc.buildout&lt;/li&gt;
&lt;li&gt;bin/buildout init&lt;/li&gt;
&lt;li&gt;Edit buildout.cfg:&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
index = http://dist.plone.org/experimental/release/3.3rc3/simple/
parts = instance[instance]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    repoze.zope2
    Plone
    PIL

4. bin/buildout

5. bin/mkzopeinstance

6. bin/addzope2user admin admin

7. bin/paster serve etc/zope2.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;in-conclusion&quot;&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Depending on what my needs are, I might choose either of these
techniques. We can also hold out for &lt;a class=&quot;reference external&quot; href=&quot;http://bugs.python.org/setuptools/issue32&quot;&gt;multi-index support in
setuptools&lt;/a&gt;. That would seemingly make everyone happy. In the meantime,
I can tell you I&amp;#8217;d definitely reach for a buildout sans custom index
first, then ask questions later (i.e. wait for bleeding toes) but that
is just me. If people find the &amp;#8220;index&amp;#8221; technique generally useful, I&amp;#8217;d
be willing to support package sheperding and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/basketweaver/0.1.2-r6&quot;&gt;index generating with
basketweaver&lt;/a&gt;. Just let me know. If it really catches on, we could
rename &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/experimental/release/3.3rc3/&quot;&gt;http://dist.plone.org/experimental/release/3.3rc3/&lt;/a&gt; to
&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/repoze/release/3.3rc3/&quot;&gt;http://dist.plone.org/repoze/release/3.3rc3/&lt;/a&gt;. Of course, if anyone
objects to this or finds it confusing, I can just as easily remove it
(from dist.plone.org).&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a class=&quot;reference external&quot; href=&quot;http://plope.com/&quot;&gt;Chris McDonough&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://www.martinaspeli.net/&quot;&gt;Martin Aspeli&lt;/a&gt; for helping me
scratch my itch!&lt;/p&gt;
&lt;p&gt;Finally, please don&amp;#8217;t rely on any of this &amp;#8220;in production&amp;#8221; yet unless you
know what you are doing. I tested these techniques up to the point of
starting Zope (via paste) and adding a Plone site, nothing more!&lt;/p&gt;
&lt;p&gt;I, however, am getting a new server next week and will be hosting this
site on &lt;a class=&quot;reference external&quot; href=&quot;http://repoze.org/quickstart.html#repoze.zope2&quot;&gt;repoze.zope2&lt;/a&gt; very shortly ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Is Anyone Using plone.org's New PyPI Functionality?</title>
    <id>http://blog.aclark.net/2009/03/13/is-anyone-using-plone-orgs-new-pypi-functionality/</id>
    <updated>2009-03-13T00:00:00Z</updated>
    <published>2009-03-13T00:00:00Z</published>
    <link href="http://blog.aclark.net/2009/03/13/is-anyone-using-plone-orgs-new-pypi-functionality/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;is-anyone-using-plone-org-s-new-pypi-functionality&quot;&gt;

&lt;p&gt;&lt;strong&gt;python setup.py upload -r plone.org&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lots of exciting things are happening with Plone.org!&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://twitter.com/calvinhp&quot;&gt;Calvin Hendryx-Parker&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://sixfeetup.com&quot;&gt;Six Feet Up&lt;/a&gt; are working on moving *.plone.org to one of their powerful new servers (with some exceptions, most notably {svn,dev}.plone.org will remain in place, as I understand it)!&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://limi.net&quot;&gt;Alex Limi&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/team/WebsiteTeam&quot;&gt;company&lt;/a&gt; are working on deploying a new look and feel using a new-fangled technology called xdv (a variant of Deliverance).&lt;/li&gt;
&lt;li&gt;I am removing &lt;a class=&quot;reference external&quot; href=&quot;https://dev.plone.org/plone.org/ticket/1080&quot;&gt;kinks&lt;/a&gt; that have been lingering after the recent upgrade (in theory ;-).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This blog entry is both a &amp;#8220;call to arms&amp;#8221; to everyone involved in helping, and a message to everyone waiting patiently that we haven&amp;#8217;t forgotten about you! :-D&lt;/p&gt;
&lt;p&gt;In particular, I&amp;#8217;d like to hear from any early adopters of the new &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products&quot;&gt;http://plone.org/products&lt;/a&gt;section. You can read about how to use the new PyPI functionality here, if you haven&amp;#8217;t already: &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.dist/0.2.2&quot;&gt;http://pypi.python.org/pypi/collective.dist/0.2.2&lt;/a&gt;. In my little &amp;#8220;test&amp;#8221; product, I found it quite useful: &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/Products.todo/&quot;&gt;http://plone.org/products/Products.todo/.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So if you are using it, I&amp;#8217;d definitely like to hear your experiences. Or if not, please give it a try!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Getting Excited About Plone as Eggs</title>
    <id>http://blog.aclark.net/2008/12/15/getting-excited-about-plone-as-eggs/</id>
    <updated>2008-12-15T00:00:00Z</updated>
    <published>2008-12-15T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/12/15/getting-excited-about-plone-as-eggs/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;getting-excited-about-plone-as-eggs&quot;&gt;

&lt;p&gt;&lt;strong&gt;Updated for 4.x&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m really excited about this because it greatly simplifies the development and deployment story for &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org&quot;&gt;Plone&lt;/a&gt;. For example you can now create a Plone &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; file like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = http://dist.plone.org/release/4.0a1/versions.cfgversions = versions
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz
parts = instance

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Thanks framework team and core developers for this impressive release.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">ZPUGDC Meeting Tonight</title>
    <id>http://blog.aclark.net/2008/12/02/zpugdc-meeting-tonight/</id>
    <updated>2008-12-02T00:00:00Z</updated>
    <published>2008-12-02T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/12/02/zpugdc-meeting-tonight/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;zpugdc-meeting-tonight&quot;&gt;

&lt;p&gt;&lt;strong&gt;ZPUGDC &amp;amp; DC Python Meetup: December Meeting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://python-groups.blogspot.com/2008/12/zpugdc-dc-python-meetup-december.html&quot;&gt;http://python-groups.blogspot.com/2008/12/zpugdc-dc-python-meetup-december.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Naked Plone Theme</title>
    <id>http://blog.aclark.net/2008/11/19/naked-plone-theme/</id>
    <updated>2008-11-19T00:00:00Z</updated>
    <published>2008-11-19T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/11/19/naked-plone-theme/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;naked-plone-theme&quot;&gt;

&lt;p&gt;&lt;strong&gt;Products.naked_plone&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve needed this for some time, but I&amp;#8217;m finally getting around to &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/Products.naked_plone/0.1&quot;&gt;shipping it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition to making it easy to disable default Plone styles, this add-on provides an &amp;#8220;Advanced Setup&amp;#8221; site action. The action is disabled by default, but you can enable it in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;portal_actions&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;site_actions&lt;/span&gt;&lt;/code&gt;. It adds a &amp;#8220;placeful&amp;#8221; &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;string:manage_main&lt;/span&gt;&lt;/code&gt; link so you can access the ZMI wherever you happen to be on the site.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">repoze.bfg Tonight</title>
    <id>http://blog.aclark.net/2008/09/02/repoze-bfg-tonight-ftw/</id>
    <updated>2008-09-02T00:00:00Z</updated>
    <published>2008-09-02T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/09/02/repoze-bfg-tonight-ftw/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;repoze-bfg-tonight&quot;&gt;

&lt;p&gt;&lt;strong&gt;Tonight ex-Zope Corporation developer Chris McDonough unveils his BFG&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From the &lt;a class=&quot;reference external&quot; href=&quot;http://static.repoze.org/bfgdocs/&quot;&gt;docs&lt;/a&gt;, BFG is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;is a &lt;strong&gt;Python web application framework&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;is inspired by Zope’s publisher, though it is less ambitious in scope.&lt;/li&gt;
&lt;li&gt;relies heavily on Zope libraries and WSGI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Familiarity&lt;/strong&gt;: As web developers, we’ve become accustomed to working in very particular ways (primarily using Zope 2) over the years.&amp;nbsp;This framework is a canonization of practices that “fit our&amp;nbsp;brains”.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Placeful Theming</title>
    <id>http://blog.aclark.net/2008/06/02/placeful-theming/</id>
    <updated>2008-06-02T00:00:00Z</updated>
    <published>2008-06-02T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/06/02/placeful-theming/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;placeful-theming&quot;&gt;

&lt;p&gt;&lt;strong&gt;For some themed location /foo/bar, you want &amp;#8220;bar&amp;#8221; and everything below it to look different than &amp;#8220;foo&amp;#8221;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had to do a bit of placeful theming lately and I thought I would share the techniques I used (thanks davisagli, jonbaldievieso, vedawms). Let&amp;#8217;s say you have a Plone 3 site, and for some location /foo/bar/baz, you want &amp;#8216;baz&amp;#8217; and everything below it to look different. I made this change through the web because I was in a hurry, but the same can be done in filesystem code.&lt;/p&gt;
&lt;p&gt;The steps are:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;override-getsectionfromurl-navigate-to-portal-skins-plone-scripts-getsectionfromurl-and-customize&quot;&gt;
&lt;h2&gt;1. Override getSectionFromURL (navigate to portal_skins/plone_scripts/getSectionFromURL and customize)&lt;/h2&gt;
&lt;p&gt;Normally, this bit of code returns the section id for whatever section you are in. So if your site has three top level folders A, B, C, getSectionURL returns section-A when you are inside of A, section-B when you are inside of B, and so on. However, when you are inside of a sub-section, e.g. /A/news-items-folder, it *still* returns the section id, in this case section-A. The override makes getSectionURL return the sub-section, e.g. /A/news-items-folder, or /foo/bar/baz.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Courtesy of jonb at onenw.org&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# getSectionFromURLcontentPath = context.portal_url.getRelativeContentPath(context)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sectionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathItem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sectionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;section-&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;override-plone-logo-navigate-to-portal-view-customizations-zope-interface-interface-plone-logo-and-customize&quot;&gt;
&lt;h2&gt;2. Override plone.logo (navigate to /portal_view_customizations/zope.interface.interface-plone.logo and customize)&lt;/h2&gt;
&lt;p&gt;For some reason (good or not, I don&amp;#8217;t know) Plone includes an image tag in the html code it uses to generate the Plone logo. This means that it will always output something like:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;img src=&amp;quot;logo.jpg&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;which is a problem if you want to placefully replace the logo because there is no easy way to do it (perhaps you could use some trick to return a different image file with the same file name).&lt;/p&gt;
&lt;p&gt;Plone ships with:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;a metal:define-macro=&amp;quot;portal_logo&amp;quot; id=&amp;quot;portal-logo&amp;quot; accesskey=&amp;quot;1&amp;quot; tal:attributes=&amp;quot;href view/navigation_root_url&amp;quot; i18n:domain=&amp;quot;plone&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;logo.jpg&amp;quot; alt=&amp;quot;&amp;quot; tal:replace=&amp;quot;structure view/logo_tag&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Replace that with:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;div metal:define-macro=&amp;quot;portal_logo&amp;quot; id=&amp;quot;portal-logo&amp;quot;&amp;gt;&amp;lt;a accesskey=&amp;quot;1&amp;quot; tal:attributes=&amp;quot;href view/navigation_root_url&amp;quot; i18n:domain=&amp;quot;plone&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;add-css-navigate-to-portal-skins-plone-styles-plonecustom-css-and-customize&quot;&gt;
&lt;h2&gt;3. Add CSS (Navigate to /portal_skins/plone_styles/ploneCustom.css and customize)&lt;/h2&gt;
&lt;p&gt;Next, add in some CSS to make use of the previous two changes:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;body.section-foo-bar-baz { background-image: url(gradient.png);}.section-foo-bar-baz
#portal-globalnav li a { border: 0px; background: #0066CC; color: white; font-size: 110%; font-face: bold;}.section-foo-bar-baz
#portal-globalnav { background: #0066CC; padding: 0.25em;}.section-foo-bar-baz
#portal-breadcrumbs,.section-foo-bar-baz #portal-personaltools { background: white;}.section-foo-bar-baz
#portal-top { background: white;}.section-foo-bar-baz
#portal-logo { margin: 1em; background-image: url(ama_logo.gif); background-repeat: no-repeat;}.section-foo-bar-baz
#visual-portal-wrapper { background: white; margin: auto; width: 883px; position: relative;}.section-foo-bar-baz
body { background-image: url(gradient.png); background-repeat: repeat;}
#portal-logo { margin: 1em; background-image: url(logo.jpg); background-repeat: no-repeat;}
#portal-logo a { display: block; width: 650px; height: 80px;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I hope this helps someone get started with placeful theming.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Help Me Upgrade plone.org</title>
    <id>http://blog.aclark.net/2008/04/18/help-me-upgrade-plone-org/</id>
    <updated>2008-04-18T00:00:00Z</updated>
    <published>2008-04-18T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/04/18/help-me-upgrade-plone-org/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;help-me-upgrade-plone-org&quot;&gt;

&lt;p&gt;&lt;strong&gt;Because plone.org should run the latest Plone&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You may be wondering why plone.org is not running the latest version of Plone. Well wonder no more! By the end of this month, it will be. I have been &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/log/PloneOrg/buildouts/branches/3.0&quot;&gt;working on&lt;/a&gt;the various bits and pieces needed to upgrade for months, including:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Testing the &amp;#8220;live&amp;#8221; Data.fs against the latest release of Plone.&lt;/li&gt;
&lt;li&gt;Converting old-style Zope 2 Products to eggs.&lt;/li&gt;
&lt;li&gt;Rallying the troops to contribute as needed.&lt;/li&gt;
&lt;li&gt;Becoming a plone.org admin so I can drive the process myself.&lt;/li&gt;
&lt;li&gt;and much, much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I can promise you that tremendous progress will be made at the Paris sprint next week, including:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Finalization of the dist-utils enabled PloneSoftwareCenter that will be used.&lt;/li&gt;
&lt;li&gt;Adding blob support to PloneSoftwareCenter (Witsch, can you help?)&lt;/li&gt;
&lt;li&gt;Migrating all PSCFile objects from ExternalStorage to blob.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So please, if you would like to see an upgraded plone.org as much as I would, please consider making a generous donation to my travel fund. I&amp;#8217;d like to raise around $1000 to get reimbursed for my airfare only; I will be sleeping on a donated couch. The suggested donation amount is $50-100, but any amount is welcome. Thank you all very much!!! And thanks to everyone that has helped with the upgrade so far including but not limited to: Limi, Wiggy, SteveM, Tarek, Maurits, Newbery, Jens, Witsch, MattBowen!&lt;/p&gt;
&lt;p&gt;Lastly, I promise to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Cut the fundraiser off as soon as I reach my goal, and&lt;/li&gt;
&lt;li&gt;Report back with results by the end of the month.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now without further ado, please donate-away!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Take Back The Tap</title>
    <id>http://blog.aclark.net/2008/03/17/take-back-the-tap/</id>
    <updated>2008-03-17T00:00:00Z</updated>
    <published>2008-03-17T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/03/17/take-back-the-tap/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;take-back-the-tap&quot;&gt;

&lt;p&gt;&lt;strong&gt;Promote tap water over bottled water&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;ACLARK.NET, LLC&lt;/a&gt; is proud to announce &lt;a class=&quot;reference external&quot; href=&quot;http://www.takebackthetap.org&quot;&gt;http://www.takebackthetap.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following software was used to deploy this site:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/plone&quot;&gt;Plone 3.0.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/ploneformgen&quot;&gt;PloneFormGen 1.2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/redirectiontool&quot;&gt;RedirectionTool 1.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/plone-seo&quot;&gt;qSEOptimizer 1.0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/webcouturier-dropdownmenu&quot;&gt;webcouturier.dropdownmenu 1.1.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Buildout Recipe Tip: hexagonit.recipe.download</title>
    <id>http://blog.aclark.net/2007/11/28/zcbuildout-recipe-tip-hexagonitrecipedownload-ftw-for-the-win/</id>
    <updated>2007-11-28T00:00:00Z</updated>
    <published>2007-11-28T00:00:00Z</published>
    <link href="http://blog.aclark.net/2007/11/28/zcbuildout-recipe-tip-hexagonitrecipedownload-ftw-for-the-win/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;buildout-recipe-tip-hexagonit-recipe-download&quot;&gt;

&lt;p&gt;&lt;strong&gt;How to handle difficult old-style add-ons.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes an &amp;#8220;old-style&amp;#8221; add-on is distributed as &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;foo.tar.gz&lt;/span&gt;&lt;/code&gt; and extracts to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;foo/&lt;/span&gt;&lt;/code&gt;, but the package is called &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bar&lt;/span&gt;&lt;/code&gt;. This can be a problem when using the &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;plone.recipe.productdistros&lt;/span&gt;&lt;/code&gt; recipe because when &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bar&lt;/span&gt;&lt;/code&gt; is extracted to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;parts/productdistros/foo&lt;/span&gt;&lt;/code&gt; it will not work.&lt;/p&gt;
&lt;p&gt;Fortunately there is &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hexagonit.recipe.download&lt;/span&gt;&lt;/code&gt;, which allows you to specify the destination. For example, &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/Products.ZNagios&quot;&gt;ZNagios&lt;/a&gt; (an add-on that integrates Zope with Nagios) is available as a tarball here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar&quot;&gt;http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we use productdistros, we end up with ZNagios installed in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;parts/productdistros/trunk&lt;/span&gt;&lt;/code&gt;. But if we use &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hexagonit.recipe.download&lt;/span&gt;&lt;/code&gt; we can control the destination.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
parts = znagios

[znagios]
recipe = hexagonit.recipe.download
url = http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar
destination = products/ZNagios
strip-top-level-dir = True
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After running Buildout you should have the following in your &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;products/&lt;/span&gt;&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/products/ZNagios
/products/ZNagios/COPYRIGHT.txt
/products/ZNagios/LICENSE.txt
/products/ZNagios/README.txt
/products/ZNagios/__init__.py
/products/ZNagios/check_zope.py
/products/ZNagios/munin_client.py
/products/ZNagios/version.txt
/products/ZNagios/zeo_munin.py
/products/ZNagios/zope.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Zope User Groups</title>
    <id>http://blog.aclark.net/2007/11/20/usergroup-a-palooza/</id>
    <updated>2007-11-20T00:00:00Z</updated>
    <published>2007-11-20T00:00:00Z</published>
    <link href="http://blog.aclark.net/2007/11/20/usergroup-a-palooza/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;zope-user-groups&quot;&gt;

&lt;p&gt;&lt;strong&gt;Updated Zope User Group Information&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today I updated &lt;a class=&quot;reference external&quot; href=&quot;http://www.zope.org/Resources/UserGroups&quot;&gt;http://www.zope.org/Resources/UserGroups&lt;/a&gt;. Most of the information came from &lt;a class=&quot;reference external&quot; href=&quot;http://trizpug.org&quot;&gt;Chris Calloway&lt;/a&gt;. Now it&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://www.zope.org/Resources/UserGroups/index_html_old&quot;&gt;better than the old one&lt;/a&gt; and should be easier to maintain.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Repoze Meetups</title>
    <id>http://blog.aclark.net/2007/10/28/repoze-meetups/</id>
    <updated>2007-10-28T00:00:00Z</updated>
    <published>2007-10-28T00:00:00Z</published>
    <link href="http://blog.aclark.net/2007/10/28/repoze-meetups/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;repoze-meetups&quot;&gt;

&lt;p&gt;&lt;strong&gt;Plumbing Zope into the WSGI Pipeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As Paul Everitt &lt;a class=&quot;reference external&quot; href=&quot;http://radio.weblogs.com/0116506/2007/10/26.html#a440&quot;&gt;recently&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://radio.weblogs.com/0116506/2007/10/26.html#a441&quot;&gt;mentioned&lt;/a&gt;, the &lt;a class=&quot;reference external&quot; href=&quot;http://agendaless.com&quot;&gt;dudes&lt;/a&gt; are back. Three self-described graybeards doing what they love: Zope. But this is not your father&amp;#8217;s Zope. This is Repoze, which integrates Zope technologies with WSGI and reusable Python middleware. &lt;a class=&quot;reference external&quot; href=&quot;http://plope.com&quot;&gt;One of the dudes&lt;/a&gt; will be delivering the first of a two part presentation on &lt;a class=&quot;reference external&quot; href=&quot;http://repoze.org&quot;&gt;Repoze&lt;/a&gt; tonight in DC. Next month, he&amp;#8217;ll be joined by &lt;a class=&quot;reference external&quot; href=&quot;http://palladion.com&quot;&gt;the other dude&lt;/a&gt; and possibly Paul Everitt himself.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">Help Improve Plone's API Documentation</title>
    <id>http://blog.aclark.net/2007/10/17/help-improve-plones-api-documentation/</id>
    <updated>2007-10-17T00:00:00Z</updated>
    <published>2007-10-17T00:00:00Z</published>
    <link href="http://blog.aclark.net/2007/10/17/help-improve-plones-api-documentation/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;help-improve-plone-s-api-documentation&quot;&gt;

&lt;p&gt;&lt;strong&gt;Sponsor my trip to the Plone Doccom Sprint in California&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m travelling from Washington, DC, USA to Mountain View, CA, USA June 26 - 29 to participate in the 2007 &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/events/sprints/doc-ecommerce&quot;&gt;Plone Doccomm Sprint&lt;/a&gt;. My main focus will be updating &lt;a class=&quot;reference external&quot; href=&quot;http://api.plone.org&quot;&gt;Plone&amp;#8217;s online API documentation&lt;/a&gt;. If you are interested in seeing this done and would like to help, please consider making a donation to help offset the cost of my airfare. In return, I will create and upload API documentation for:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;Plone-2.5.3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archetypes-1.4.4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CMF-1.6.4&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;Plone-3.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archetypes-1.5.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CMF-2.1.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I plan to use either &lt;a class=&quot;reference external&quot; href=&quot;http://epydoc.sourceforge.net/&quot;&gt;Epydoc&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/pudge&quot;&gt;Pudge&lt;/a&gt;, suggestions welcome.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/python/atom.xml">
    <title type="text">First Post</title>
    <id>http://blog.aclark.net/2007/10/17/first-post/</id>
    <updated>2007-10-17T00:00:00Z</updated>
    <published>2007-10-17T00:00:00Z</published>
    <link href="http://blog.aclark.net/2007/10/17/first-post/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;first-post&quot;&gt;

&lt;p&gt;&lt;strong&gt;I have decided to start a blog!&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt=&quot;../../../_images/balloons_clip_art_15536.jpg&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/balloons_clip_art_15536.jpg&quot; /&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Why? Because Plone allows me to do so. But also:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I have been reading a lot of Plone blogs lately and they have inspired me to write my own.&lt;/li&gt;
&lt;li&gt;I want to interact with other Plonistas.&lt;/li&gt;
&lt;li&gt;I want to get my web 2.0 on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To that end, this post is about my &lt;a class=&quot;reference external&quot; href=&quot;http://svn.plone.org/svn/collective/newzope&quot;&gt;build tools&lt;/a&gt; and how I love them. Note there are other ways to accomplish this task, for example:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.buildout.org&quot;&gt;Buildout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://agendaless.com/Members/chrism/software/buildit&quot;&gt;Buildit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://plone.org/products/instance-manager&quot;&gt;Instance Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used Buildout for the first time at the &lt;a class=&quot;reference external&quot; href=&quot;https://plone.org/events/sprints/past-sprints/baarn-ui-sprint-2007&quot;&gt;Baarn UI Sprint 2007&lt;/a&gt; and liked it. I&amp;#8217;ve also used Chris McDonough&amp;#8217;s Buildit. That may be where I end up, and there are several more to choose from, but for now I enjoy typing:&lt;/p&gt;
&lt;style&gt;
pre:before { content: '$ ' }
&lt;/style&gt;

&lt;pre&gt;
newzope test-site ProductA ProductB ProductC
&lt;/pre&gt;&lt;p&gt;and having a working instance a few seconds later with Product{A,B,C} installed. Of course this requires I have a working Zope already... and that I edit Zope&amp;#8217;s &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;skel/etc/zope.conf&lt;/span&gt;&lt;/code&gt;... but nothing is perfect... and old habits die hard.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
