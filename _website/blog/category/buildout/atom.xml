<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Alex Clark's Blog - Posts in Buildout</title>
  <id>http://blog.aclark.net/blog/category/buildout/atom.xml</id>
  <updated>2015-06-27T00:00:00Z</updated>
  <link href="http://blog.aclark.net" />
  <link href="http://blog.aclark.net/blog/category/buildout/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.8.3">ABlog</generator>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Plone on Heroku</title>
    <id>http://blog.aclark.net/2015/06/27/plone-on-heroku/</id>
    <updated>2015-06-27T00:00:00Z</updated>
    <published>2015-06-27T00:00:00Z</published>
    <link href="http://blog.aclark.net/2015/06/27/plone-on-heroku/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-on-heroku&quot;&gt;

&lt;p&gt;&lt;strong&gt;Dear Plone, welcome to 2015&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Picture it. The year was 2014. I was incredibly moved and inspired by this blog entry:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.niteoweb.com/blog/dear-plone-welcome-to-2014&quot;&gt;http://www.niteoweb.com/blog/dear-plone-welcome-to-2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Someone had finally done it. (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/zupo&quot;&gt;zupo&lt;/a&gt; in this case, kudos!) Someone had finally beat me to implementing the dream of &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;heroku&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;plone&lt;/span&gt;&lt;/code&gt;. And I could not have been happier.&lt;/p&gt;
&lt;p&gt;But something nagging would not let go: I still &lt;strong&gt;didn&amp;#8217;t fully understand how the buildpack worked&lt;/strong&gt;. Today I&amp;#8217;m happy to say: that nag is gone and I now fully understand how Heroku buildpacks work… thanks to…&amp;nbsp;wait for it… a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/buildpack/blob/master/bin/compile&quot;&gt;Buildpack for Plock&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;plock-buildpack&quot;&gt;
&lt;h2&gt;Plock Buildpack&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s a lot of the same things going on in both the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plone/heroku-buildpack-plone&quot;&gt;Plone Buildpack&lt;/a&gt; and the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/buildpack/blob/master/bin/compile&quot;&gt;Plock Buildpack&lt;/a&gt;, with some exceptions.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;experimental&quot;&gt;
&lt;h3&gt;Experimental&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;Plock buildpack is highly experimental, still in development and possibly innovative&lt;/strong&gt;. Here&amp;#8217;s what it currently does:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Configures Python user site directory in Heroku cache&lt;/li&gt;
&lt;li&gt;Installs setuptools in user site&lt;/li&gt;
&lt;li&gt;Installs pip in user site&lt;/li&gt;
&lt;li&gt;Installs Buildout in user site&lt;/li&gt;
&lt;li&gt;Installs Plone in cache&lt;/li&gt;
&lt;li&gt;Copies cache to build directory&lt;/li&gt;
&lt;li&gt;Installs a portion of &amp;#8220;user Plone&amp;#8221; (the Heroku app&amp;#8217;s buildout.cfg) in the build directory (not the cache)&lt;/li&gt;
&lt;li&gt;Relies on the app to install the remainder (the Heroku app&amp;#8217;s heroku.cfg). &lt;strong&gt;Most importantly the app runs Buildout which finishes quickly thanks to the cache &amp;amp; configures the port which is only available to the app (not the buildpack.)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/plone-demo&quot;&gt;an example&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# buildout.cfg
[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3

[user]
packages = collective.loremipsum
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# heroku.cfg
[buildout]
extends = buildout.cfg

[plone]
http-address = ${env:PORT}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Procfile
web: buildout -c heroku.cfg; plone console
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;opinionated&quot;&gt;
&lt;h3&gt;Opinionated&lt;/h3&gt;
&lt;p&gt;The Plock Buildpack is built on Plock, an &amp;#8220;opinionated&amp;#8221; installer for Plone. It may eventually use &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/plock/0.4.0&quot;&gt;Plock&lt;/a&gt; itself, but currently only uses &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/pins&quot;&gt;Plock Pins&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Plock Rocks</title>
    <id>http://blog.aclark.net/2015/04/26/plock-rocks/</id>
    <updated>2015-04-26T00:00:00Z</updated>
    <published>2015-04-26T00:00:00Z</published>
    <link href="http://blog.aclark.net/2015/04/26/plock-rocks/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plock-rocks&quot;&gt;

&lt;p&gt;&lt;strong&gt;Pip installs Plock. Plock installs Plone.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;Plock Meme&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plock-meme.png&quot; /&gt;
&lt;div class=&quot;section&quot; id=&quot;understanding-plock&quot;&gt;
&lt;h2&gt;Understanding Plock&lt;/h2&gt;
&lt;p&gt;To understand Plock, you must understand:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The undisputed complexity of the Plone stack &lt;a class=&quot;footnote-reference&quot; href=&quot;#id15&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;My desire to simplify, clarify and reduce-to-bare-elements everything I touch.&lt;/li&gt;
&lt;li&gt;My willingness to mask complexity when eliminating it is not possible, despite the risk of contributing to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pyramid author Chris McDonough &lt;a class=&quot;footnote-reference&quot; href=&quot;#id16&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt; once made a comment a long time ago to the effect: &amp;#8220;Let&amp;#8217;s stop piling more crap on top of Plone&amp;#8221; and that sentiment still resonates today. That&amp;#8217;s why even though I love small and useful tools like Plock, it pains me to know what Plock is doing &amp;#8220;under the hood&amp;#8221; &lt;a class=&quot;footnote-reference&quot; href=&quot;#id20&quot; id=&quot;id3&quot;&gt;[7]&lt;/a&gt;. Nevertheless, I felt compelled to write it because not having it is worse.&lt;/p&gt;
&lt;p&gt;Before I tell you what Plock is &lt;a class=&quot;footnote-reference&quot; href=&quot;#id21&quot; id=&quot;id4&quot;&gt;[8]&lt;/a&gt;, let me briefly describe what Plone is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-plone-really&quot;&gt;
&lt;h2&gt;What is Plone, really?&lt;/h2&gt;
&lt;p&gt;What is the complexity I mention above? Briefly, with as few loaded statements as possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Zope2&lt;/strong&gt; &amp;#8220;application server&amp;#8221;. This is something you can &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt;&lt;/code&gt; but the results will not be usable &lt;a class=&quot;footnote-reference&quot; href=&quot;#id17&quot; id=&quot;id5&quot;&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Zope2 add-ons&lt;/strong&gt; AKA &amp;#8220;products&amp;#8221;, most notably the Zope2 Content Management Framework (CMF). This is something you install on top of Zope2 (conceptually but not literally, &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Products.CMFCore&lt;/span&gt;&lt;/code&gt;) that provides typical content management features e.g. personalization, workflow, cataloging, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Zope3&lt;/strong&gt; technologies e.g. the Zope Component Architecture (ZCA). These are things that are included-or-integrated with Zope2 and Plone. &lt;a class=&quot;footnote-reference&quot; href=&quot;#id18&quot; id=&quot;id6&quot;&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Buildout&lt;/strong&gt; technologies e.g. setuptools, console scripts, recipes, extensions, etc. You can&amp;#8217;t easily build Plone without them, so we may as well declare them as dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Plone&lt;/strong&gt; technologies. Plone was originally known as a &amp;#8220;skin for CMF&amp;#8221; but has become much more than that.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;Archetypes&lt;/strong&gt; Legacy content type framework.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dexterity&lt;/strong&gt; Modern content type framework based on modern Zope concepts e.g. &amp;#8220;Reuse over reinvention&amp;#8221;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diazo&lt;/strong&gt; Modern theming engine based on XSLT that &amp;#8220;maps Plone content to generic website themes.&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In total, if you &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Plone&lt;/span&gt;&lt;/code&gt; over 200 Python packages are installed &lt;a class=&quot;footnote-reference&quot; href=&quot;#id19&quot; id=&quot;id7&quot;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-plock-really&quot;&gt;
&lt;h2&gt;What is Plock, really?&lt;/h2&gt;
&lt;p&gt;OK now it&amp;#8217;s time to explain Plock. Plock is something:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;you &lt;strong&gt;install from PyPI&lt;/strong&gt; via &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;plock&lt;/span&gt;&lt;/code&gt;. &amp;#8220;Pip installs packages. Plock installs Plone.&amp;#8221;&lt;/li&gt;
&lt;li&gt;you use to &lt;strong&gt;install Plone&lt;/strong&gt; without having to know about tarballs or Buildout.&lt;/li&gt;
&lt;li&gt;you use to &lt;strong&gt;install Plone add-ons&lt;/strong&gt; without having to know about Buildout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In one sentence: Plock runs Buildout so you don&amp;#8217;t have to, at least initially.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;first-steps-with-plock&quot;&gt;
&lt;h2&gt;First steps with Plock&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;step-1&quot;&gt;
&lt;h3&gt;Step #1&lt;/h3&gt;
&lt;p&gt;The first step with Plock &lt;a class=&quot;footnote-reference&quot; href=&quot;#id22&quot; id=&quot;id8&quot;&gt;[9]&lt;/a&gt; is that light bulb moment when you say to yourself: &amp;#8220;I&amp;#8217;ve heard that Plone is the ultimate open source enterprise CMS and I&amp;#8217;d love to try it!&amp;#8221; But you aren&amp;#8217;t willing to download a compressed archive and run the installer nor are you willing to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;zc.buildout&lt;/span&gt;&lt;/code&gt; and figure the rest out for yourself. Enter Plock.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-2&quot;&gt;
&lt;h3&gt;Step #2&lt;/h3&gt;
&lt;p&gt;The second step with Plock is knowing that it exists you can install it with: &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;plock&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-3&quot;&gt;
&lt;h3&gt;Step #3&lt;/h3&gt;
&lt;p&gt;The third step with Plock is using it to install Plone:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ plock plone
Creating virtualenv... (plone)
Installing buildout...
Downloading installer (https://launchpad.net/plone/4.3/4.3.4/+download/Plone-4.3.4-r1-UnifiedInstaller.tgz)
Unpacking installer...
Unpacking cache...
Installing eggs...
Installing cmmi &amp;amp; dist...
Configuring cache...
Running buildout...
Done, now run:
  plone/bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now Plock&amp;#8217;s work is done; visit the following URL: &lt;a class=&quot;reference external&quot; href=&quot;http:://localhost:8080&quot;&gt;http:://localhost:8080&lt;/a&gt; and you should see:&lt;/p&gt;
&lt;img alt=&quot;Plock Screen 1&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plock-screen-1.png&quot; /&gt;
&lt;p&gt;Create a Plone site:&lt;/p&gt;
&lt;img alt=&quot;Plock Screen 2&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plock-screen-2.png&quot; /&gt;
&lt;p&gt;Start using Plone:&lt;/p&gt;
&lt;img alt=&quot;Plock Screen 3&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plock-screen-3.png&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;next-steps-with-plock&quot;&gt;
&lt;h2&gt;Next steps with Plock&lt;/h2&gt;
&lt;p&gt;Plock is more than just a way to install the latest stable version of Plone quickly and easily. It&amp;#8217;s also a way to find and install Plone add-ons quickly and easily, and a way to install almost any version of Plone including the upcoming Plone 5 release.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;installing-add-ons&quot;&gt;
&lt;h3&gt;Installing Add-ons&lt;/h3&gt;
&lt;div class=&quot;section&quot; id=&quot;id9&quot;&gt;
&lt;h4&gt;Step #1&lt;/h4&gt;
&lt;p&gt;List all Plone-related packages on PyPI:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ plock -l
1) 73.unlockItems                           - A small tool for unlocking web_dav locked item in a plone portal.
2) actionbar.panel                          - Provides a (old) facebook style action panel at the bottom of your  Plone site
3) adi.init                                 - Deletes Plone&amp;#39;s default contents
4) adi.samplecontent                        - Deletes Plone&amp;#39;s default content and adds some sample content
5) adi.slickstyle                           - A slick style for Plone portals, easily extendable for your own styles.
6) affinitic.simplecookiecuttr              - Basic integration of jquery.cookiecuttr.js for Plone 3
7) anthill.querytool                        - GUI for AdvancedQuery with some extensions - searching the easy way for Plone
8) anthill.skinner                          - Skinning for plone made easy
9) anz.dashboard                            - Plone netvibes like dashboard implementation
10) anz.ijabbar                              - Integrate iJab(an open source XMPP web chat client recommended by xmpp.org) to your plone site.
…
1,352) zopeskel.diazotheme                      - Paster templates for Plone Diazo theme package
1,353) zopeskel.niteoweb                        - Paster templates for standard NiteoWeb Plone projects
1,354) zopyx.ecardsng                           - An ECard implementation for Plone
1,355) zopyx.existdb                            - Plone-ExistDB integration
1,356) zopyx.ipsumplone                         - Lorem ipsum text and image demo content for Plone
1,357) zopyx.multieventcalendar                 - A multi-event calendar for Plone 3.X
1,358) zopyx.plone.cassandra                    - Show all assigned local roles within a subtree for any Plone 4 site
1,359) zopyx.plone.migration                    - Export/import scripts for migration Plone 2+3 to Plone 4
1,360) zopyx.smartprintng.plone                 - Produce &amp;amp; Publisher server integration with Plone
1,361) zopyx.together                           - Plone integration with together.js
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id10&quot;&gt;
&lt;h4&gt;Step #2&lt;/h4&gt;
&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;Plock currently only supports the initial creation of &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt;, so if you have already run &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;plock&lt;/span&gt;&lt;/code&gt; once and you want to install add-ons you&amp;#8217;ll have to use &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-f&lt;/span&gt;&lt;/code&gt; to overwrite &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Pick a few interesting things and install them:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ plock plone -i &amp;quot;Products.PloneFormGen collective.plonetruegallery eea.facetednavigation&amp;quot;
Creating virtualenv... (plone)
Installing buildout...
Downloading installer (https://launchpad.net/plone/4.3/4.3.4/+download/Plone-4.3.4-r1-UnifiedInstaller.tgz)
Unpacking installer...
Unpacking cache...
Installing eggs...
Installing cmmi &amp;amp; dist...
Configuring cache...
Installing addons...
- https://pypi.python.org/pypi/Products.PloneFormGen
- https://pypi.python.org/pypi/collective.plonetruegallery
- https://pypi.python.org/pypi/eea.facetednavigation
Running buildout...
Done, now run:
  plone/bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you should see your add-ons available in Plone:&lt;/p&gt;
&lt;img alt=&quot;Plock Screen 6&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plock-screen-6.png&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;upgrading-plone&quot;&gt;
&lt;h3&gt;Upgrading Plone&lt;/h3&gt;
&lt;div class=&quot;section&quot; id=&quot;id11&quot;&gt;
&lt;h4&gt;Step #1&lt;/h4&gt;
&lt;p&gt;Realize Plock has created a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; file you can edit with a text editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id12&quot;&gt;
&lt;h4&gt;Step #2&lt;/h4&gt;
&lt;p&gt;Also realize Plock hosts &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/pins&quot;&gt;Buildout configuration files called Pins&lt;/a&gt; you can &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;extend&lt;/span&gt;&lt;/code&gt; from your local &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; file &lt;a class=&quot;footnote-reference&quot; href=&quot;#id23&quot; id=&quot;id13&quot;&gt;[10]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id14&quot;&gt;
&lt;h4&gt;Step #3&lt;/h4&gt;
&lt;p&gt;Edit your &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; file. Change the first &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;extends&lt;/span&gt;&lt;/code&gt; URL from:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-4-3
#    https://raw.github.com/plock/pins/master/dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-5-0
#    https://raw.github.com/plock/pins/master/dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Run Buildout and start Plone:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout
$ bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Enjoy the Plone 5 running man:&lt;/p&gt;
&lt;img alt=&quot;Plock Screen 5&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plock-screen-5.png&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;tl-dr&quot;&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Cut and paste this into a terminal:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install plock; plock plone; plone/bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now open &lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; and happy Ploning.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Plock 0.3.0 is out! Install with&lt;/em&gt; &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;plock&lt;/span&gt;&lt;/code&gt; &lt;em&gt;and report issues here:&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/plock/issues&quot;&gt;https://github.com/plock/plock/issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;footnotes&quot;&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id15&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Whether or not dealing with the complexity is worth it, I will not address. Suffice it to say, plenty of folks still use and care about Plone and with a Plone 5 release pending, there is excitement building.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id16&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;He probably made it many times, and rightfully so.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id17&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id5&quot;&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You can create an &amp;#8220;instance&amp;#8221; after &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;zope2&lt;/span&gt;&lt;/code&gt; with &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bin/mkzopeinstance&lt;/span&gt;&lt;/code&gt; but &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;$INSTANCE/bin/runzope&lt;/span&gt;&lt;/code&gt; fails with &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ImportError:&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;cannot&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;_error_start&lt;/span&gt;&lt;/code&gt; probably due to mismanaged package versions. Maybe we can fix this with version specs included in a dummy package&amp;#8217;s &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;setup.py&lt;/span&gt;&lt;/code&gt;?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id18&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id6&quot;&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The integration is &lt;em&gt;not&lt;/em&gt; seemless, an undisputed fact as far as I know.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id19&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id7&quot;&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;235&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id20&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id3&quot;&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Creating and executing a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; file for the end user. Buildout configuration files are written in INI-style text. Ideally the end user sees this file and says &amp;#8220;Ah, now I understand how this works.&amp;#8221;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id21&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id4&quot;&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I&amp;#8217;ve also &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2013/07/19/introducing-plock/&quot;&gt;covered&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2013/07/29/whats-new-as-of-plock-0-1-2/&quot;&gt;Plock&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2013/12/29/introducing-plock-again/&quot;&gt;before&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2014/03/20/introducing-plock-pins/&quot;&gt;here&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id22&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id8&quot;&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As someone familiar with Python and a UNIX shell already, because that is the market I like to serve.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id23&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id13&quot;&gt;[10]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes, there is a security and/or reliability issue with doing this; you are clearly trading security and reliability for convenience.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;script data-gratipay-username=&quot;aclark4life&quot; src=&quot;//grtp.co/v1.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">I Love collective-recipe-plonesite</title>
    <id>http://blog.aclark.net/2014/06/02/i-love-collective-recipe-plonesite/</id>
    <updated>2014-06-02T00:00:00Z</updated>
    <published>2014-06-02T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/06/02/i-love-collective-recipe-plonesite/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;i-love-collective-recipe-plonesite&quot;&gt;

&lt;p&gt;&lt;strong&gt;Whenever I answer tech support questions, I usually begin with a clean slate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;E.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install tmp virtualenv
$ cd `tmp`
$ virtualenv .
$ bin/pip install zc.buildout
$ bin/buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then I edit &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then I run Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And because my &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.buildout/default.cfg&lt;/span&gt;&lt;/code&gt; file looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
eggs-directory = /Users/aclark/Developer/eggs-directory
download-cache = /Users/aclark/Developer/download-cache
extends-cache = /Users/aclark/Developer/extends-cache
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;, the entire process only takes a few seconds (except for when I &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2014/03/19/virtualenv-support-update/&quot;&gt;run into trouble with setuptools&lt;/a&gt;. I should probably start doing &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;virtualenv&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;--no-setuptools&lt;/span&gt;&lt;/code&gt;. Perhaps this can be made default?)&lt;/p&gt;
&lt;p&gt;If I&amp;#8217;m in the mood to search the source code, I add the following:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-4-3
    https://raw.github.com/plock/pins/master/dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then I run Buildout, after which I can easily search in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;parts/omelette&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;plone-site-debug&quot;&gt;
&lt;h2&gt;Plone site debug&lt;/h2&gt;
&lt;p&gt;Anyway, sometimes instead of running Plone through-the-web I want to run a debug prompt instead. All that is required is:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone debug
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However at this point there is no Plone site object in the database. One could easily create a Plone site through-the-web, but why bother when &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/collective.recipe.plonesite&quot;&gt;collective.recipe.plonesite&lt;/a&gt; exists:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-4-3
    https://raw.github.com/plock/pins/master/dev
parts += plonesite

[plonesite]
recipe = collective.recipe.plonesite
instance = plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After running Buildout, now I can examine the Plone site:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone debug
Starting debugger (the name &amp;quot;app&amp;quot; is bound to the top-level Zope object)

&amp;gt;&amp;gt;&amp;gt; app.Plone.
Display all 864 possibilities? (y or n)
app.Plone.COPY(                                                 app.Plone.hasObject__roles__
app.Plone.COPY__roles__                                         app.Plone.hasProperty(
app.Plone.Contributors(                                         app.Plone.hasProperty__roles__
app.Plone.Contributors__roles__                                 app.Plone.has_local_roles(
app.Plone.CreationDate(                                         app.Plone.has_order_support
app.Plone.CreationDate__roles__                                 app.Plone.http__etag(
app.Plone.Creator(                                              app.Plone.http__parseMatchList(
app.Plone.Creator__roles__                                      app.Plone.http__processMatchHeaders(
app.Plone.DELETE(                                               app.Plone.http__refreshEtag(
app.Plone.DELETE__roles__                                       app.Plone.icon
app.Plone.Date(                                                 app.Plone.icon__roles__
app.Plone.Date__roles__                                         app.Plone.id
app.Plone.Description(                                          app.Plone.indexObject(
app.Plone.Description__roles__                                  app.Plone.invokeFactory(
app.Plone.EffectiveDate(                                        app.Plone.invokeFactory__roles__
app.Plone.EffectiveDate__roles__                                app.Plone.isAnObjectManager
app.Plone.ExpirationDate(                                       app.Plone.isEffective(
app.Plone.ExpirationDate__roles__                               app.Plone.isEffective__roles__
app.Plone.Format(                                               app.Plone.isPrincipiaFolderish
app.Plone.Format__roles__                                       app.Plone.isTopLevelPrincipiaApplicationObject
app.Plone.HEAD(                                                 app.Plone.items(
app.Plone.HEAD__roles__                                         app.Plone.items__roles__
app.Plone.HTTPCache                                             app.Plone.keys(
app.Plone.Identifier(                                           app.Plone.keys__roles__
app.Plone.Identifier__roles__                                   app.Plone.language
app.Plone.LOCK(                                                 app.Plone.listContributors(
app.Plone.LOCK__roles__                                         app.Plone.listContributors__roles__
app.Plone.Language(                                             app.Plone.listCreators(
app.Plone.Language__roles__                                     app.Plone.listCreators__roles__
app.Plone.MKCOL(                                                app.Plone.listDAVObjects(
app.Plone.MKCOL_handler(                                        app.Plone.listDAVObjects__roles__
app.Plone.MOVE(                                                 app.Plone.listFolderContents(
app.Plone.MOVE__roles__                                         app.Plone.listFolderContents__roles__
app.Plone.MailHost                                              app.Plone.list_imports(
app.Plone.ModificationDate(                                     app.Plone.manage(
app.Plone.ModificationDate__roles__                             app.Plone.manage_CopyContainerAllItems(
app.Plone.OPTIONS(                                              app.Plone.manage_CopyContainerAllItems__roles__
app.Plone.OPTIONS__roles__                                      app.Plone.manage_CopyContainerFirstItem(
app.Plone.PROPFIND(                                             app.Plone.manage_CopyContainerFirstItem__roles__
app.Plone.PROPFIND__roles__                                     app.Plone.manage_DAVget(
app.Plone.PROPPATCH(                                            app.Plone.manage_DAVget__roles__
app.Plone.PROPPATCH__roles__                                    app.Plone.manage_FTPlist(
app.Plone.PUT(                                                  app.Plone.manage_FTPlist__roles__
app.Plone.PUT_factory(                                          app.Plone.manage_FTPstat(
app.Plone.PrincipiaFind(                                        app.Plone.manage_FTPstat__roles__
app.Plone.PrincipiaFind__roles__                                app.Plone.manage_UndoForm(
app.Plone.Publisher(                                            app.Plone.manage_UndoForm__roles__
app.Plone.Publisher__roles__                                    app.Plone.manage__roles__
app.Plone.RAMCache                                              app.Plone.manage_access(
app.Plone.REQUEST                                               app.Plone.manage_access__roles__
app.Plone.ResourceRegistryCache                                 app.Plone.manage_acquiredForm(
app.Plone.Rights(                                               app.Plone.manage_acquiredForm__roles__
app.Plone.Rights__roles__                                       app.Plone.manage_acquiredPermissions(
app.Plone.SQLConnectionIDs(                                     app.Plone.manage_acquiredPermissions__roles__
app.Plone.SQLConnectionIDs__roles__                             app.Plone.manage_addDTMLDocument(
app.Plone.SiteRootAdd(                                          app.Plone.manage_addDTMLDocument__roles__
app.Plone.SiteRootAdd__roles__                                  app.Plone.manage_addDTMLMethod(
app.Plone.Subject(                                              app.Plone.manage_addDTMLMethod__roles__
app.Plone.Subject__roles__                                      app.Plone.manage_addDocument(
app.Plone.TRACE(                                                app.Plone.manage_addDocument__roles__
app.Plone.TRACE__roles__                                        app.Plone.manage_addFile(
app.Plone.Title(                                                app.Plone.manage_addFile__roles__
app.Plone.Title__roles__                                        app.Plone.manage_addFolder(
app.Plone.Type(                                                 app.Plone.manage_addFolder__roles__
app.Plone.Type__roles__                                         app.Plone.manage_addImage(
app.Plone.UNLOCK(                                               app.Plone.manage_addImage__roles__
app.Plone.UNLOCK__roles__                                       app.Plone.manage_addLocalRoles(
app.Plone.ZQueryIds(                                            app.Plone.manage_addLocalRoles__roles__
app.Plone.ZQueryIds__roles__                                    app.Plone.manage_addOrderedFolder(
app.Plone.ZopeFind(                                             app.Plone.manage_addOrderedFolder__roles__
app.Plone.ZopeFindAndApply(                                     app.Plone.manage_addPortalFolder(
app.Plone.ZopeFindAndApply__roles__                             app.Plone.manage_addPortalFolder__roles__
app.Plone.ZopeFind__roles__                                     app.Plone.manage_addProduct
app.Plone._ATContentTypes__Add_Document_Permission              app.Plone.manage_addProperty(
app.Plone._ATContentTypes__Add_Event_Permission                 app.Plone.manage_addProperty__roles__
app.Plone._ATContentTypes__Add_File_Permission                  app.Plone.manage_addSiteRoot(
app.Plone._ATContentTypes__Add_Folder_Permission                app.Plone.manage_addSiteRootForm(
app.Plone._ATContentTypes__Add_Image_Permission                 app.Plone.manage_addSiteRootForm__roles__
app.Plone._ATContentTypes__Add_Link_Permission                  app.Plone.manage_addSiteRoot__roles__
app.Plone._ATContentTypes__Add_News_Item_Permission             app.Plone.manage_addUserFolder(
app.Plone._Access_arbitrary_user_session_data_Permission        app.Plone.manage_addUserFolder__roles__
app.Plone._Access_contents_information_Permission               app.Plone.manage_afterAdd(
app.Plone._Access_inactive_portal_content_Permission            app.Plone.manage_afterAdd__roles__
app.Plone._Access_session_data_Permission                       app.Plone.manage_afterClone(
app.Plone._Add_portal_content_Permission                        app.Plone.manage_afterClone__roles__
app.Plone._Add_portal_events_Permission                         app.Plone.manage_beforeDelete(
app.Plone._Add_portal_folders_Permission                        app.Plone.manage_beforeDelete__roles__
app.Plone._Add_portal_member_Permission                         app.Plone.manage_changeOwnershipType(
app.Plone._Allow_sendto_Permission                              app.Plone.manage_changeOwnershipType__roles__
app.Plone._CMFEditions__Access_previous_versions_Permission     app.Plone.manage_changePermissions(
app.Plone._CMFEditions__Apply_version_control_Permission        app.Plone.manage_changePermissions__roles__
app.Plone._CMFEditions__Checkout_to_location_Permission         app.Plone.manage_changeProperties(
app.Plone._CMFEditions__Revert_to_previous_versions_Permission  app.Plone.manage_changeProperties__roles__
app.Plone._CMFEditions__Save_new_version_Permission             app.Plone.manage_changePropertyTypes(
app.Plone._Change_local_roles_Permission                        app.Plone.manage_changePropertyTypes__roles__
app.Plone._Change_portal_events_Permission                      app.Plone.manage_clone(
app.Plone._Content_rules__Manage_rules_Permission               app.Plone.manage_clone__roles__
app.Plone._Copy_or_Move_Permission                              app.Plone.manage_copyObjects(
app.Plone._DefaultDublinCoreImpl__CEILING_DATE                  app.Plone.manage_copyObjects__roles__
app.Plone._DefaultDublinCoreImpl__FLOOR_DATE                    app.Plone.manage_copyright(
app.Plone._Delete_objects_Permission                            app.Plone.manage_copyright__roles__
app.Plone._FTP_access_Permission                                app.Plone.manage_cutObjects(
app.Plone._List_folder_contents_Permission                      app.Plone.manage_cutObjects__roles__
app.Plone._List_portal_members_Permission                       app.Plone.manage_defined_roles(
app.Plone._List_undoable_changes_Permission                     app.Plone.manage_defined_roles__roles__
app.Plone._Mail_forgotten_password_Permission                   app.Plone.manage_delLocalRoles(
app.Plone._Manage_properties_Permission                         app.Plone.manage_delLocalRoles__roles__
app.Plone._Modify_portal_content_Permission                     app.Plone.manage_delObjects(
app.Plone._Modify_view_template_Permission                      app.Plone.manage_delObjects__roles__
app.Plone._Portlets__Manage_own_portlets_Permission             app.Plone.manage_delProperties(
app.Plone._Portlets__Manage_portlets_Permission                 app.Plone.manage_delProperties__roles__
app.Plone._Portlets__View_dashboard_Permission                  app.Plone.manage_editLocalRoles(
app.Plone._Reply_to_item_Permission                             app.Plone.manage_editLocalRoles__roles__
app.Plone._Request_review_Permission                            app.Plone.manage_editMetadata(
app.Plone._Review_comments_Permission                           app.Plone.manage_editMetadata__roles__
app.Plone._Review_portal_content_Permission                     app.Plone.manage_editProperties(
app.Plone._Search_ZCatalog_Permission                           app.Plone.manage_editProperties__roles__
app.Plone._Set_own_password_Permission                          app.Plone.manage_editRoles(
app.Plone._Set_own_properties_Permission                        app.Plone.manage_editRoles__roles__
app.Plone._Undo_changes_Permission                              app.Plone.manage_editedDialog(
app.Plone._Use_Database_Methods_Permission                      app.Plone.manage_editedDialog__roles__
app.Plone._Use_external_editor_Permission                       app.Plone.manage_exportObject(
app.Plone._Use_mailhost_services_Permission                     app.Plone.manage_exportObject__roles__
app.Plone._Use_version_control_Permission                       app.Plone.manage_findAdv(
app.Plone._View_Groups_Permission                               app.Plone.manage_findAdv__roles__
app.Plone._View_History_Permission                              app.Plone.manage_findForm(
app.Plone._View_Permission                                      app.Plone.manage_findForm__roles__
app.Plone._View_management_screens_Permission                   app.Plone.manage_findFrame(
app.Plone._WebDAV_Lock_items_Permission                         app.Plone.manage_findFrame__roles__
app.Plone._WebDAV_Unlock_items_Permission                       app.Plone.manage_findResult(
app.Plone._WebDAV_access_Permission                             app.Plone.manage_findResult__roles__
app.Plone.__ZCacheManager_ids__                                 app.Plone.manage_fixupOwnershipAfterAdd(
app.Plone.__ac_local_roles__                                    app.Plone.manage_fixupOwnershipAfterAdd__roles__
app.Plone.__ac_permissions__                                    app.Plone.manage_form_title(
app.Plone.__ac_roles__                                          app.Plone.manage_form_title__roles__
app.Plone.__allow_access_to_unprotected_subobjects__            app.Plone.manage_getPermissionMapping(
app.Plone.__allow_groups__(                                     app.Plone.manage_getPermissionMapping__roles__
app.Plone.__before_publishing_traverse__(                       app.Plone.manage_getUserRolesAndPermissions(
app.Plone.__before_traverse__                                   app.Plone.manage_getUserRolesAndPermissions__roles__
app.Plone.__browser_default__(                                  app.Plone.manage_hasId(
app.Plone.__call__(                                             app.Plone.manage_hasId__roles__
app.Plone.__call____roles__                                     app.Plone.manage_importExportForm(
app.Plone.__class__(                                            app.Plone.manage_importExportForm__roles__
app.Plone.__class_init__(                                       app.Plone.manage_importObject(
app.Plone.__contains__(                                         app.Plone.manage_importObject__roles__
app.Plone.__dav_collection__                                    app.Plone.manage_index_main(
app.Plone.__dav_resource__                                      app.Plone.manage_index_main__roles__
app.Plone.__delattr__(                                          app.Plone.manage_listLocalRoles(
app.Plone.__delitem__(                                          app.Plone.manage_listLocalRoles__roles__
app.Plone.__dict__                                              app.Plone.manage_main(
app.Plone.__doc__                                               app.Plone.manage_main__roles__
app.Plone.__error_log__                                         app.Plone.manage_menu(
app.Plone.__format__(                                           app.Plone.manage_menu__roles__
app.Plone.__getattr__(                                          app.Plone.manage_metadata(
app.Plone.__getattribute__(                                     app.Plone.manage_metadata__roles__
app.Plone.__getitem__(                                          app.Plone.manage_move_objects_down(
app.Plone.__getstate__(                                         app.Plone.manage_move_objects_down__roles__
app.Plone.__hash__(                                             app.Plone.manage_move_objects_to_bottom(
app.Plone.__http_methods__                                      app.Plone.manage_move_objects_to_bottom__roles__
app.Plone.__implemented__(                                      app.Plone.manage_move_objects_to_top(
app.Plone.__init__(                                             app.Plone.manage_move_objects_to_top__roles__
app.Plone.__iter__(                                             app.Plone.manage_move_objects_up(
app.Plone.__len__(                                              app.Plone.manage_move_objects_up__roles__
app.Plone.__module__                                            app.Plone.manage_options
app.Plone.__name__                                              app.Plone.manage_owner(
app.Plone.__new__(                                              app.Plone.manage_owner__roles__
app.Plone.__nonzero__(                                          app.Plone.manage_page_footer(
app.Plone.__of__(                                               app.Plone.manage_page_footer__roles__
app.Plone.__old_manage_FTPlist(                                 app.Plone.manage_page_header(
app.Plone.__propsets__                                          app.Plone.manage_page_header__roles__
app.Plone.__providedBy__(                                       app.Plone.manage_page_style.css(
app.Plone.__provides__(                                         app.Plone.manage_page_style.css__roles__
app.Plone.__reduce__(                                           app.Plone.manage_pasteObjects(
app.Plone.__reduce_ex__(                                        app.Plone.manage_pasteObjects__roles__
app.Plone.__replaceable__                                       app.Plone.manage_permission(
app.Plone.__repr__(                                             app.Plone.manage_permissionForm(
app.Plone.__roles__                                             app.Plone.manage_permissionForm__roles__
app.Plone.__setattr__(                                          app.Plone.manage_permission__roles__
app.Plone.__setitem__(                                          app.Plone.manage_propertiesForm(
app.Plone.__setstate__(                                         app.Plone.manage_propertiesForm__roles__
app.Plone.__sizeof__(                                           app.Plone.manage_propertyTypeForm(
app.Plone.__str__(                                              app.Plone.manage_propertyTypeForm__roles__
app.Plone.__subclasshook__(                                     app.Plone.manage_renameForm(
app.Plone.__weakref__                                           app.Plone.manage_renameForm__roles__
app.Plone._addRole(                                             app.Plone.manage_renameObject(
app.Plone._at_fti_meta_type                                     app.Plone.manage_renameObject__roles__
app.Plone._canCopy(                                             app.Plone.manage_renameObjects(
app.Plone._checkId(                                             app.Plone.manage_renameObjects__roles__
app.Plone._components                                           app.Plone.manage_reportUserPermissions(
app.Plone._datify(                                              app.Plone.manage_reportUserPermissions__roles__
app.Plone._datify__roles__                                      app.Plone.manage_role(
app.Plone._default_sort_key                                     app.Plone.manage_roleForm(
app.Plone._default_sort_reverse                                 app.Plone.manage_roleForm__roles__
app.Plone._delOb(                                               app.Plone.manage_role__roles__
app.Plone._delObject(                                           app.Plone.manage_setLocalRoles(
app.Plone._delPropValue(                                        app.Plone.manage_setLocalRoles__roles__
app.Plone._delProperty(                                         app.Plone.manage_setPermissionMapping(
app.Plone._delRoles(                                            app.Plone.manage_setPermissionMapping__roles__
app.Plone._deleteOwnershipAfterAdd(                             app.Plone.manage_set_default_sorting(
app.Plone._editMetadata(                                        app.Plone.manage_set_default_sorting__roles__
app.Plone._editMetadata__roles__                                app.Plone.manage_tabs(
app.Plone._filteredItems(                                       app.Plone.manage_tabs__roles__
app.Plone._getCopy(                                             app.Plone.manage_takeOwnership(
app.Plone._getImportPaths(                                      app.Plone.manage_takeOwnership__roles__
app.Plone._getOb(                                               app.Plone.manage_top_frame(
app.Plone._getPortalTypeName(                                   app.Plone.manage_top_frame__roles__
app.Plone._getUNIQUE(                                           app.Plone.manage_undo_transactions(
app.Plone._get_id(                                              app.Plone.manage_undo_transactions__roles__
app.Plone._get_request_var_or_attr(                             app.Plone.manage_workspace(
app.Plone._has_user_defined_role(                               app.Plone.manage_workspace__roles__
app.Plone._importObjectFromFile(                                app.Plone.manage_zmi_logout(
app.Plone._isBeingUsedAsAMethod(                                app.Plone.manage_zmi_logout__roles__
app.Plone._manage_editedDialog(                                 app.Plone.manage_zmi_prefs(
app.Plone._normal_manage_access(                                app.Plone.manage_zmi_prefs__roles__
app.Plone._notifyOfCopyTo(                                      app.Plone.management_page_charset
app.Plone._objects                                              app.Plone.meta_type
app.Plone._old_filtered_manage_options(                         app.Plone.meta_types
app.Plone._owner                                                app.Plone.mimetypes_registry(
app.Plone._p_activate(                                          app.Plone.modification_date
app.Plone._p_changed                                            app.Plone.modified(
app.Plone._p_deactivate(                                        app.Plone.modified__roles__
app.Plone._p_delattr(                                           app.Plone.moveObject(
app.Plone._p_estimated_size                                     app.Plone.moveObjectToPosition(
app.Plone._p_getattr(                                           app.Plone.moveObjectToPosition__roles__
app.Plone._p_invalidate(                                        app.Plone.moveObject__roles__
app.Plone._p_jar                                                app.Plone.moveObjectsByDelta(
app.Plone._p_mtime                                              app.Plone.moveObjectsByDelta__roles__
app.Plone._p_oid                                                app.Plone.moveObjectsDown(
app.Plone._p_serial                                             app.Plone.moveObjectsDown__roles__
app.Plone._p_setattr(                                           app.Plone.moveObjectsToBottom(
app.Plone._p_state                                              app.Plone.moveObjectsToBottom__roles__
app.Plone._plone_app_collection__Add_Collection_Permission      app.Plone.moveObjectsToTop(
app.Plone._postCopy(                                            app.Plone.moveObjectsToTop__roles__
app.Plone._properties                                           app.Plone.moveObjectsUp(
app.Plone._propertyMap(                                         app.Plone.moveObjectsUp__roles__
app.Plone._reserved_names                                       app.Plone.notifyModified(
app.Plone._setId(                                               app.Plone.notifyModified__roles__
app.Plone._setOb(                                               app.Plone.objectIds(
app.Plone._setObject(                                           app.Plone.objectIds__roles__
app.Plone._setPortalTypeName(                                   app.Plone.objectIds_d(
app.Plone._setPropValue(                                        app.Plone.objectIds_d__roles__
app.Plone._setProperty(                                         app.Plone.objectItems(
app.Plone._setRoles(                                            app.Plone.objectItems__roles__
app.Plone._subobject_permissions(                               app.Plone.objectItems_d(
app.Plone._updateProperty(                                      app.Plone.objectItems_d__roles__
app.Plone._verifyObjectPaste(                                   app.Plone.objectMap(
app.Plone._wrapperCheck(                                        app.Plone.objectMap_d(
app.Plone.absolute_url(                                         app.Plone.objectMap_d__roles__
app.Plone.absolute_url__roles__                                 app.Plone.objectValues(
app.Plone.absolute_url_path(                                    app.Plone.objectValues__roles__
app.Plone.absolute_url_path__roles__                            app.Plone.objectValues_d(
app.Plone.ac_inherited_permissions(                             app.Plone.objectValues_d__roles__
app.Plone.ac_inherited_permissions__roles__                     app.Plone.opaqueIds(
app.Plone.access_debug_info(                                    app.Plone.opaqueIds__roles__
app.Plone.access_debug_info__roles__                            app.Plone.opaqueItems(
app.Plone.aclAChecked                                           app.Plone.opaqueItems__roles__
app.Plone.aclEChecked                                           app.Plone.opaqueValues(
app.Plone.aclPChecked                                           app.Plone.opaqueValues__roles__
app.Plone.acl_users(                                            app.Plone.orderObjects(
app.Plone.acquiredRolesAreUsedBy(                               app.Plone.orderObjects__roles__
app.Plone.acquiredRolesAreUsedBy__roles__                       app.Plone.owner_info(
app.Plone.addCreator(                                           app.Plone.owner_info__roles__
app.Plone.addCreator__roles__                                   app.Plone.permission_settings(
app.Plone.addDTMLDocument(                                      app.Plone.permission_settings__roles__
app.Plone.addDTMLDocument__roles__                              app.Plone.permissionsOfRole(
app.Plone.addDTMLMethod(                                        app.Plone.permissionsOfRole__roles__
app.Plone.addDTMLMethod__roles__                                app.Plone.plone_utils
app.Plone.aliases                                               app.Plone.portal_actionicons(
app.Plone.all_meta_types(                                       app.Plone.portal_actions
app.Plone.allowedContentTypes(                                  app.Plone.portal_archivist
app.Plone.allowedContentTypes__roles__                          app.Plone.portal_atct
app.Plone.analyseDocumentation(                                 app.Plone.portal_calendar
app.Plone.analyseDocumentation__roles__                         app.Plone.portal_catalog(
app.Plone.archetype_tool                                        app.Plone.portal_controlpanel
app.Plone.availableLanguages(                                   app.Plone.portal_css
app.Plone.availableLanguages__roles__                           app.Plone.portal_diff
app.Plone.bobobase_modification_time(                           app.Plone.portal_discussion
app.Plone.caching_policy_manager                                app.Plone.portal_factory(
app.Plone.canSetDefaultPage(                                    app.Plone.portal_form_controller(
app.Plone.canSetDefaultPage__roles__                            app.Plone.portal_groupdata
app.Plone.canSetLayout(                                         app.Plone.portal_groups
app.Plone.canSetLayout__roles__                                 app.Plone.portal_historiesstorage
app.Plone.cb_dataItems(                                         app.Plone.portal_historyidhandler
app.Plone.cb_dataValid(                                         app.Plone.portal_interface
app.Plone.cb_isCopyable(                                        app.Plone.portal_javascripts
app.Plone.cb_isMoveable(                                        app.Plone.portal_languages(
app.Plone.cb_userHasCopyOrMovePermission(                       app.Plone.portal_memberdata
app.Plone.changeOwnership(                                      app.Plone.portal_membership
app.Plone.changeOwnership__roles__                              app.Plone.portal_metadata
app.Plone.changeSkin(                                           app.Plone.portal_migration
app.Plone.changeSkin__roles__                                   app.Plone.portal_modifier
app.Plone.checkIdAvailable(                                     app.Plone.portal_password_reset
app.Plone.checkIdAvailable__roles__                             app.Plone.portal_properties
app.Plone.clearCurrentSkin(                                     app.Plone.portal_purgepolicy
app.Plone.clearCurrentSkin__roles__                             app.Plone.portal_quickinstaller
app.Plone.contentIds(                                           app.Plone.portal_referencefactories
app.Plone.contentIds__roles__                                   app.Plone.portal_registration
app.Plone.contentItems(                                         app.Plone.portal_registry
app.Plone.contentItems__roles__                                 app.Plone.portal_repository
app.Plone.contentValues(                                        app.Plone.portal_setup
app.Plone.contentValues__roles__                                app.Plone.portal_skins
app.Plone.content_type(                                         app.Plone.portal_tinymce
app.Plone.content_type_registry                                 app.Plone.portal_transforms(
app.Plone.contributors                                          app.Plone.portal_type
app.Plone.created(                                              app.Plone.portal_types
app.Plone.created__roles__                                      app.Plone.portal_uidannotation(
app.Plone.creation_date                                         app.Plone.portal_uidgenerator(
app.Plone.creators                                              app.Plone.portal_uidhandler
app.Plone.dav__init(                                            app.Plone.portal_undo
app.Plone.dav__simpleifhandler(                                 app.Plone.portal_url(
app.Plone.dav__validate(                                        app.Plone.portal_view_customizations
app.Plone.decodeFolderFilter(                                   app.Plone.portal_workflow
app.Plone.decodeFolderFilter__roles__                           app.Plone.possible_permissions(
app.Plone.defaultView(                                          app.Plone.propdict(
app.Plone.defaultView__roles__                                  app.Plone.propdict__roles__
app.Plone.default_view                                          app.Plone.propertyDescription(
app.Plone.description                                           app.Plone.propertyDescription__roles__
app.Plone.edit(                                                 app.Plone.propertyIds(
app.Plone.editMetadata(                                         app.Plone.propertyIds__roles__
app.Plone.editMetadata__roles__                                 app.Plone.propertyItems(
app.Plone.edit__roles__                                         app.Plone.propertyItems__roles__
app.Plone.effective(                                            app.Plone.propertyLabel(
app.Plone.effective__roles__                                    app.Plone.propertyLabel__roles__
app.Plone.effective_date                                        app.Plone.propertyMap(
app.Plone.email_charset                                         app.Plone.propertyMap__roles__
app.Plone.email_from_address                                    app.Plone.propertyValues(
app.Plone.email_from_name                                       app.Plone.propertyValues__roles__
app.Plone.enable_permalink                                      app.Plone.propertysheets
app.Plone.encodeFolderFilter(                                   app.Plone.raise_standardErrorMessage(
app.Plone.encodeFolderFilter__roles__                           app.Plone.reference_catalog(
app.Plone.error_log                                             app.Plone.reindexObject(
app.Plone.expiration_date                                       app.Plone.reindexObjectSecurity(
app.Plone.expires(                                              app.Plone.restrictedTraverse(
app.Plone.expires__roles__                                      app.Plone.restrictedTraverse__roles__
app.Plone.externalEditLink_(                                    app.Plone.rights
app.Plone.externalEdit_                                         app.Plone.rolesOfPermission(
app.Plone.filtered_manage_options(                              app.Plone.rolesOfPermission__roles__
app.Plone.filtered_manage_options__roles__                      app.Plone.selectable_views
app.Plone.filtered_meta_types(                                  app.Plone.selectedRoles
app.Plone.folderlistingFolderContents(                          app.Plone.setContributors(
app.Plone.folderlistingFolderContents__roles__                  app.Plone.setContributors__roles__
app.Plone.format                                                app.Plone.setCreators(
app.Plone.get(                                                  app.Plone.setCreators__roles__
app.Plone.getActionInfo(                                        app.Plone.setDefaultPage(
app.Plone.getActionInfo__roles__                                app.Plone.setDefaultPage__roles__
app.Plone.getAttribute(                                         app.Plone.setDefaultSorting(
app.Plone.getAttributeNode(                                     app.Plone.setDefaultSorting__roles__
app.Plone.getAttributeNode__roles__                             app.Plone.setDescription(
app.Plone.getAttribute__roles__                                 app.Plone.setDescription__roles__
app.Plone.getAttributes(                                        app.Plone.setEffectiveDate(
app.Plone.getAttributes__roles__                                app.Plone.setEffectiveDate__roles__
app.Plone.getAvailableLayouts(                                  app.Plone.setExpirationDate(
app.Plone.getAvailableLayouts__roles__                          app.Plone.setExpirationDate__roles__
app.Plone.getCMFObjectsSubsetIds(                               app.Plone.setFormat(
app.Plone.getChildNodes(                                        app.Plone.setFormat__roles__
app.Plone.getChildNodes__roles__                                app.Plone.setLanguage(
app.Plone.getCurrentSkinName(                                   app.Plone.setLanguage__roles__
app.Plone.getCurrentSkinName__roles__                           app.Plone.setLayout(
app.Plone.getDefaultLayout(                                     app.Plone.setLayout__roles__
app.Plone.getDefaultLayout__roles__                             app.Plone.setModificationDate(
app.Plone.getDefaultPage(                                       app.Plone.setModificationDate__roles__
app.Plone.getDefaultPage__roles__                               app.Plone.setRights(
app.Plone.getDefaultSorting(                                    app.Plone.setRights__roles__
app.Plone.getDefaultSorting__roles__                            app.Plone.setSiteManager(
app.Plone.getElementsByTagName(                                 app.Plone.setSiteManager__roles__
app.Plone.getElementsByTagName__roles__                         app.Plone.setSubject(
app.Plone.getFirstChild(                                        app.Plone.setSubject__roles__
app.Plone.getFirstChild__roles__                                app.Plone.setTitle(
app.Plone.getIcon(                                              app.Plone.setTitle__roles__
app.Plone.getIconURL(                                           app.Plone.setupCurrentSkin(
app.Plone.getIconURL__roles__                                   app.Plone.setupCurrentSkin__roles__
app.Plone.getIcon__roles__                                      app.Plone.showDocumentation(
app.Plone.getId(                                                app.Plone.showDocumentation__roles__
app.Plone.getId__roles__                                        app.Plone.smallRolesWidget
app.Plone.getIdsSubset(                                         app.Plone.subject
app.Plone.getIdsSubset__roles__                                 app.Plone.superValues(
app.Plone.getLastChild(                                         app.Plone.superValues__roles__
app.Plone.getLastChild__roles__                                 app.Plone.suppl_views
app.Plone.getLayout(                                            app.Plone.tabs_path_default(
app.Plone.getLayout__roles__                                    app.Plone.tabs_path_info(
app.Plone.getMetadataHeaders(                                   app.Plone.this(
app.Plone.getMetadataHeaders__roles__                           app.Plone.title
app.Plone.getNextSibling(                                       app.Plone.title_and_id(
app.Plone.getNextSibling__roles__                               app.Plone.title_or_id(
app.Plone.getNodeName(                                          app.Plone.tpURL(
app.Plone.getNodeName__roles__                                  app.Plone.tpValues(
app.Plone.getNodeType(                                          app.Plone.tpValues__roles__
app.Plone.getNodeValue(                                         app.Plone.translation_service
app.Plone.getNodeValue__roles__                                 app.Plone.uid_catalog(
app.Plone.getObjectPosition(                                    app.Plone.undoable_transactions(
app.Plone.getObjectPosition__roles__                            app.Plone.undoable_transactions__roles__
app.Plone.getOwner(                                             app.Plone.unindexObject(
app.Plone.getOwnerDocument(                                     app.Plone.unrestrictedTraverse(
app.Plone.getOwnerDocument__roles__                             app.Plone.unrestrictedTraverse__roles__
app.Plone.getOwnerTuple(                                        app.Plone.userCanTakeOwnership(
app.Plone.getOwnerTuple__roles__                                app.Plone.userdefined_roles(
app.Plone.getOwner__roles__                                     app.Plone.userdefined_roles__roles__
app.Plone.getParentNode(                                        app.Plone.users_with_local_role(
app.Plone.getParentNode__roles__                                app.Plone.validClipData(
app.Plone.getPhysicalPath(                                      app.Plone.validRoles(
app.Plone.getPhysicalPath__roles__                              app.Plone.valid_property_id(
app.Plone.getPhysicalRoot(                                      app.Plone.valid_property_id__roles__
app.Plone.getPhysicalRoot__roles__                              app.Plone.valid_roles(
app.Plone.getPortalTypeName(                                    app.Plone.validate_email
app.Plone.getPortalTypeName__roles__                            app.Plone.validate_roles(
app.Plone.getPreviousSibling(                                   app.Plone.values(
app.Plone.getPreviousSibling__roles__                           app.Plone.values__roles__
app.Plone.getProperty(                                          app.Plone.view(
app.Plone.getPropertyType(                                      app.Plone.virtual_url_path(
app.Plone.getPropertyType__roles__                              app.Plone.virtual_url_path__roles__
app.Plone.getProperty__roles__                                  app.Plone.wl_clearLocks(
app.Plone.getSiteManager(                                       app.Plone.wl_clearLocks__roles__
app.Plone.getSiteManager__roles__                               app.Plone.wl_delLock(
app.Plone.getSkin(                                              app.Plone.wl_delLock__roles__
app.Plone.getSkinNameFromRequest(                               app.Plone.wl_getLock(
app.Plone.getSkinNameFromRequest__roles__                       app.Plone.wl_getLock__roles__
app.Plone.getSkin__roles__                                      app.Plone.wl_hasLock(
app.Plone.getSkinsFolderName(                                   app.Plone.wl_isLocked(
app.Plone.getSkinsFolderName__roles__                           app.Plone.wl_isLockedByUser__roles__
app.Plone.getTagName(                                           app.Plone.wl_isLocked__roles__
app.Plone.getTagName__roles__                                   app.Plone.wl_lockItems(
app.Plone.getTypeInfo(                                          app.Plone.wl_lockItems__roles__
app.Plone.getTypeInfo__roles__                                  app.Plone.wl_lockTokens(
app.Plone.getWrappedOwner(                                      app.Plone.wl_lockTokens__roles__
app.Plone.getWrappedOwner__roles__                              app.Plone.wl_lockValues(
app.Plone.get__roles__                                          app.Plone.wl_lockValues__roles__
app.Plone.get_local_roles(                                      app.Plone.wl_lockmapping(
app.Plone.get_local_roles_for_userid(                           app.Plone.wl_lockmapping__roles__
app.Plone.get_valid_userids(                                    app.Plone.wl_setLock(
app.Plone.hasChildNodes(                                        app.Plone.wl_setLock__roles__
app.Plone.hasChildNodes__roles__                                app.Plone.zope_quick_start(
app.Plone.hasObject(                                            app.Plone.zope_quick_start__roles__
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(&lt;em&gt;You should probably&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;hire me&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://twitter.com/aclark4life&quot;&gt;follow me on Twitter&lt;/a&gt; &lt;em&gt;or both&lt;/em&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Introducing Plock Pins</title>
    <id>http://blog.aclark.net/2014/03/20/introducing-plock-pins/</id>
    <updated>2014-03-20T00:00:00Z</updated>
    <published>2014-03-20T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/03/20/introducing-plock-pins/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;introducing-plock-pins&quot;&gt;

&lt;p&gt;&lt;strong&gt;&amp;#8220;Plock Pins are the greatest thing to happen to Plone since Buildout&amp;#8221; — Alex Clark&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/buildout-all-the-plones.jpg&quot; /&gt;
&lt;p&gt;Plock Pins are the final incarnation of a collection of Plone Buildouts I&amp;#8217;ve been developing since 2010. They attempt to make it easy to install Plone with only Python installed &lt;a class=&quot;footnote-reference&quot; href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. Installing Plone with Plock Pins looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv-2.7 .
$ bin/pip install zc.buildout
$ bin/buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now edit your &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; to include a link to the Plock Pins:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then run Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Followed by the following command to start Plone:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s it! This technique should work for all versions of Plone all the way back to Plone 1.1. If it doesn&amp;#8217;t, please let me know here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/pins/issues&quot;&gt;https://github.com/plock/pins/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, here is a list of all available Plock Pins you can extend &lt;a class=&quot;footnote-reference&quot; href=&quot;#id4&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-4-3&quot;&gt;https://raw.github.com/plock/pins/master/plone-4-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-4-2&quot;&gt;https://raw.github.com/plock/pins/master/plone-4-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-4-1&quot;&gt;https://raw.github.com/plock/pins/master/plone-4-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-4-0&quot;&gt;https://raw.github.com/plock/pins/master/plone-4-0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-3-3&quot;&gt;https://raw.github.com/plock/pins/master/plone-3-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-3-2&quot;&gt;https://raw.github.com/plock/pins/master/plone-3-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-3-1&quot;&gt;https://raw.github.com/plock/pins/master/plone-3-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-3-0&quot;&gt;https://raw.github.com/plock/pins/master/plone-3-0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-2-5&quot;&gt;https://raw.github.com/plock/pins/master/plone-2-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-2-1&quot;&gt;https://raw.github.com/plock/pins/master/plone-2-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/plock/pins/master/plone-1-1&quot;&gt;https://raw.github.com/plock/pins/master/plone-1-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id3&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In future versions of Python 3.x, the Pip installer will be included as part of the core software. This will lessen the burden for users attempting to install packages from PyPI. In 2.x, one must install Setuptools and/or Pip before attempting to do so.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id4&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Remember to use Python 2.4 for &amp;lt; Plone 4&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Virtualenv Support Update</title>
    <id>http://blog.aclark.net/2014/03/19/virtualenv-support-update/</id>
    <updated>2014-03-19T00:00:00Z</updated>
    <published>2014-03-19T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/03/19/virtualenv-support-update/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;virtualenv-support-update&quot;&gt;

&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/virtualenv-support-update.jpg&quot; /&gt;
&lt;p&gt;&lt;strong&gt;This is you: I use virtualenv all the time and I love it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is you: &amp;#8220;I use virtualenv all the time and I love it! But I hate having to manually upgrade setuptools within my virtualenvs because the &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/setuptools#changes&quot;&gt;PyPA has been so prolific with setuptools releases lately&lt;/a&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Actually this is me, but it may be you too. If this is you, you may be familiar with the following process. If not, you may want to be.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;virtualenv-and-setuptools&quot;&gt;
&lt;h2&gt;Virtualenv and setuptools&lt;/h2&gt;
&lt;p&gt;When a virtualenv is created, virtualenv installs setuptools from a local distribution located in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;site-packages/virtualenv_support&lt;/span&gt;&lt;/code&gt;. If that setuptools is out of date, so is the setuptools in your new virtualenv. To avoid having to manually upgrade setuptools within newly created virtualenvs, you can do this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cd /usr/local/lib/python2.7/site-packages/virtualenv_support
$ curl -O https://pypi.python.org/packages/source/s/setuptools/setuptools-3.3.zip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Et voila!&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv .
New python executable in ./bin/python2.7
Also creating executable in ./bin/python
Installing setuptools, pip...done.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/pip show setuptools
---
Name: setuptools
Version: 3.3
Location: /private/var/folders/1k/fmmlqcfn5jsbcqrqsw3q_slm0000gn/T/tmpE4vB1l/lib/python2.7/site-packages
Requires:
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are a Buildout user, this should save you &lt;strong&gt;endless frustration with Buildout attempting to upgrade Setuptools…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;attempting to upgrade Setuptools…&lt;/p&gt;
&lt;p&gt;attempting to upgrade Setuptools…&lt;/p&gt;
&lt;p&gt;attempting to upgrade Setuptools…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Hello Plone Updated</title>
    <id>http://blog.aclark.net/2014/01/11/hello-plone-updated/</id>
    <updated>2014-01-11T00:00:00Z</updated>
    <published>2014-01-11T00:00:00Z</published>
    <link href="http://blog.aclark.net/2014/01/11/hello-plone-updated/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;hello-plone-updated&quot;&gt;

&lt;p&gt;&lt;strong&gt;Over two years ago I wrote a blog entry called &amp;#8220;Hello, Plone!&amp;#8221;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over two years ago I wrote a blog entry called &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/08/20/hello-plone/&quot;&gt;&amp;#8220;Hello, Plone!&amp;#8221;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve just updated it in order to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Change the wording&lt;/li&gt;
&lt;li&gt;Update the links&lt;/li&gt;
&lt;li&gt;Add some comments&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-changed&quot;&gt;
&lt;h2&gt;What&amp;#8217;s changed?&lt;/h2&gt;
&lt;p&gt;As change in technology is constant, you can expect a few details to differ between then and now. Though I generally don&amp;#8217;t like the term &amp;#8220;best practice&amp;#8221; I do like to write about &amp;#8220;how I do it now&amp;#8221; vs &amp;#8220;how I did it then&amp;#8221;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;buildout&quot;&gt;
&lt;h3&gt;Buildout&lt;/h3&gt;
&lt;p&gt;Since &amp;#8220;Hello, Plone!&amp;#8221; was published Buildout 2.0.0 was released and &lt;strong&gt;Buildout has given up on attempting to provide module isolation&lt;/strong&gt; in the same way Virtualenv that does. Why? Virtualenv does it better. So if you want to isolate your development from a larger Python installation, use Virtualenv. I routinely use both Buildout and Virtualenv.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;buildout-hosting&quot;&gt;
&lt;h3&gt;Buildout hosting&lt;/h3&gt;
&lt;p&gt;Ever since I wrote &lt;a class=&quot;reference external&quot; href=&quot;http://www.packtpub.com/plone-33-site-administration/book&quot;&gt;Plone 3.3 Site Administration&lt;/a&gt; I&amp;#8217;ve been maintaining a collection of buildouts. Most recently, I&amp;#8217;ve moved them to a project called &lt;a class=&quot;reference external&quot; href=&quot;http://plock.github.io&quot;&gt;Plock&lt;/a&gt;. You can also find a bunch of archived buildouts here: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/buildouts&quot;&gt;https://github.com/buildouts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;zopeskel&quot;&gt;
&lt;h3&gt;ZopeSkel&lt;/h3&gt;
&lt;p&gt;For folks new to Plone and Python development, it&amp;#8217;s often helpful to use a code generator to get started developing. The original &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hello_plone&lt;/span&gt;&lt;/code&gt; included some ZopeSkel instructions. In this round, I&amp;#8217;ve opted to include manual instructions instead e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p my.app/my/app
$ touch my.app/my/app/__init__.py
$ touch my.app/my/__init__.py
$ touch my.app/my/app/configure.zcml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Why? Generally speaking, I now prefer to educate folks about Python packaging more so than code generation.&lt;/p&gt;
&lt;p&gt;Check out the new old post here: &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/08/20/hello-plone/&quot;&gt;http://blog.aclark.net/2011/08/20/hello-plone/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Plonetheme Report</title>
    <id>http://blog.aclark.net/2013/12/29/plonetheme-report/</id>
    <updated>2013-12-29T00:00:00Z</updated>
    <published>2013-12-29T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/12/29/plonetheme-report/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plonetheme-report&quot;&gt;

&lt;p&gt;&lt;strong&gt;Here is another report on Plone themes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is another report on Plone themes &lt;a class=&quot;footnote-reference&quot; href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; generated by plock &lt;a class=&quot;footnote-reference&quot; href=&quot;#id4&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;dl class=&quot;docutils&quot;&gt;
&lt;dt&gt;::&lt;/dt&gt;
&lt;dd&gt;#!/bin/sh
for i in &lt;cite&gt;plock -l -r | grep plonetheme&lt;/cite&gt;
do
plock . -a $i
done&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Plock is able to produce a Buildout configuration file containing all themes that successfully installed via Buildout; I manually removed the themes that caused Plone start to fail.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;before-plone-start&quot;&gt;
&lt;h2&gt;Before Plone start&lt;/h2&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3

[plone]
eggs =
    ${addon:packages}
    ${base:packages}
    plonetheme.ReOrg
    plonetheme.aclark_twitter
    plonetheme.aqueouslight
    plonetheme.arnolfini
    plonetheme.bananaleaf
    plonetheme.basic
    plonetheme.bluegray
    plonetheme.burned
    plonetheme.classic
    plonetheme.cleantheme
    plonetheme.codapress
    plonetheme.colorfulworld
    plonetheme.coolblue
    plonetheme.criticas
    plonetheme.cultureCab
    plonetheme.darkened
    plonetheme.delicious2
    plonetheme.diazo_sunburst
    plonetheme.discovery
    plonetheme.drupal
    plonetheme.earthlingtwo
    plonetheme.evergreen
    plonetheme.ewb_case
    plonetheme.freshpick
    plonetheme.fui
    plonetheme.gemstone
    plonetheme.gov
    plonetheme.greencommunity
    plonetheme.grungeera
    plonetheme.html5_hotpink
    plonetheme.inbusiness
    plonetheme.intk
    plonetheme.jsjamba
    plonetheme.keepitsimple
    plonetheme.laboral
    plonetheme.labs
    plonetheme.leavesdew
    plonetheme.level2
    plonetheme.mimbo
    plonetheme.mvob
    plonetheme.netsightintranet
    plonetheme.nonzero
    plonetheme.notredame
    plonetheme.overlappedtabs
    plonetheme.p2
    plonetheme.ploneorg
    plonetheme.porseleinplaats
    plonetheme.pyar
    plonetheme.rcom
    plonetheme.redmusic
    plonetheme.relic
    plonetheme.responsive1140
    plonetheme.responsivetheme
    plonetheme.solemnity
    plonetheme.stylized
    plonetheme.subordinate
    plonetheme.sunburst
    plonetheme.terrafirma
    plonetheme.tidyblog
    plonetheme.transition
    plonetheme.twinapex
    plonetheme.unilluminated
    plonetheme.wmoWonen
    plonetheme.woodexperience
    plonetheme.xtheme
    sphinx.plonetheme
    vs.bootstrap.plonetheme
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;after-plone-start&quot;&gt;
&lt;h2&gt;After Plone start&lt;/h2&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3

[plone]
eggs =
    ${addon:packages}
    ${base:packages}
    plonetheme.ReOrg
    plonetheme.aclark_twitter
    plonetheme.aqueouslight
    plonetheme.bananaleaf
    plonetheme.basic
    plonetheme.bluegray
    plonetheme.burned
    plonetheme.classic
    plonetheme.cleantheme
    plonetheme.codapress
    plonetheme.colorfulworld
    plonetheme.coolblue
    plonetheme.criticas
    plonetheme.cultureCab
    plonetheme.darkened
    plonetheme.delicious2
    plonetheme.diazo_sunburst
    plonetheme.discovery
    plonetheme.drupal
    plonetheme.earthlingtwo
    plonetheme.evergreen
    plonetheme.ewb_case
    plonetheme.freshpick
    plonetheme.fui
    plonetheme.gemstone
    plonetheme.greencommunity
    plonetheme.grungeera
    plonetheme.html5_hotpink
    plonetheme.inbusiness
    plonetheme.jsjamba
    plonetheme.keepitsimple
    plonetheme.labs
    plonetheme.leavesdew
    plonetheme.level2
    plonetheme.mimbo
    plonetheme.nonzero
    plonetheme.notredame
    plonetheme.overlappedtabs
    plonetheme.p2
    plonetheme.ploneorg
    plonetheme.pyar
    plonetheme.rcom
    plonetheme.redmusic
    plonetheme.relic
    plonetheme.responsive1140
    plonetheme.responsivetheme
    plonetheme.solemnity
    plonetheme.stylized
    plonetheme.subordinate
    plonetheme.sunburst
    plonetheme.terrafirma
    plonetheme.tidyblog
    plonetheme.transition
    plonetheme.twinapex
    plonetheme.unilluminated
    plonetheme.woodexperience
    plonetheme.xtheme
    sphinx.plonetheme
    vs.bootstrap.plonetheme
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;removed-themes&quot;&gt;
&lt;h2&gt;Removed themes&lt;/h2&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plonetheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arnolfini&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plonetheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gov&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plonetheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intk&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plonetheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;laboral&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plonetheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mvob&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plonetheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netsightintranet&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plonetheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;porseleinplaats&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plonetheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wmoWonen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Not bad! That&amp;#8217;s a lot of working themes for Plone 4, many of which use Diazo.&lt;/p&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plonetheme-report-1.png&quot; /&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plonetheme-report-2.png&quot; /&gt;
&lt;img alt=&quot;alternate text&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/plonetheme-report-3.png&quot; /&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id3&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In the &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;plonetheme&lt;/span&gt;&lt;/code&gt; namespace.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id4&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Plock is a Plone installer for the pip-loving crowd: &lt;a class=&quot;reference external&quot; href=&quot;https://plock.github.com&quot;&gt;https://plock.github.com&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Introducing Plock</title>
    <id>http://blog.aclark.net/2013/07/19/introducing-plock/</id>
    <updated>2013-07-19T00:00:00Z</updated>
    <published>2013-07-19T00:00:00Z</published>
    <link href="http://blog.aclark.net/2013/07/19/introducing-plock/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;introducing-plock&quot;&gt;

&lt;p&gt;&lt;strong&gt;Plock is a Plone Installer for the Pip-Loving Crowd. Plone is a Python-based CMS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Installing Plone with &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/plock&quot;&gt;Plock&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install plock
$ bin/install-plone
$ bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;configuration&quot;&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Plone uses &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/zc.buildout&quot;&gt;Buildout&lt;/a&gt; to manage its installation and configuration. Plock creates a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; file for you that looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/pythonpackages/buildout-plone/master/latest

[plone]
eggs +=
# Add-ons go here e.g.:
#    Products.PloneFormGen
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;add-ons&quot;&gt;
&lt;h3&gt;Add-ons&lt;/h3&gt;
&lt;p&gt;See &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi?:action=browse&amp;amp;show=all&amp;amp;c=563&quot;&gt;https://pypi.python.org/pypi?:action=browse&amp;amp;show=all&amp;amp;c=563&lt;/a&gt; for a complete list of add-ons compatible with Plone 4.3.&lt;/p&gt;
&lt;p&gt;To install add-ons, add the desired Python package name(s) to the &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;eggs&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;+=&lt;/span&gt;&lt;/code&gt; parameter e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/pythonpackages/buildout-plone/master/latest

[plone]
eggs +=
    Products.PloneFormGen
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Stop Plone and run Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Start Plone:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Install the add-on(s) in Plone via Site Setup -&amp;gt; Add-ons.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Bootstrapping a Buildout 1-6 release</title>
    <id>http://blog.aclark.net/2012/08/13/bootstrapping-a-buildout-1-6-release/</id>
    <updated>2012-08-13T00:00:00Z</updated>
    <published>2012-08-13T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/08/13/bootstrapping-a-buildout-1-6-release/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;bootstrapping-a-buildout-1-6-release&quot;&gt;

&lt;p&gt;&lt;strong&gt;A lot of work has been done on Buildout lately.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most notably:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Jim Fulton is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/buildout/buildout/commits/master&quot;&gt;working on Buildout 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ross Patterson has greatly &lt;a class=&quot;reference external&quot; href=&quot;http://rpatterson.net/blog/buildout-performance-improvements&quot;&gt;improved Buildout performance&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Domen Kožar has &lt;a class=&quot;reference external&quot; href=&quot;http://zope3.pov.lt/trac/changeset/127507&quot;&gt;provided a patch&lt;/a&gt; that takes a conservative
approach to Ross&amp;#8217;s performance improvements.&lt;/li&gt;
&lt;li&gt;I have offered to do a release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there are a &lt;a class=&quot;reference external&quot; href=&quot;http://mail.python.org/pipermail/distutils-sig/2012-July/018779.html&quot;&gt;handful of other changes&lt;/a&gt; in &lt;a class=&quot;reference external&quot; href=&quot;http://zope3.pov.lt/trac/browser/zc.buildout/trunk/CHANGES.txt?rev=127507#L4&quot;&gt;trunk on svn.zope.org&lt;/a&gt;, of which my favorite is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;The buildout init command now accepts distribution requirements and
paths to set up a custom interpreter part that has the distributions
or parts in the path. For example:: $ python bootstrap.py init
BeautifulSoup&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;So with that, I am &lt;strong&gt;planning to do a zc.buildout 1.6 release within 24 hours&lt;/strong&gt; or so of now. Please add a comment or weigh in on &lt;a class=&quot;reference external&quot; href=&quot;http://mail.python.org/mailman/listinfo/distutils-sig&quot;&gt;distutils-sig&lt;/a&gt; if you object. We have run the tests on Windows, and discovered only pre-existing failures. We are also preparing to do &amp;#8220;Buildout 2 prophylactic releases&amp;#8221; (i.e. releases that make 1.x continue to work when 2.x is released) in the 1.6.x series.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">The Plones Templer</title>
    <id>http://blog.aclark.net/2012/07/12/the-plones-templer/</id>
    <updated>2012-07-12T00:00:00Z</updated>
    <published>2012-07-12T00:00:00Z</published>
    <link href="http://blog.aclark.net/2012/07/12/the-plones-templer/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;the-plones-templer&quot;&gt;

&lt;p&gt;&lt;strong&gt;(c.f. Knights Templar)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(c.f. Knights Templar) I think we have a situation that could use the
help of the Plone and Python communities at large. It goes something
like this:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;About 6 years ago, &lt;a class=&quot;reference external&quot; href=&quot;http://danielnouri.org/blog/devel/zope/quickstart-with-pastescript.html&quot;&gt;Daniel Nouri started the ZopeSkel project&lt;/a&gt; to
provide a Zope project template to &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/PasteScript/1.7.5&quot;&gt;PasteScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sometime between then and now, the Plone community latched on to the
ZopeSkel project to include templates for its projects.&lt;/li&gt;
&lt;li&gt;About 3 years ago, as part of the ZopeSkel project, &lt;a class=&quot;reference external&quot; href=&quot;http://www.coactivate.org/projects/zopeskel-bbq-sprint/project-home&quot;&gt;some folks at
the BBQ&lt;/a&gt; sprint built a more user friendly UI on top of PasteScript.
And some refactoring of the project was planned or occurred, during
which time the entire project was renamed to &amp;#8220;Templer&amp;#8221;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At present, if you install the latest ZopeSkel (3.0b3) you get:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/paster create --list-templates
Available templates:
  archetype:         A Plone project that uses Archetypes content types
  basic_buildout:    A basic buildout skeleton
  basic_namespace:   A basic Python project with a namespace package
  basic_package:     A basic setuptools-enabled package
  nested_namespace:  A basic Python project with a nested namespace (2 dots in name)
  paste_deploy:      A web application deployed through paste.deploy
  plone_basic:       A package for Plone add-ons
  plone_nested:      A package for Plone add-ons with a nested namespace
  recipe:            A recipe project for zc.buildout
  zope2_basic:       A Zope project
  zope2_nested:      A nested-namespace Zope package
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looks nice, but some templates are missing. If you install the previous
stable version (2.21.2), you get this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/paster create --list-templates
Available templates:
  archetype:          A Plone project that uses Archetypes content types
  basic_namespace:    A basic Python project with a namespace package
  basic_package:      A basic setuptools-enabled package
  basic_zope:         A Zope project
  kss_plugin:         A project for a KSS plugin
  nested_namespace:   A basic Python project with a nested namespace (2 dots in name)
  paste_deploy:       A web application deployed through paste.deploy
  plone:              A project for Plone add-ons
  plone2.5_buildout:  A buildout for Plone 2.5 projects
  plone2.5_theme:     A theme for Plone 2.5
  plone2_theme:       A theme for Plone 2.1
  plone3_buildout:    A buildout for Plone 3 installation
  plone3_portlet:     A Plone 3 portlet
  plone3_theme:       A theme for Plone 3
  plone4_buildout:    A buildout for Plone 4 developer installation
  plone_app:          A project for Plone add-ons with a nested namespace (2 dots in name)
  plone_hosting:      Plone hosting: buildout with ZEO and Plone versions below 3.2
  plone_pas:          A project for a Plone PAS plugin
  recipe:             A recipe project for zc.buildout
  silva_buildout:     A buildout for Silva projects
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looks a lot better. Additionally, with the previous release (2.21.2) you
can install zopeskel.dexterity, and &amp;#8220;dexterity&amp;#8221; will show up in the list
of available templates (but not so with 3.0b3). So what&amp;#8217;s left to finish
the move from ZopeSkel to Templer? I&amp;#8217;m told by Chris Ewing (the current
project lead) that it&amp;#8217;s mostly a matter of missing imports in various
Python packages that provide templates to PasteScript. Let&amp;#8217;s. Finish.
This. This frustrates me because Paster is a nice system (that provides
pluggable commands, and code gen from templates). And ZopeSkel was a
nice system (that provided additional templates and a friendly UI). And
Templer will be a great system, but it&amp;#8217;s not there yet. So we need to
help Chris et. al. get it there ASAP. In addition to the code
refactoring, they have produced some &lt;a class=&quot;reference external&quot; href=&quot;http://templer-manual.readthedocs.org/en/latest/index.html&quot;&gt;nice documentation available on
readthedocs.org&lt;/a&gt;. If you are interested in helping, please gather
around the #plone on irc.freenode.net to discuss options (I am aclark on
IRC).&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Plone.org maintenance</title>
    <id>http://blog.aclark.net/2011/11/29/plone-org-maintenance/</id>
    <updated>2011-11-29T00:00:00Z</updated>
    <published>2011-11-29T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/11/29/plone-org-maintenance/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-org-maintenance&quot;&gt;

&lt;p&gt;&lt;strong&gt;I am planning to do some work on the plone.org server and website by the end of the year.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Including:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;plans&quot;&gt;
&lt;h2&gt;Plans&lt;/h2&gt;
&lt;p&gt;Upgrade to the latest 4.2.x series&lt;/p&gt;
&lt;p&gt;Switch from xdv to &lt;a class=&quot;reference external&quot; href=&quot;http://pythonpackages.com/info/plone.app.theming&quot;&gt;plone.app.theming&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Reduce the number of NGINXes running on the server by 1 (we currently have an nginx doing the xdv transform)&lt;/li&gt;
&lt;li&gt;Repackage the current plone.org theme as plonetheme.ploneorg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clean up the server&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Separate vendor package configs from buildout generated configs&lt;/li&gt;
&lt;li&gt;Remove archived files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prune tickets on &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/&quot;&gt;dev.plone.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve done some of this work already, earlier this year:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plone/Products.PloneOrg/commits/4.1-compat&quot;&gt;https://github.com/plone/Products.PloneOrg/commits/4.1-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;pitch&quot;&gt;
&lt;h2&gt;Pitch&lt;/h2&gt;
&lt;p&gt;To ensure it gets done by the end of the year, I would like to add this project to my calendar as paid work. So if you are able to help out by donating some portion of the goal, I would appreciate it. Please use the chip-in below to contribute to this effort.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Hello mod_wsgi</title>
    <id>http://blog.aclark.net/2011/08/28/hello-mod_wsgi/</id>
    <updated>2011-08-28T00:00:00Z</updated>
    <published>2011-08-28T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/08/28/hello-mod_wsgi/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;hello-mod-wsgi&quot;&gt;

&lt;p&gt;&lt;strong&gt;It seems I&amp;#8217;ve inadvertently started another series of blog entry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It seems I&amp;#8217;ve inadvertently started another series of blog entry:&amp;nbsp;the &amp;#8220;hello world&amp;#8221; series, wherein I explain how to easily get started with &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/08/20/hello-plone/&quot;&gt;various exciting Python technologies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This time, in order to familiarize myself with &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/modwsgi/&quot;&gt;mod_wsgi&lt;/a&gt;, I&amp;#8217;ve created a buildout to automate some of the processes explained in:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide&quot;&gt;http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(This series also helps me to subtly introduce the zc.buildout &amp;#8220;extendables&amp;#8221; I have been working on. More on those in a future post.)&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-extendables&quot;&gt;
&lt;h2&gt;The extendables&lt;/h2&gt;
&lt;p&gt;The extendables make it easy to bootstrap a development environment with complex software requirements, via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/zc.buildout/1.5.2&quot;&gt;zc.buildout&lt;/a&gt;. In this case, I want to be able to type:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ test-apache test-dir
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And get a working, &lt;em&gt;disposable&lt;/em&gt; Apache instance minutes later. I also want that Apache to come with a mod_wsgi app installed and working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;setup&quot;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First we use the &lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x&quot;&gt;aforementioned extendable&lt;/a&gt;, like so:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv test-dir
$ cd test-dir
$ bin/pip install zc.buildout
$ bin/buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Edit the buildout.cfg to look like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Run buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assuming successful completion, you should be able to run Apache in the foreground via:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/supervisord -e debug -n
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now check &lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This works because the &lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x&quot;&gt;&amp;#8220;extendable&amp;#8221; (buildout configuration file)&lt;/a&gt; contains:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The &lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/conf/app.wsgi.in&quot;&gt;little WSGI app&lt;/a&gt; from the QuickInstallationGuide, templatized via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recipe.template/1.9&quot;&gt;collective.recipe.template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/build/blob/master/apache/2.2.x/httpd.conf.in&quot;&gt;templatized httpd.conf file&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to automate the process even further with the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/binfiles/blob/master/test-apache&quot;&gt;following script&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#!/bin/shmkdir $1
virtualenv-2.6 $1
cd $1
bin/easy_install zc.buildout
bin/buildout init
cat &amp;lt;&amp;lt; EOF &amp;gt; buildout.cfg
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
EOF
bin/buildout
bin/supervisord -e debug -n
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Thus closing the loop on this blog entry, and making the following possible:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ test-apache test-dir
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ve been using my &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/binfiles/blob/master/test-plone&quot;&gt;test-plone&lt;/a&gt; script for years now, and I&amp;#8217;m hoping that the test-apache script proves just as useful (especially as Plone moves closer to a WSGI-supporting stack via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Zope2/2.13.9&quot;&gt;Zope 2.13&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Hello Plone</title>
    <id>http://blog.aclark.net/2011/08/20/hello-plone/</id>
    <updated>2011-08-20T00:00:00Z</updated>
    <published>2011-08-20T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/08/20/hello-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;hello-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a Plone &amp;#8220;Hello, World!&amp;#8221; style tutorial/application for Python programmers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a Plone &amp;#8220;Hello, World!&amp;#8221; style tutorial/application for Python programmers. See &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/hello_plone&quot;&gt;https://github.com/aclark4life/hello_plone&lt;/a&gt; for more.&lt;/p&gt;
&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;This post has been edited post-publication to improve the wording.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonition warning&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Warning&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;This is not a particularly good example since a template can be specified via ZCML. However once you understand hello_plone you will understand the difference between the two approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-1-setup&quot;&gt;
&lt;h2&gt;Step 1 - Setup&lt;/h2&gt;
&lt;p&gt;Create a directory called &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hello_plone&lt;/span&gt;&lt;/code&gt; and inside it create a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;virtualenv&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir hello_plone
$ cd hello_plone
$ virtualenv-2.7 .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then install Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/pip install zc.buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then create an empty buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then add a Plone buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = https://raw.github.com/plock/pins/plone-4-3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now run Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And start Plone:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/plone fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Open &lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Click the button and follow the steps. You don&amp;#8217;t need to select any additional add-ons from the list. Afterward, you should see your Plone site here: &lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080/Plone&quot;&gt;http://localhost:8080/Plone&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-2-develop&quot;&gt;
&lt;h2&gt;Step 2 - Develop&lt;/h2&gt;
&lt;p&gt;Plone is customized via Python packages called Add-ons (née Products). So first we need to create a Python package:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p my.app/my/app
$ touch my.app/my/app/__init__.py
$ touch my.app/my/__init__.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we add our Python package to the buildout. The &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;develop&lt;/span&gt;&lt;/code&gt; line makes the buildout aware of the Python package. The &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;eggs&lt;/span&gt;&lt;/code&gt; line makes Plone aware of it:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
develop = ./my.app
extends = https://raw.github.com/plock/pins/plone-4-3

[plone]
eggs += my.app
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we can add some view code:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from Products.Five.browser.pagetemplatefile import
    ViewPageTemplateFile
from zope.publisher.browser import BrowserPage

class Hello(BrowserPage):
    &amp;quot;&amp;quot;&amp;quot;
    &amp;quot;&amp;quot;&amp;quot;

    template = ViewPageTemplateFile(&amp;#39;hello.pt&amp;#39;)

    def __call__(self):
        return self.template()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And load the view code via &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/components/zcml.html&quot;&gt;ZCML&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;configure
    xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;&amp;gt;

    &amp;lt;browser:page
        class=&amp;quot;.hello.hello&amp;quot;
        for=&amp;quot;*&amp;quot;
        name=&amp;quot;hello&amp;quot;
        permission=&amp;quot;zope2.View&amp;quot;
        /&amp;gt;

&amp;lt;/configure&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And add a &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/templates_css_and_javascripts/template_basics.html&quot;&gt;template&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;div metal:use-macro=&amp;quot;here/main_template/macros/master&amp;quot;&amp;gt;

    &amp;lt;div metal:fill-slot=&amp;quot;main&amp;quot;&amp;gt;

        &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;

    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-3-next-steps&quot;&gt;
&lt;h2&gt;Step 3 - Next steps&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Easy through-the-web form generation with &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/reference_manuals/active/ploneformgen/&quot;&gt;PloneFormGen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Content types with &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/content/dexterity.html&quot;&gt;Dexterity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Theming with &lt;a class=&quot;reference external&quot; href=&quot;http://developer.plone.org/templates_css_and_javascripts/diazo.html&quot;&gt;Diazo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Plone Secrets: Episode 3 - Collective Recaptcha Installation</title>
    <id>http://blog.aclark.net/2011/08/09/plone-secrets-episode-3-collective-recaptcha-installation/</id>
    <updated>2011-08-09T00:00:00Z</updated>
    <published>2011-08-09T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/08/09/plone-secrets-episode-3-collective-recaptcha-installation/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-secrets-episode-3-collective-recaptcha-installation&quot;&gt;

&lt;p&gt;&lt;strong&gt;Another one from the: &amp;#8220;wow, this approach is totally and completely non-obvious to beginners&amp;#8221; department.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;my-kingdom-for-a-custom-contact-form-with-captcha&quot;&gt;
&lt;h2&gt;My kingdom for a (custom) contact form (with captcha)&lt;/h2&gt;
&lt;p&gt;I don&amp;#8217;t know if I&amp;#8217;ve made written-mention of this anywhere else, but &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;aclark.net&lt;/a&gt;has a new customized &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/contact-info&quot;&gt;contact form&lt;/a&gt; with captcha. ;-) It is customized via &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/z3c.jbot&quot;&gt;z3c.jbot&lt;/a&gt; which is an awesome tool (more on that later). This in and of itself is not-so-terribly newsworthy. What is interesting, though, is &lt;em&gt;how&lt;/em&gt; this new customized form came to be; and how its features compare to the default contact form.&lt;/p&gt;
&lt;p&gt;So here goes: In Plone, we have a page template called &lt;a class=&quot;reference external&quot; href=&quot;http://svn.plone.org/svn/plone/Products.CMFPlone/trunk/Products/CMFPlone/skins/plone_templates/contact-info.cpt&quot;&gt;contact-info.cpt&lt;/a&gt;. It&amp;#8217;s not so special (in that it is pretty feature-&lt;em&gt;less&lt;/em&gt;, though it will send mail if you ask it to) but it does the job for most folks. And it almost has to, because customizing it is beyond the realm of what &lt;em&gt;anyone&lt;/em&gt; would call &amp;#8220;straight forward&amp;#8221; or &amp;#8220;reasonable to expect from TTW customizers, integrators, or even developers&amp;#8221;¹.&lt;/p&gt;
&lt;p&gt;Why do I say this?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;been-there-done-that-cmfformcontroller&quot;&gt;
&lt;h2&gt;Been there, done that: CMFFormController&lt;/h2&gt;
&lt;p&gt;First, let me start with the technology that is used to implement the contact form.&amp;nbsp;It&amp;#8217;s called &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.CMFFormController&quot;&gt;CMFFormController&lt;/a&gt; and it went out of style in the 1970s, along with disco and bell bottoms. Bell bottoms came back, but CMFFormController didn&amp;#8217;t! Don&amp;#8217;t get me wrong: CMFFormController is a decent technology/implementation. It works. But it&amp;#8217;s not very &amp;#8220;modern&amp;#8221; by today&amp;#8217;s coding standards. As such, it will simply be dragged along Plone-version-after-Plone-version until either: a.) someone wants to replace it, or b.) it becomes too big of a maintenance burden to support and someone has to replace it. This is the way of many things, and there is nothing inherently wrong with this phenomenon. In fact, there are even good things about it: e.g. the release manager, framework team, and core developers&amp;#8217; ability to publish release-after-solid-release under such code-aging circumstances is a testament to their skill and dedication.&lt;/p&gt;
&lt;p&gt;BUT… and this is a BIG BUT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;we-can-do-better&quot;&gt;
&lt;h2&gt;We can do better&lt;/h2&gt;
&lt;p&gt;Leaving this old stuff laying around, with no new stuff to point new users to does a huge disservice to &lt;em&gt;all&lt;/em&gt; of our users. It flies &lt;em&gt;directly&lt;/em&gt; in the face of one of our core missions: as &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/#!/asigottech&quot;&gt;Wyn Williams&lt;/a&gt; put it once, to be the&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;&amp;#8220;best damn enterprise content manage system on the planet&amp;#8221;.&lt;/strong&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now, I&amp;#8217;ve been around the block, so I am not suggesting we must fix everything at once. Legacy software can be supported for years and years and years (and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Zope2&quot;&gt;YEARS&lt;/a&gt;). What I am suggesting is that we need to make a very significant effort to &lt;strong&gt;COMPLETELY HIDE&lt;/strong&gt; these implementation details to newcomers. I don&amp;#8217;t want to tell people in IRC to go to &lt;strong&gt;portal_skins&lt;/strong&gt; anymore. I want my &amp;#8220;OS X Lion release for Plone&amp;#8221;, please (sans Vista overtones.)&lt;/p&gt;
&lt;p&gt;So how do we get there? Well, in the case of portal_skins there is talk of decommissioning &lt;strong&gt;portal_view_customizations,&lt;/strong&gt; which was supposed to be the &amp;#8220;new portal_skins&amp;#8221; as I understand it. But since half of our templates are still in CMF skin layers, &lt;em&gt;and&lt;/em&gt; because this feature was not technically well received (i.e. it needs &lt;em&gt;more&lt;/em&gt; features and development), &lt;em&gt;and&lt;/em&gt; because &lt;strong&gt;portal_resources&lt;/strong&gt; came along around the same time as &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plone.app.theming&quot;&gt;plone.app.theming&lt;/a&gt;, folks are considering removing portal_view_customizations. I have no strong opinion about it (other than I hate the name, too long) and I trust the Framework Team to handle it. What I do care about is that whatever remains in the ZMI be very clearly designated as either &amp;#8220;new style&amp;#8221; or &amp;#8220;old style&amp;#8221;. We can&amp;#8217;t get away from the ZMI yet, but portal tools do have title attributes so let&amp;#8217;s use them.&lt;/p&gt;
&lt;p&gt;Now, we can&amp;#8217;t ditch &lt;strong&gt;portal_skins&lt;/strong&gt; just yet, and who knows what will happen with &lt;strong&gt;portal_view_customizations&lt;/strong&gt;, but the *minute* we know some technology is out of date, we should reveal it in the user interface (even in the ZMI user interface). E.g.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;Curiously, the attribute that holds this string is lowercase &amp;#8220;title&amp;#8221;
(I&amp;#8217;d expect camel case Description, though I&amp;#8217;m not entirely sure why
I expect that.)&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Hanno Schlichting has made some great progress recently with enhancing the ZMI for Plone users, especially with regard to&lt;em&gt;file-system vs.  through-the-web&lt;/em&gt; development, and &lt;em&gt;through-the-plone vs. through-the-zmi configuration&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I love this trend, and would like to see more of it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;secrets-revealed&quot;&gt;
&lt;h2&gt;Secrets revealed&lt;/h2&gt;
&lt;p&gt;Anyway, I&amp;#8217;ve been dancing around the secrets to be revealed in this blog post because it is fun to play with the future. And it&amp;#8217;s important to work hard toward achieving it. But enough of that, here is what you need to know today.&lt;/p&gt;
&lt;p&gt;Like I said, I customized the contact form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;old-style-vs-new-style&quot;&gt;
&lt;h2&gt;Old style vs. new style&lt;/h2&gt;
&lt;p&gt;Back in the &amp;#8220;old days&amp;#8221; you had to create a CMF skin layer and put a copy of the template in a directory on the file system, configured as a File System Directory View. &lt;em&gt;Everything&lt;/em&gt; used to be customized via skin layers.&lt;/p&gt;
&lt;p&gt;Now-a-days, we have z3c.jbot. Though a bit of a hack², it does exactly what you&amp;#8217;d expect, almost exactly how you&amp;#8217;d expect it to. It &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website&quot;&gt;doesn&amp;#8217;t even require a Python package&lt;/a&gt;. By convention though, folks typically do put z3c.jbot template customizations in Python packages.&lt;/p&gt;
&lt;p&gt;This requires a few steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-1-create-a-python-package&quot;&gt;
&lt;h2&gt;Step 1: Create a Python package&lt;/h2&gt;
&lt;p&gt;First, a Python package. This is relatively simple, so I&amp;#8217;m not going to skip-and-point-you-somewhere-else just yet, I&amp;#8217;m going to explain first.
The &lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/1123090&quot;&gt;gist of it&lt;/a&gt; is this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p my.package/my/package
$ touch my.package/setup.py
$ touch my.package/my/__init__.py
$ touch my.package/my/package/__init__.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you would edit setup.py and the &amp;#8220;middle&amp;#8221; __init__.py with code.
Something like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#!/bin/sh
mkdir -p my.package/my/package
touch my.package/setup.py
touch my.package/my/__init__.py
touch my.package/my/package/__init__.py
cat &amp;gt; my.package/setup.py &amp;lt;&amp;lt; EOF
from setuptools import setup, find_packages
setup(
    name=&amp;#39;my.package&amp;#39;,
    packages=find_packages(),
    namespace_packages=[
        &amp;#39;my&amp;#39;,
    ]
)
EOF
cat &amp;gt; my.package/my/__init__.py &amp;lt;&amp;lt; EOF
from pkg_resources import declare_namespace
declare_namespace(__name__)
EOF
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Alternatively, use &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/ZopeSkel&quot;&gt;ZopeSkel&lt;/a&gt; to generate all this boilerplate code for you. It does a much better, and more complete job than what I have done here. The important thing is that you &lt;em&gt;understand what is going on&lt;/em&gt;. In the case of aclark.net, our Python package is called &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet&quot;&gt;plonetheme.aclarknet&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-2-add-template-overrides&quot;&gt;
&lt;h2&gt;Step 2: Add template overrides&lt;/h2&gt;
&lt;p&gt;Now that we have a Python package we can start customizing Plone. By convention, we&amp;nbsp; create a &amp;#8220;templates&amp;#8221; directory inside the namespaced package e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir my.package/my/package/templates
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or you can check out aclark.net&amp;#8217;s &amp;#8220;templates&amp;#8221; directory here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the way z3c.jbot works, in the &amp;#8220;templates&amp;#8221; directory, we add files with names that correspond to the Python module we want to customize. E.g.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_templates.contact-info.cpt&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_templates.contact-info.cpt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(For some reason, github thinks that file is binary, so &lt;a class=&quot;reference external&quot; href=&quot;http://dpaste.com/589529/&quot;&gt;here are the contents&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Now, this is the amazing part: in addition to templates in views, viewlets and portlets, we can customize any &lt;a class=&quot;reference external&quot; href=&quot;http://old.zope.org/Products/CMF/&quot;&gt;CMF&lt;/a&gt; object! E.g. the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/RestrictedPython&quot;&gt;RestrictedPython&lt;/a&gt; (more technology anyone?) CMFFormController validation script used to validate our contact form:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That brings us to adding recaptcha, but first let us finish configuring template overrides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-3-configure-template-overrides&quot;&gt;
&lt;h2&gt;Step 3: Configure template overrides&lt;/h2&gt;
&lt;p&gt;Now that we have customized Plone templates, we can configure Plone to use our customizations.&lt;/p&gt;
&lt;p&gt;This is done via a technology you may have heard of: &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/documentation/manual/theme-reference/buildingblocks/components/wiring&quot;&gt;ZCML&lt;/a&gt;. Using ZCML, we can tell Plone (or jbot in this case) to use the templates in our &amp;#8220;templates&amp;#8221; directory.&lt;/p&gt;
&lt;p&gt;The ZCML we are going to use is placed in the &amp;#8220;top level&amp;#8221; configure.zcml file in our package. That means we need a top level configure.zcml file:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ touch my.package/my/package/configure.zcml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we add ZCML to &amp;#8220;configure our application&amp;#8221;. Note in addition to the ZCML used to configure jbot, there is ZCML for Diazo and ZCML to hold our &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/06/20/plone-secrets-episode-1-%e2%80%94-site-actions-contact-link/&quot;&gt;Genericsetup customizations:&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;configure
    xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;
    xmlns:genericsetup=&amp;quot;http://namespaces.zope.org/genericsetup&amp;quot;
    xmlns:plone=&amp;quot;http://namespaces.plone.org/plone&amp;quot;
    xmlns=&amp;quot;http://namespaces.zope.org/zope&amp;quot;&amp;gt;    &amp;lt;plone:static directory=&amp;quot;theme/aclarknet&amp;quot; type=&amp;quot;theme&amp;quot; /&amp;gt;    &amp;lt;include package=&amp;quot;z3c.jbot&amp;quot; file=&amp;quot;meta.zcml&amp;quot; /&amp;gt;
    &amp;lt;browser:jbot directory=&amp;quot;templates&amp;quot; /&amp;gt;    &amp;lt;genericsetup:registerProfile
        name=&amp;quot;default&amp;quot;
        title=&amp;quot;ACLARK.NET, LLC profile&amp;quot;
        description=&amp;quot;Installs ACLARK.NET, LLC site
            customizations&amp;quot;
        directory=&amp;quot;profiles/default&amp;quot;
        provides=&amp;quot;Products.GenericSetup.interfaces.EXTENSION&amp;quot;
        /&amp;gt;&amp;lt;/configure&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This file is located here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml&quot;&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see that everything inside the &amp;lt;configure&amp;gt;&amp;lt;/configure&amp;gt; tag(s) is associated with an XML namespace. If you don&amp;#8217;t add the appropriate namespace inside the &amp;lt;configure&amp;gt; tag, your configuration will fail spectacularly (because without the proper XML namespace configured, there is no code loaded to handle your configuration.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-4-add-recaptcha&quot;&gt;
&lt;h2&gt;Step 4: Add recaptcha&lt;/h2&gt;
&lt;p&gt;Now, finally, we get to the exciting part. We have customized our contact form, but we are receiving a fair amount of spam due to spammers&amp;#8217; ability to automate form submission. To foil the spammers, we want to add a captcha form that will hopefully require that an actual human to fill out the form.&lt;/p&gt;
&lt;p&gt;Thanks to David Glick and Groundwire, we have &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recaptcha&quot;&gt;collective.recaptcha&lt;/a&gt; which provides an integration of &lt;a class=&quot;reference external&quot; href=&quot;http://www.google.com/recaptcha&quot;&gt;Google&amp;#8217;s Recaptcha service&lt;/a&gt; into Plone.&lt;/p&gt;
&lt;p&gt;In order to use it, first we add the package to our buildout, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;…
[plone]
# Eggs are Python packages
eggs +=
#   Diazo theming
    plonetheme.aclarknet
#   Add-ons
    collective.portlet.wordpress
    collective.recaptcha# Need zcml for c.recaptcha until 1.1.3 is released
zcml = collective.recaptcha
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See the rest of the file here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://raw.github.com/ACLARKNET/aclark_net_website/master/buildout.cfg&quot;&gt;https://raw.github.com/ACLARKNET/aclark_net_website/master/buildout.cfg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now run buildout and restart Plone.&lt;/p&gt;
&lt;p&gt;With collective.recaptcha installed via buildout, you should now be able to open &lt;a class=&quot;reference external&quot; href=&quot;http://yoursite:8080/Plone/&amp;#64;&amp;#64;recaptcha-settings&quot;&gt;http://yoursite:8080/Plone/&amp;#64;&amp;#64;recaptcha-settings&lt;/a&gt; to configure Recaptcha.&lt;/p&gt;
&lt;p&gt;(To get a public and private key, you can sign up for recaptcha here: &lt;a class=&quot;reference external&quot; href=&quot;http://www.google.com/recaptcha&quot;&gt;http://www.google.com/recaptcha&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Lastly, make the appropriate changes to the contact form and validation script. E.g. &lt;a class=&quot;reference external&quot; href=&quot;http://dpaste.com/589529/&quot;&gt;include the captcha image:&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;…
&amp;lt;tal:block tal:replace=&amp;quot;structure
    context/@@captcha/image_tag&amp;quot;/&amp;gt;
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And make sure to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy&quot;&gt;validate the submission&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;…
    # Re-captcha validation
    if not context.restrictedTraverse(&amp;#39;@@captcha&amp;#39;).verify():
        context.plone_utils.addPortalMessage(_(u&amp;#39;You entered
            an invalid captcha.&amp;#39;), &amp;#39;error&amp;#39;)
        return state.set(status=&amp;#39;failure&amp;#39;)
    else:
        return state
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;¹ I&amp;#8217;m pushing &amp;#8220;reasonable&amp;#8221; limits here for argument&amp;#8217;s sake. For those who know Plone already, a lot of what might seem impossible to newcomers is &amp;#8220;reasonable&amp;#8221; for them. No flames please. Unless you absolutely must.  ;-)&lt;/p&gt;
&lt;p&gt;² I hear people call it that, though I don&amp;#8217;t know the details. I assume it &amp;#8220;monkey patches&amp;#8221; which template to use at render-time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Plone Secrets: Episode 2 - Collective Python Buildout</title>
    <id>http://blog.aclark.net/2011/07/06/plone-secrets-episode-2-collective-python-buildout/</id>
    <updated>2011-07-06T00:00:00Z</updated>
    <published>2011-07-06T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/07/06/plone-secrets-episode-2-collective-python-buildout/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;plone-secrets-episode-2-collective-python-buildout&quot;&gt;

&lt;p&gt;&lt;strong&gt;You know who uses the (Plone) Collective Python buildout?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You know who uses the (Plone) Collective Python buildout? Me neither, because we don&amp;#8217;t have any good statistics on its use (that I know of).  If it were a Python package, we could at least &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/&quot;&gt;count the number of times it has been downloaded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You know who should use it? Everyone.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[dramatic pause…]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OK maybe not everyone, but at least everyone that regularly develops with &lt;strong&gt;multiple versions of Python&lt;/strong&gt;. Here&amp;#8217;s why.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;actively-maintained&quot;&gt;
&lt;h2&gt;Actively maintained&lt;/h2&gt;
&lt;p&gt;Check out the log. It has been going strong for over 3 years.&lt;/p&gt;
&lt;p&gt;If I recall correctly, it was born out of the frustration¹ of having to compile Python on Mac OS X Leopard. Python &lt;em&gt;never&lt;/em&gt; compiles correctly on new versions of OS X (which is a complete mystery to me given that Apple ships with Python, don&amp;#8217;t they think people will want to compile it?).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;easy-to-install&quot;&gt;
&lt;h2&gt;Easy to install&lt;/h2&gt;
&lt;p&gt;Got Subversion? Then you &lt;em&gt;can haz&lt;/em&gt; the Collective Python buildout². You will also need to bootstrap it with whatever Python version you happen to have laying around. I won&amp;#8217;t go into detail about this; but suffice it to say depending on your OS, one of the following or something like it should work:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aptitude install python2.5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install python
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are on Windows, give up (unless you have a Microsoft C compiler). Sorry.&lt;/p&gt;
&lt;p&gt;Now, check out the code from the repository (if you are a member of the &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/collective&quot;&gt;Collective&lt;/a&gt; and may potentially contribute something back, make sure you use https):&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn co http://svn.plone.org/svn/collective/buildout/python
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next, bootstrap and run the buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cd python
$ python bootstrap.py -d
$ bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s it. The buildout should go merrily on it&amp;#8217;s way compiling Python 2.4 through 3.2. When it finishes, you can install it in /opt (or wherever you like) with the following command (you might need sudo):&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/install-links
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then you should see:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /bin/ls -1 /opt/local/bin
easy_install-2.4
easy_install-2.5
easy_install-2.6
easy_install-2.7
easy_install-3.2
pip-2.4
pip-2.5
pip-2.6
pip-2.7
pip-3.2
python2.4
python2.5
python2.6
python2.7
python3.2
virtualenv-2.4
virtualenv-2.5
virtualenv-2.6
virtualenv-2.7
virtualenv-3.2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;easy-to-configure&quot;&gt;
&lt;h2&gt;Easy to configure&lt;/h2&gt;
&lt;p&gt;Now you can add &lt;strong&gt;/opt/local/bin&lt;/strong&gt; to your environment PATH variable.  This will make it easy to choose a particular Python, PIP, or Virtualenv at your leisure.&lt;/p&gt;
&lt;p&gt;Unfortunately, if you pip install something, it will end up in the checkout instead of &lt;em&gt;/opt/local/bin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To get around this, I usually pick one Python for daily use, and add its bin directory to my environment PATH variable:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ echo $PATH | tr &amp;#39;:&amp;#39; &amp;#39;n&amp;#39;
/sbin
/usr/sbin
/usr/local/bin
/opt/local/bin
/Users/aclark/Developer/collective/python/python-2.7/bin
/usr/bin
/bin
/sbin
/usr/X11/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After various pip installs, my 2.7 bin directory contains the usual tools of the trade:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /bin/ls -1 /Users/aclark/Developer/collective/python/
python-2.7/bin
__dotcloud_git_ssh
activate
activate.csh
activate.fish
activate_this.py
bfg2pyramid
checkoutmanager
cloudservers
dotcloud
easy_install
easy_install-2.7
eye
flake8
fsdump
fsoids
fsrefs
fstail
hg
mako-render
mkrelease
paster
pilconvert.py
pildriver.py
pilfile.py
pilfont.py
pilprint.py
pip
pip-2.7
playerpiano
pygmentize
python
python2.7
recorderpiano
repozo
rfc2397
rst2html.py
rst2latex.py
rst2man.py
rst2newlatex.py
rst2odt.py
rst2odt_prepstyles.py
rst2pseudoxml.py
rst2s5.py
rst2xml.py
rstpep2html.py
runzeo
sphinx-autogen
sphinx-build
sphinx-quickstart
vanity
zconfig
zconfig_schema2html
zdaemon
zeoctl
zeopack
zeopasswd
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;wrap-it-up-i-ll-take-it&quot;&gt;
&lt;h2&gt;Wrap it up, I&amp;#8217;ll take it&lt;/h2&gt;
&lt;p&gt;That&amp;#8217;s it! There is not too much more to say, other than I hope you find this post useful and will consider using the &lt;a class=&quot;reference external&quot; href=&quot;http://svn.plone.org/svn/collective/buildout/python&quot;&gt;Collective Python buildout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, comments are always welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notes&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;¹ Experienced by its creator, &lt;a class=&quot;reference external&quot; href=&quot;http://twitter.com/fschulze&quot;&gt;fschulze&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;² It will likely end up on &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/collective&quot;&gt;Github&lt;/a&gt; at some point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Top 10 Reasons Plone 3.3 Site Admin Book is Still for You</title>
    <id>http://blog.aclark.net/2011/05/10/top-10-reasons-plone-3-3-site-admin-book-is-still-for-you/</id>
    <updated>2011-05-10T00:00:00Z</updated>
    <published>2011-05-10T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/05/10/top-10-reasons-plone-3-3-site-admin-book-is-still-for-you/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;top-10-reasons-plone-3-3-site-admin-book-is-still-for-you&quot;&gt;

&lt;p&gt;&lt;strong&gt;About a year ago, I was frantically trying to finish &amp;#8216;Plone 3.3 Site Administration&amp;#8217; …&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;About a year ago, I was frantically trying to finish &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/book&quot;&gt;Plone 3.3 Site Administration&lt;/a&gt; in time to teach it at Plone Symposium East 2010 at Penn State University as well as publish it. I remember staying up all night to finish &amp;amp; submit the final drafts then driving 4 hours to Penn State, then teaching for 8 hours before I was finally able to crash (but not before consuming a large and delicious cheeseburger and a Yuengling from the &lt;a class=&quot;reference external&quot; href=&quot;http://www.nittanylioninn.psu.edu/&quot;&gt;Nittany Lion Inn&lt;/a&gt; room service, yum).&lt;/p&gt;
&lt;p&gt;The class went well and everyone seemed happy with the results and I am very grateful to PSU for the opportunity. I remember struggling to get some Windows users up to speed, so this year I&amp;#8217;ve decided to &amp;#8220;require&amp;#8221; students to install Plone before the class via the &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/plone/releases/4.0.5&quot;&gt;appropriate installer for their platform&lt;/a&gt;. Most &amp;#8220;site admin-ing&amp;#8221; we do will be &amp;#8220;ad hoc&amp;#8221; preferably on top of a stand-alone Python installation. But we can refer to the installer-based Plone as needed and in fact the installer-based Plone is all some folks will ever need or want.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-list&quot;&gt;
&lt;h2&gt;The list&lt;/h2&gt;
&lt;p&gt;Anyway, this post is about this year&amp;#8217;s class taught from the same material but updated to account for any changes that have occurred since the book was first published. Most importantly, it addresses the release of Plone 4 in the context of the book title &amp;#8220;Plone 3.3 Site Administration&amp;#8221;. So without further ado, why &amp;#8220;Plone 3.3 Site Administration&amp;#8221; is still for you:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;strong&gt;The version reference in the title is mostly meaningless&lt;/strong&gt;.  &lt;a class=&quot;reference external&quot; href=&quot;http://www.packtpub.com&quot;&gt;PACKT&lt;/a&gt; insist on incorporating a software version number into the title of their books. I would have called it: &amp;#8220;Plone Site Administration&amp;#8221;, or &amp;#8220;Buildout for Plone&amp;#8221;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The book teaches valuable *techniques*, using Plone 3.3 as an example&lt;/strong&gt;. Most, if not all of the techniques still apply today i.e. w/Plone 4.0.x and Plone 4.1.x. They will likely continue to apply as long as Plone continues to rely on &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/zc.buildout&quot;&gt;zc.buildout&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone makes it relatively easy to upgrade&lt;/strong&gt; by providing &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/release/4.1b2/versions.cfg&quot;&gt;version numbers&lt;/a&gt; for all of the packages it requires. In many cases an upgrade simply involves referring to a newer list of package versions. In the case of upgrading from Plone 3.3.x to Plone 4.0.x, the [zope2] section goes away because Zope2 became an egg. (Compare &lt;a class=&quot;reference external&quot; href=&quot;http://raw.github.com/plock/pins/master/plone-3-3&quot;&gt;this buildout&lt;/a&gt; with &lt;a class=&quot;reference external&quot; href=&quot;http://raw.github.com/plock/pins/master/plone-4-0&quot;&gt;this one&lt;/a&gt;.) Also Plone 4 buildouts should be bootstrapped with Python 2.6 instead of Python 2.4 as was required by Plone 3.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python tools &amp;#8220;goodness&amp;#8221;&lt;/strong&gt;. This book goes to great lengths to demonstrate how Plone fits &amp;#8220;naturally&amp;#8221; on top of the Python software stack. It also includes information about non-Plone-specific Python-related technologies like &lt;a class=&quot;reference external&quot; href=&quot;http://packages.python.org/setuptools/&quot;&gt;Setuptools&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/pip&quot;&gt;pip&lt;/a&gt;. This in theory makes Plone more approachable to &amp;#8220;regular&amp;#8221; Python folk.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Python buildout&lt;/strong&gt;. One of the most useful things the Plone community has to offer the Python community at large is the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/buildout.python&quot;&gt;Python buildout&lt;/a&gt;. If you do development that requires multiple versions of Python e.g. Plone 3.3.x/4.0.x you could do worse than to rely on this buildout to provide them multiple versions quickly and easily. The book dances around the subject, but the point is: use it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;. This book goes to great lengths to demonstrate the Plone installation process on three popular operating systems: Mac OS X, Ubuntu Linux, and Windows. The point is to show off how similar the process is across platforms because Python does all the hard work, and of course to deal with the cases where it is not similar e.g. it&amp;#8217;s &amp;#8220;hard&amp;#8221; to compile &lt;a class=&quot;reference external&quot; href=&quot;http://python.org/download/windows/&quot;&gt;Python on Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add-ons&lt;/strong&gt;! A lot of the value of Plone comes from the ability to customize it to fit your needs. If that customization has already been done by some other member of the community, even better. This is one of the core essences of the Plone community: everyone working hard to contribute to the available pool of add-ons, and then &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products&quot;&gt;sharing the results&lt;/a&gt;. This book aims to make you better at evaluating the myriad of options you may be presented with when you need to &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi&quot;&gt;find and install an add-on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upgrades&lt;/strong&gt;! The final chapter of the book holds your hand and walks you through an upgrade from Plone 3.3.x to Plone 4.0.x. It doesn&amp;#8217;t contain anything you can&amp;#8217;t find at &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/upgrade&quot;&gt;http://plone.org/upgrade&lt;/a&gt; (in fact it contains much less information), but in the context of a book full of buildout configuration file examples, it should feel more like a natural step than an intimidating process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;! The book covers how to deal with security patches, &lt;em&gt;not&lt;/em&gt; in the common case of when a hotfix is released as a Zope 2 Product or Python egg, but in the &lt;a class=&quot;reference external&quot; href=&quot;http://raw.github.com/plock/pins/master/plone-2-1&quot;&gt;somewhat more obscure case&lt;/a&gt; where a newer (non-egg) Zope2 release replaces an older one with a vulnerability. The modern equivalent would be a Plone release post-security-hotfix release. Such releases simply contain a newer KGS listing package versions that contain the appropriate fixes.  This &amp;#8220;old school&amp;#8221; example is included to give readers as broad a perspective as possible, so that they may better handle anything they may come across in the wild.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All the boring stuff too&lt;/strong&gt;. This book also walks you through the remaining &amp;#8220;hot&amp;#8221; topics not covered yet in this list, all from a heavy zc.buildout configuration management perspective: site basics e.g. customizing navigation, appearance (AKA theming, strictly &amp;#8220;old style&amp;#8221; sorry), administration e.g. mail settings, ldap, deployment and maintenance e.g. automating database backups and packing, and optimization e.g. load balancing, supervisor, and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/munin.plone&quot;&gt;munin graphs&lt;/a&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-training&quot;&gt;
&lt;h2&gt;The training&lt;/h2&gt;
&lt;p&gt;Sound even the &lt;em&gt;slightest&lt;/em&gt; bit interesting? And/or are these things you &lt;em&gt;need&lt;/em&gt; to know about Plone for your job? If so, then you or your employees will not want to miss my one day class next week at the &lt;a class=&quot;reference external&quot; href=&quot;http://weblion.psu.edu/symposium&quot;&gt;Plone Symposium East 2011&lt;/a&gt;. In case you or your employees are interested, you can sign up here (separate from the symposium):&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/services&quot;&gt;http://aclark.net/services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope to see you there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-service&quot;&gt;
&lt;h2&gt;The service&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;baas-buildout-as-a-service&quot;&gt;
&lt;h3&gt;BaaS (Buildout as a Service)&lt;/h3&gt;
&lt;p&gt;(Yes, I am serious)&lt;/p&gt;
&lt;p&gt;And finally for whatever it is worth, many of the lessons learned from writing the book from the author&amp;#8217;s perspective ended up here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/plock/pins&quot;&gt;https://github.com/plock/pins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is to say: buildouts are frequently changing in response to what is going on in the Python package ecosystem around them even though their primary goal is to maintain stability and/or to only change when you want to change. When a change like a security fix or configuration change comes along, the author pushes changes out to the dist server than deploys the dist server changes to production.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Collective.transmogrifier Without Plone?</title>
    <id>http://blog.aclark.net/2011/04/15/collective-transmogrifier-without-plone/</id>
    <updated>2011-04-15T00:00:00Z</updated>
    <published>2011-04-15T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/04/15/collective-transmogrifier-without-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;collective-transmogrifier-without-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;Yes!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since I began drinking the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.transmogrifier&quot;&gt;collective.transmogrifier&lt;/a&gt; Kool Aid a few months back, I&amp;#8217;ve gotten quite excited about the possibility of being able to use it outside Plone, i.e. like &amp;#8220;regular&amp;#8221; Python people would do.&lt;/p&gt;
&lt;p&gt;It just so happens I have a current project that requires me to import content to Plone 2.5; it took me a while to realize I could just setup a Plone 4 instance, run transmogrifier in it, and import content from it (i.e. from the file system) to Plone 2.5 over XML-RPC. But something about having to include Plone 4 in that scenario rubbed me the wrong way: Plone 4 is not needed, it&amp;#8217;s just executing the pipeline.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(I also don&amp;#8217;t like the idea of having to create a Python package and a GenericSetup profile in order to facilitate a migration.)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;goals&quot;&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;p&gt;So in addition to working on getting &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/collective/mr.migrator&quot;&gt;mr.migrator&lt;/a&gt; to be able to configure and execute pipelines (currently only GenericSetup profiles and Python code are supported), I thought I&amp;#8217;d experiment with removing the CMFCore dependency.&lt;/p&gt;
&lt;p&gt;The initial, &lt;em&gt;experimental&lt;/em&gt; results can be seen in action here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/mr_migrator_demo&quot;&gt;https://github.com/aclark4life/mr_migrator_demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/mr_migrator_demo/raw/master/README.txt&quot;&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Introduction
============

This demo is:* Proof of concept for mr.migrator: A tool that provides the ability to
register and execute collective.transmogrifier pipelines without creating a
Python package. It&amp;#39;s Miller Time™.* Also proof of concept for collective.transmogrifier with the CMFCore
dependency removed (and a zope.component dependency added in its place).
It&amp;#39;s Scotch time™.

Explanation
-----------
In order to work, it currently relies on:* https://svn.plone.org/svn/collective/collective.transmogrifier/branches/aclark-mr-migrator-compat
* https://svn.plone.org/svn/collective/transmogrify.filesystem/branches/aclark-mr-migrator-compat
* git@github.com:aclark4life/transmogrify.ploneremote.git These are, respectively:* A branch of c.transmogrifier with a setuptools entry point plugin system
added, and the CMFCore dependencies removed (gracefully, I hope).* A branch of t.filesystem with the collective.transmogrifier entry point
specified (and some CMFCore dependencies removed).* A fork of t.ploneremote with the collective.transmogrifier entry point
specified (and some CMFCore dependencies remove).
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s a work in progress, but it actually imports content. You may try it locally, as explained in the rest of the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/mr_migrator_demo/raw/master/README.txt&quot;&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installation
------------
You can try out this demo::

    $ git clone git@github.com:aclark4life/mr_migrator_demo.git
    $ cd mr_migrator_demo
    $ python bootstrap.py
    $ bin/buildout

Elsewhere, setup a Plone site listenining on localhost:8080 with a Plone site
object called &amp;quot;Plone&amp;quot; and then:

    $ bin/mr.migrator

You should end up with content in Plone that looks like this:
…
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I hope this helps move the state of the art forward a bit; it would be great to share this technology with the rest of the Python world. And in case you are curious about the changes, you can read the revision log here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/collective/log/collective.transmogrifier/branches/aclark-mr-migrator-compat&quot;&gt;http://dev.plone.org/collective/log/collective.transmogrifier/branches/aclark-mr-migrator-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Start with the following revision, and click through the next 8 commits:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/collective/changeset/237628/collective.transmogrifier/branches/aclark-mr-migrator-compat&quot;&gt;http://dev.plone.org/collective/changeset/237628/collective.transmogrifier/branches/aclark-mr-migrator-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comments welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;credits&quot;&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks Martijn Pieters for creating collective.transmogrifier; thanks Martin Aspeli and Dylan Jay for their blueprints; and thanks Dylan Jay for bringing transmogrifier to the masses via mr.migrator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Hostout Rules</title>
    <id>http://blog.aclark.net/2011/01/26/hostout-rules/</id>
    <updated>2011-01-26T00:00:00Z</updated>
    <published>2011-01-26T00:00:00Z</published>
    <link href="http://blog.aclark.net/2011/01/26/hostout-rules/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;hostout-rules&quot;&gt;

&lt;p&gt;&lt;strong&gt;As in &amp;#8220;dominates&amp;#8221;, not a &amp;#8220;list of rules&amp;#8221;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I spent a long time avoiding &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.hostout&quot;&gt;collective.hostout&lt;/a&gt; for reasons I will
call &amp;#8220;technical stylistic differences&amp;#8221; with the author Dylan Jay.&lt;/p&gt;
&lt;p&gt;But then I grew up (and in cases of Plone growth like this, I usually
end up crediting the probably-much-younger-than-me-in-years,
but-certainly-much-more-possessive-of-sage-like-wisdom-than-me-Martin-Aspeli;
and this time is certainly no exception. So thanks Martin!)&lt;/p&gt;
&lt;p&gt;As it turns out, Hostout (as I like to call it now, because we are on a
first name basis) is awesome! Let me break down the awesomeness for you.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;buildout&quot;&gt;
&lt;h2&gt;Buildout&lt;/h2&gt;
&lt;p&gt;It starts with Buildout. I won&amp;#8217;t bore you with the details of why
Buildout is awesome, but I will mention one key feature:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;INI-style configuration, y&amp;#8217;all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes you just want to specify something like:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and be done. I am not making this up folks. There is something about
INI-style configuration that transcends time and space, and reaches
across partisan-aisles to bring folks together in a &amp;#8220;let&amp;#8217;s just get this
done&amp;#8221; sort of way. Of course not everyone likes them, but if you are a
technical person and don&amp;#8217;t like them, I guarantee you at least
understand them and can see why they might be appropriate in some cases
over another technology.&lt;/p&gt;
&lt;p&gt;Anyway, back to the awesomeness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;fabric&quot;&gt;
&lt;h2&gt;Fabric&lt;/h2&gt;
&lt;p&gt;Fabric is awesome! I won&amp;#8217;t bore you with the details of why Fabric is
awesome. But I will mention one key feature:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;SSH, people. SSH.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes you just want to type:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab -H foo.com bar
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and be done. Fabric lets you execute the Python code you wrote in a
function called &amp;#8220;bar&amp;#8221;, inside a (local) file called fabfile.py, on a
(remote) host called foo.com. All with the touch of a button, so to
speak. That is to say, you create a local fabfile.py file, and Fabric
runs the code remotely for you on any number of hosts you give it.
Brilliant.&lt;/p&gt;
&lt;p&gt;Now, what could be better than these two technologies? These two
technologies &lt;em&gt;together&lt;/em&gt;, that&amp;#8217;s what. (See where I am going with this?)
And what could be better than joining these two technologies? Joining
them with &lt;em&gt;absolutely no effort required on your part whatsoever&lt;/em&gt;,
that&amp;#8217;s what.&lt;/p&gt;
&lt;p&gt;I have a long history of touting software that makes my job (and life)
easier, and Hostout fits right in with that tradition. I&amp;#8217;m just sorry it
took me this long to try it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;hostout&quot;&gt;
&lt;h2&gt;Hostout&lt;/h2&gt;
&lt;p&gt;As compelling as it is to write &amp;#8220;pure Python&amp;#8221; in fab files, and it is,
sometimes you just want to be done. And Hostout helps you get there. I
will explain in a minute, but first a slight detour.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;back-story&quot;&gt;
&lt;h3&gt;Back story&lt;/h3&gt;
&lt;p&gt;I recently blogged about the relaunch of this website &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2011/01/19/new-website-for-2011/&quot;&gt;here&lt;/a&gt;. Shortly
after the launch, I realized I needed a quick and easy way to deploy my
staging site to production. I pitched the idea of a utility called
&amp;#8220;mr.pusher&amp;#8221; to accomplish this task to Dylan, with the caveat that I was
interested in making it work with Hostout.&lt;/p&gt;
&lt;p&gt;As it turns out, between Hostout and a recipe I created years ago called
&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recipe.rsync&quot;&gt;collective.recipe.rsync&lt;/a&gt;, &amp;#8220;mr.pusher&amp;#8221; almost already existed. Now back
to the story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;fabric-integration-made-easy&quot;&gt;
&lt;h3&gt;Fabric integration made easy&lt;/h3&gt;
&lt;p&gt;Since I knew I wanted to be able to execute a &amp;#8220;push&amp;#8221; command remotely, I
figured I would finally get acclimated with Hostout.&lt;/p&gt;
&lt;p&gt;After a small wrestling match in my head with the docs, I came up with
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website/blob/master/buildout.cfg#L64&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Hostout makes Fabric integration easy
[staging]
recipe = collective.hostout
host = aclark.net
path = /srv/staging[production]
recipe = collective.hostout
host = aclark.net
path = /srv/aclark_net_website
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At this point (after running buildout) I was able to perform such great
feats of remote administration (on my already-deployed-sans-hostout
sites) as:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/hostout staging run git pull
$ bin/hostout staging run bin/buildout -c staging.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Armed with this ability, I added the following to my &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website/blob/master/staging.cfg&quot;&gt;staging.cfg:&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Create scripts to deploy staging data to production.
# Be VERY careful with this. You could easily overwrite your
# live production data if you either forget to use the script
# option, or accidentally run the bin/rsync-filestorage-to-production
# script without stopping the production site first.
[filestorage-to-production]
recipe = collective.recipe.rsync
source = var/filestorage/Data.fs
target = ../aclark_net_website/var/filestorage/Data.fs
script = true[blobstorage-to-production]
recipe = collective.recipe.rsync
source = var/blobstorage/
target = ../aclark_net_website/var/blobstorage/
script = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The result was two scripts I could use to &amp;#8220;push&amp;#8221; staging to production,
but only after stopping the production site first:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/hostout production run bin/supervisorctl shutdown
$ bin/hostout staging run bin/rsync-filestorage-to-production
$ bin/hostout staging run bin/rsync-blobstorage-to-production
$ bin/hostout production run bin/supervisord
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And we&amp;#8217;re deployed! This technique is particularly elegant when used in
combination with a&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/aclark_net_website/blob/master/apache.conf&quot;&gt;custom 503&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I really like this setup, and I really appreciate what Hostout gets me
&amp;#8220;for free&amp;#8221;; I didn&amp;#8217;t have to create a fabfile.py, I just configured my
staging and production host parameters in buildout.cfg and off I went.&lt;/p&gt;
&lt;p&gt;Of course, there is always room for improvement. The next most logical
step for me would be to add cloud integration. If I could provision a
new Rackspace cloud server via buildout, and then host-it-out, I think
the future will have arrived. And since that is exactly what
&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/hostout.cloud&quot;&gt;hostout.cloud&lt;/a&gt; appears to do, welcome to the future!&lt;/p&gt;
&lt;p&gt;Alex Clark (January 2011)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Did you enjoy reading this article? Please consider `helping me help
Plone in February 2011`_.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">A Report On Plonetheme.*</title>
    <id>http://blog.aclark.net/2010/11/04/a-report-on-plonetheme/</id>
    <updated>2010-11-04T00:00:00Z</updated>
    <published>2010-11-04T00:00:00Z</published>
    <link href="http://blog.aclark.net/2010/11/04/a-report-on-plonetheme/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;a-report-on-plonetheme&quot;&gt;

&lt;p&gt;&lt;strong&gt;Plone Theme Buildout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By now, most of us are familiar with XDV and how awesome it is for theming Plone (or any website). You should also be aware that XDV has been renamed to &lt;strong&gt;Diazo&lt;/strong&gt;, and collective.xdv is now called &lt;strong&gt;plone.app.theming&lt;/strong&gt;. But let us not forget the humble &amp;#8220;old style&amp;#8221; theme just yet! Sometimes they come in very handy, and may even be preferable in some cases depending on what you are trying to accomplish. I just gave &lt;strong&gt;plonetheme&lt;/strong&gt;.* a quick spin and thought I&amp;#8217;d share the process and results with anyone that might find it useful.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;step-1&quot;&gt;
&lt;h2&gt;Step 1&lt;/h2&gt;
&lt;p&gt;Get a list of all the &lt;strong&gt;plonetheme&lt;/strong&gt; packages on PyPI:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip search plonetheme
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-2&quot;&gt;
&lt;h2&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Create a buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv plone-theme-test
$ bin/easy_install zc.buildout
$ bin/buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-3&quot;&gt;
&lt;h2&gt;Step 3&lt;/h2&gt;
&lt;p&gt;Edit your buildout.cfg to include the following:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = http://dist.aclark.net/buildout/plone/4.0.x/buildout.cfg
parts =
 plone[plone]
eggs +=
 ${theme:eggs}zcml +=
 ${theme:eggs}[theme]
eggs =# Deps that the themes should have added
 collective.contentleadimage
 collective.flowplayer
 z3c.jbot#    Products.categorynavigator
#
# XXX Products.categorynavigator is a dep of plonetheme.mvob but it
# has a NameError
# ZopeXMLConfigurationError: File &amp;quot;/Users/aclark/Developer/packages…
# NameError: name &amp;#39;ImportException&amp;#39; is not defined# themes
 plonetheme.notredame
 plonetheme.fui
 plonetheme.sunburst
 plonetheme.colorcontext
 plonetheme.twinapex
#    plonetheme.mvob
 plonetheme.peerstheme
 plonetheme.nautica05
 plonetheme.stylized
 plonetheme.labs
 plonetheme.sait2009
 plonetheme.cultureCab
 plonetheme.xtheme
 plonetheme.mimbo
 plonetheme.python
 plonetheme.terrafirma
 plonetheme.solemnity
 plonetheme.level2
 plonetheme.tidyblog
 plonetheme.andreas01
 plonetheme.blueblog
 plonetheme.delicious2
#    plonetheme.hamnavoe
 plonetheme.greencommunity
 plonetheme.subordinate
 plonetheme.bluegray
 plonetheme.p2
 plonetheme.aclark_twitter
 plonetheme.relic
 plonetheme.classic
#    plonetheme.simplicity
 plonetheme.netsightintranet
 plonetheme.keepitsimple
 plonetheme.andreas02
 plonetheme.essay
 plonetheme.ReOrg
#    plonetheme.Bangalore
 plonetheme.nonzero
 plonetheme.cleantheme
 plonetheme.minimalist
 plonetheme.inbusiness
#    plonetheme.corporatemale
 plonetheme.portaltwodotoh
 plonetheme.rcom
 plonetheme.equipoteih
 plonetheme.pyar
 plonetheme.basic# XXX plonetheme.GreenEarthTheme3_0 has zope.configuration.config…
# error
#    plonetheme.GreenEarthTheme3_0
#zope.configuration.config.ConfigurationExecutionError: &amp;lt;type …
#  in:
#  File &amp;quot;/Users/aclark/Developer/packages/plonetheme.GreenEarthTheme…
#     &amp;lt;cmf:registerDirectory
#         name=&amp;quot;GreenEarthTheme3_0_templates&amp;quot;/&amp;gt; plonetheme.criticas
 plonetheme.gemstone
#    plonetheme.bronzecube
 plonetheme.lithium
 plonetheme.overlappedtabs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-4&quot;&gt;
&lt;h2&gt;Step 4&lt;/h2&gt;
&lt;p&gt;Run buildout; start Plone; play around!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The whole effort (including writing the blog post) took only an hour or two, for whatever that is worth (not including the actual theme review, unfortunately!). I find the results interesting and I thought you might too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;process&quot;&gt;
&lt;h2&gt;Process&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;dependencies&quot;&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;You&amp;#8217;ll notice in the &lt;strong&gt;[theme]&lt;/strong&gt; section, comments about various packages that were not included with all of the various themes.&lt;/p&gt;
&lt;p&gt;As far as I can tell, it is in the best interest of &amp;#8220;old style&amp;#8221; theme developers to specify these packages in their setup.py files with the install_requires parameter!&lt;/p&gt;
&lt;p&gt;OK, it&amp;#8217;s actually in my best interest because then I have to do less work, but you get the idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;broken-or-missing-packages&quot;&gt;
&lt;h3&gt;Broken or missing packages&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;plonetheme&lt;/strong&gt;.* packages that are just commented out (without an XXX note) did not make it past the bin/buildout step (for whatever reason, usually a broken package).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;themes&quot;&gt;
&lt;h2&gt;Themes&lt;/h2&gt;
&lt;p&gt;My favorite theme (right after plonetheme.aclark_twitter, that is) is… nevermind! I wanted to report on that but I still have to go through all the themes! (By installing each one at a time, testing, then uninstalling before moving to the next one.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;packaging&quot;&gt;
&lt;h2&gt;Packaging&lt;/h2&gt;
&lt;p&gt;Just my opinion, but if you are adding functionality to Plone, it&amp;#8217;s probably not (just) a theme. So I would separate that functionality from your &lt;strong&gt;plonetheme&lt;/strong&gt;.* code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;problems&quot;&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;jbot-modifies-default-plone-theme&quot;&gt;
&lt;h3&gt;jbot modifies default Plone theme?&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve noticed this before in both Plone Classic and now Sunburst when jbot is installed. No idea what the actual cause is:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;disclaimer&quot;&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;designed-for-plone-4&quot;&gt;
&lt;h3&gt;Designed for Plone 4?&lt;/h3&gt;
&lt;p&gt;Before you say it (I know you are thinking it), I know not all of these themes are designed to work with Plone 4. I dont&amp;#8217; have a good answer about how to approach that problem (I just know that when looking for themes, I don&amp;#8217;t really care. I just &amp;#8220;want it to work&amp;#8221;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bug-report-please&quot;&gt;
&lt;h3&gt;Bug report please?&lt;/h3&gt;
&lt;p&gt;I know, I know. I should open a ticket for the jbot thing.&lt;/p&gt;
&lt;p&gt;And now off to play!&lt;/p&gt;
&lt;p&gt;P.S. I will report on the install process in the comments.&lt;/p&gt;
&lt;p&gt;So far, &lt;em&gt;Andreas&lt;/em&gt; installed, worked, and looked nice while &lt;em&gt;Bluegray Theme 1.0.0b2&lt;/em&gt; required a ZMI undo ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">The Apache Modules For XDV</title>
    <id>http://blog.aclark.net/2010/07/12/the-apache-modules-for-xdv/</id>
    <updated>2010-07-12T00:00:00Z</updated>
    <published>2010-07-12T00:00:00Z</published>
    <link href="http://blog.aclark.net/2010/07/12/the-apache-modules-for-xdv/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;the-apache-modules-for-xdv&quot;&gt;

&lt;p&gt;&lt;strong&gt;Apache Buildout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was recently tasked with consolidating our various &lt;strong&gt;business services&lt;/strong&gt; (website, software repository, mailing lists, ldap, etc.) on to a single virtual machine (ostensibly to save money, although it didn&amp;#8217;t quite work out that way). The Apache modules for XDV presented themselves as an attractive technique to use, in helping me achieve my goals.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;background&quot;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Previously, I had been blissfully running &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;http://aclark.net&lt;/a&gt; with NGINX, Plone 4 trunk, and XDV on a small virtual machine and absolutely loving it.&lt;/p&gt;
&lt;p&gt;Additionally, I had separate virtual machines for my Wordpress blog (blog.aclark.net) and Subversion software repository (svn.aclark.net).  The isolation of these services made them easy to manage and still relatively cheap to run them all.&lt;/p&gt;
&lt;p&gt;And in fact, I have come to rely heavily on the ability to (1.) rapidly create a virtual machine, (2.) install a bunch of vendor packages that Just Work™, and (3.) build out whatever was left i.e. whatever could not be easily installed via OS vendor packages. This usually translates loosely into &amp;#8220;I use Buildout for my Plone sites, and an OS vendor package installer for everything else&amp;#8221;.&lt;/p&gt;
&lt;p&gt;That said, even though I already knew the hazards of trying to cram too many services on to a single &amp;#8220;shared&amp;#8221; host, and didn&amp;#8217;t really want to do that dance again, it seemed reasonable at the time to at least try and consolidate them on to a single virtual machine (it sounds crazy in hindsight).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;first-choice-nginx&quot;&gt;
&lt;h3&gt;First choice: NGINX&lt;/h3&gt;
&lt;p&gt;Like I said earlier, the forked version of NGINX available on the &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/html-xslt/&quot;&gt;HTML-XSLT website&lt;/a&gt; is an absolute pleasure to use. But when I pondered consolidating services I knew it would not be easy, and maybe even impossible to run Wordpress behind NGINX.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;second-choice-apache&quot;&gt;
&lt;h3&gt;Second choice: Apache&lt;/h3&gt;
&lt;p&gt;So I thought to myself, &amp;#8220;I know, I&amp;#8217;ll just switch to the Apache modules for XDV&amp;#8221; and that will solve my PHP/Plone &amp;#8220;integration&amp;#8221; problems for the time being. (Another way to solve them would be to use the &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/dv.xdvserver&quot;&gt;XDV middleware&lt;/a&gt; along with &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Zope2/2.13.0a1&quot;&gt;Zope 2.13&lt;/a&gt;&amp;#8216;s WSGI support; I will be trying that next.)&lt;/p&gt;
&lt;p&gt;But not so fast.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;problems&quot;&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;Of course, things don&amp;#8217;t always go as planned.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;first-problem&quot;&gt;
&lt;h3&gt;First problem&lt;/h3&gt;
&lt;p&gt;The Apache modules for XDV do not work exactly &amp;#8220;as advertised&amp;#8221; on any of the &amp;#8220;modern&amp;#8221; OS platforms I tried (Debian, various Ubuntus, and Arch Linux). They compile fine against the operating system&amp;#8217;s Apache, but do not run properly. See &lt;a class=&quot;reference external&quot; href=&quot;http://www.coactivate.org/projects/deliverance/lists/deliverance-discussion/archive/2010/06/1276982495896/forum_view&quot;&gt;this thread&lt;/a&gt; on the Deliverance mailing list (and I challenge anyone reading this to correct me! :-D)&lt;/p&gt;
&lt;p&gt;&amp;#8220;Fine,&amp;#8221; I thought, I&amp;#8217;ll just create a buildout to deploy everything. I &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2010/03/30/blood-sweat-tears-and-a-new-plone-book/&quot;&gt;wrote a book&lt;/a&gt; about deploying Plone websites with Buildout. This should be easy, right?&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;second-problem&quot;&gt;
&lt;h3&gt;Second problem&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s hard to create such a buildout for a variety of reasons, but most noticeably in my mind is the &amp;#8220;library soup&amp;#8221; you may encounter on any modern system. For example, I started off by trying to include all the dependencies in the buildout. But I ended up leaving things out, like libxml2 and libxslt relying instead on the operating system vendor packages. Because even though I tried desperately to tell every other dependency about the included libxml2 and libxslt2, I still ended up with an annoying &amp;#8220;missing symbols&amp;#8221; error at the end (meaning I likely missed a compiler flag along the way).&lt;/p&gt;
&lt;p&gt;These errors can be very frustrating, and even worse: &lt;strong&gt;sporadic&lt;/strong&gt;.  Sometimes you may inadvertently add or remove a system dependency during the build process. So you could be relying on a system package and not even know it until later when it is too late (i.e. when you are enjoying some unplanned and unexpected down time).&lt;/p&gt;
&lt;p&gt;So there I went again. It took several days I didn&amp;#8217;t really have, and the results were not what I expected, but I&amp;#8217;m still somewhat happy with them. Now, I want to share this buildout particularly with folks considering using the Apache modules for XDV (&lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/html-xslt/&quot;&gt;http://code.google.com/p/html-xslt/&lt;/a&gt;). Because while it would be much easier if the Apache modules Just Worked™ with OS vendor packages, in the event that they don&amp;#8217;t (which is what I experienced) folks may find this buildout helpful. (That, and Jon Stahl requested it on Facebook :-D).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Anyway, I&amp;#8217;m quite happy with the buildout and I am sharing it in hopes that it will move the Apache/XDV story forward.&lt;/p&gt;
&lt;p&gt;In addition to compiling Apache with mod_depends and mod_transform, it includes Subversion, Trac, mod_wsgi, PHP and Wordpress. As I mentioned earlier, it is not really my preference to cram all this stuff in to one buildout, but as long as it is reliable and consistent, I don&amp;#8217;t mind it too much. It also handles the theme compilation for a variety of services, which is accomplished via a command recipe that executes calls to &lt;em&gt;bin/xdvcompiler&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Incidentally, I have no particular allegiance to, or dislike of Apache: more like a love/hate relationship; it can be very useful in a variety of situations, while at the same time confounding. But regardless, I would like to see the Apache XDV modules be able to deliver the same rock solid performance as the NGINX fork.&lt;/p&gt;
&lt;p&gt;Kudos to Laurence Rowe (et al.) for the Apache modules! I hope this blog entry will facilitate a push to get people using them with their &lt;em&gt;operating system vendor&amp;#8217;s Apache packages&lt;/em&gt;, which may inspire Laurence to continue developing them, and most importantly to fix bugs ;-).&lt;/p&gt;
&lt;p&gt;Normally, I like to factor out the reusable bits first, but this buildout is presented in it&amp;#8217;s entirety as I am using it (minus some customer bits), for whatever that is worth. Here is a look at the &amp;#8220;main&amp;#8221; buildout.cfg file, most of which should be self-explanatory. Click around this site to see the results:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
#extends = http://svn.aclark.net/svn/public/buildout/apache/trunk/buildout.cfg
extends = apache.cfg
parts =
 bootstrap
 xdv
 apache
 apreq2
 apache-config
 apache-config-aclark
 apache-config-admin
 apache-config-svn
 apache-config-trac
 apache-config-ssl
 apache-config-mailman
 php
 php-conf
 mod-depends
 mod-transform
 python
 distribute
 trac
 theme-aclark
 theme-public
 theme-support
 theme-blog
 mod-wsgi
 subversion
 subversion-python
 supervisor[apache]
configure-options +=
 --with-included-apr
 --with-ldap
 --enable-authnz-ldap
 --enable-ldap
 --enable-ssl
 --enable-dav
 --enable-dav-fs
 --enable-dav-lock[mod-depends]
recipe = hexagonit.recipe.cmmi
url = http://html-xslt.googlecode.com/files/mod-depends-html-xslt.tgz
configure-options = --with-apxs=${apache:location}/bin/apxs[mod-transform]
recipe = hexagonit.recipe.cmmi
url = http://html-xslt.googlecode.com/files/mod-transform-html-xslt.tgz
configure-options =
 --with-apxs=${apache:location}/bin/apxs
 --with-apr=${apache:location}/bin/apr-1-config
 --with-apr-util=${apache:location}/bin/apu-1-config
environment-section = environment[environment]
PATH = %(PATH)s:${apreq2:location}/bin
LIBS = -lxml2 -lxslt[apreq2]
recipe = hexagonit.recipe.cmmi
url = http://www.bizdirusa.com/mirrors/apache/httpd/libapreq/libapreq2-2.12.tar.gz
configure-options = --with-apache2-apxs=${apache:location}/bin/apxs[libxml2]
recipe = hexagonit.recipe.cmmi
url = ftp://xmlsoft.org/libxml2/libxml2-2.7.7.tar.gz
configure-options =
 --with-python=no[libxslt]
recipe = hexagonit.recipe.cmmi
url = ftp://xmlsoft.org/libxml2/libxslt-1.1.26.tar.gz
configure-options =
 --with-python=no[php]
recipe = hexagonit.recipe.cmmi
url = http://us2.php.net/get/php-5.3.2.tar.gz/from/this/mirror
configure-options = --prefix=${buildout:directory}/parts/apache/php
--with-apxs2=${buildout:directory}/parts/apache/bin/apxs
--with-config-file-path=${buildout:directory}/etc/php.ini
--enable-mbstring --with-mysql=/usr/bin[php-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/php.ini.in
output = ${buildout:directory}/etc/php.ini[apache-config-aclark]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/aclark.in
output = ${buildout:directory}/etc/aclark[apache-config-admin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/admin.in
output = ${buildout:directory}/etc/admin[apache-config-svn]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/svn.in
output = ${buildout:directory}/etc/svn[apache-config-trac]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/trac.in
output = ${buildout:directory}/etc/trac[apache-config-ssl]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/ssl.in
output = ${buildout:directory}/etc/ssl[apache-config-mailman]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mailman.in
output = ${buildout:directory}/etc/mailman[ports]
production = 80[subversion]
recipe = hexagonit.recipe.cmmi
url = http://subversion.tigris.org/downloads/subversion-1.6.12.tar.gz
configure-options = --with-apxs=${apache:location}/bin/apxs
make-targets =
 install
 swig-py
 install-swig-py[mod-wsgi]
recipe = hexagonit.recipe.cmmi
url = http://modwsgi.googlecode.com/files/mod_wsgi-3.2.tar.gz
configure-options =
 --with-apxs=${apache:location}/bin/apxs
 --with-python=${buildout:directory}/parts/python/bin/python[subversion-python]
recipe = plone.recipe.command
libdir = ${python:location}/lib/python2.6/site-packages
command =
 rm -rf ${subversion-python:libdir}/svn
 rm -rf ${subversion-python:libdir}/libsvn
 cp -prv ${subversion:location}/lib/svn-python/libsvn ${subversion-python:libdir}
 cp -prv ${subversion:location}/lib/svn-python/svn ${subversion-python:libdir}
update-command = ${subversion-python:command}[python]
recipe = hexagonit.recipe.cmmi
url = http://www.python.org/ftp/python/2.6.5/Python-2.6.5.tgz
configure-options = --enable-shared[python-exe]
executable = ${buildout:directory}/parts/python/bin/python[distribute]
recipe = plone.recipe.command
command =
 wget http://python-distribute.org/distribute_setup.py
 ${python-exe:executable} distribute_setup.py[xdv]
recipe = zc.recipe.egg[trac]
recipe = plone.recipe.command
command =
 ${buildout:directory}/parts/python/bin/easy_install Trac
 ${buildout:directory}/parts/python/bin/easy_install TracSubversionLocation[theme-public]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/trac/public/theme/rules.xml
 /srv/trac/public/theme/index.html
 --output=${buildout:directory}/etc/trac-public.xsl
update-command = ${:command}[theme-support]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/trac/support/theme/rules.xml
 /srv/trac/support/theme/index.html
 --output=${buildout:directory}/etc/trac-support.xsl
update-command = ${:command}[theme-aclark]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/aclark/theme/rules.xml
 /srv/aclark/theme/index.html
 --output=${buildout:directory}/etc/theme-aclark.xsl
update-command = ${:command}[theme-blog]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/blog/theme/rules.xml
 /srv/blog/theme/index.html
 --output=${buildout:directory}/etc/theme-blog.xsl
update-command = ${:command}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can check out the rest of the buildout &lt;a class=&quot;reference external&quot; href=&quot;http://svn.aclark.net/trac/public/browser/buildout/aclark/apache-xdv/trunk&quot;&gt;here&lt;/a&gt; (themed with XDV). And if you enjoy this post, please feel free to pick up a copy of &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;Plone 3.3 Site Administration&lt;/a&gt; from PACKT Publishing, due out any day now (I am expecting to review pre-finals this week some time).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Blood, Sweat, Tears and a New Plone Book</title>
    <id>http://blog.aclark.net/2010/03/30/blood-sweat-tears-and-a-new-plone-book/</id>
    <updated>2010-03-30T00:00:00Z</updated>
    <published>2010-03-30T00:00:00Z</published>
    <link href="http://blog.aclark.net/2010/03/30/blood-sweat-tears-and-a-new-plone-book/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;blood-sweat-tears-and-a-new-plone-book&quot;&gt;

&lt;p&gt;&lt;strong&gt;Plone 3.3 Site Administration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, no blood yet. But certainly sweat and tears. If &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/events/conferences/seattle-2006&quot;&gt;Plone Conference 2006&lt;/a&gt; was my inspiration for &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/2008&quot;&gt;Plone Conference 2008&lt;/a&gt;, then &lt;a class=&quot;reference external&quot; href=&quot;https://www.packtpub.com/Professional-Plone-web-applications-CMS/book&quot;&gt;Professional Plone Development&lt;/a&gt; was my inspiration for this book: &lt;a class=&quot;reference external&quot; href=&quot;https://www.packtpub.com/plone-3-3-site-administration/book&quot;&gt;Plone 3.3 Site Administration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the past 14 months or so, I have been writing a book aimed at end users of Plone; folks that have little knowledge of how to do much more than add content. It is intended to make them feel more comfortable performing various site administrator tasks. Topics like theming, maintenance, and optimization are covered.&lt;/p&gt;
&lt;p&gt;But wait, there&amp;#8217;s more!&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id1&quot;&gt;
&lt;h2&gt;#1&lt;/h2&gt;
&lt;p&gt;This book aims to &amp;#8220;lower the Plone bar for users of Python&amp;#8221;. What do I mean by that? Basically this: I love Python almost as much as I love Plone. It lets me translate my thoughts directly into code. I fantasize that with little more than a Python interpreter, one can forge a working Plone site within minutes. But it is not just a fantasy, it is (more or less) the status quo. (Maybe even &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/MacGyver&quot;&gt;MacGyver&lt;/a&gt; used Python?)&lt;/p&gt;
&lt;p&gt;So, this book begins at the beginning: by making sure folks are comfortable installing and using Python on there operating system of choice (or using the pre-installed Python). If you read &lt;em&gt;Professional Plone Development&lt;/em&gt;, you may recall Martin Aspeli saying at the beginning of Chapter 3:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;We will assume that Python 2.4 gets invoked when you run python on the command line.&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This book does not make that assumption and tries to cover everything you may need to know after installing your operating system up to that point.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Chapter 1&lt;/strong&gt;, we cover installing and running Python on three popular operating systems: Mac OS X 10.6 (my main squeeze), Windows 7, and Ubuntu 9.10 (Debian is my main production server squeeze). Other operating systems are welcome; your mileage may vary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;#2&lt;/h2&gt;
&lt;p&gt;This book is largely a response to the whole &amp;#8220;Oh no! I have to use Buildout to install Plone and its add-ons!&amp;#8221; sentiment that has been prevalent since Buildout was first introduced to Plone several years ago. I don&amp;#8217;t know if Buildout was the &amp;#8220;right&amp;#8221; way to go, but I do know that I love using it and I would like to help others feel the same way.&lt;/p&gt;
&lt;p&gt;The bottom line is this: Plone made a conscious decision to &amp;#8220;become more Pythonic&amp;#8221; by using eggs. With that choice came more complexity from potential conflicts between eggs. Buildout is one solution to that problem. Unfortunately, it introduces other problems like cryptic error messages and a certain &lt;strong&gt;too-many-moving-parts&lt;/strong&gt;-ness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;an-aside&quot;&gt;
&lt;h2&gt;An aside…&lt;/h2&gt;
&lt;p&gt;Let me correct myself: I am fairly certain Buildout was the right way to go at the time. What I am not sure about is where to go from here. It would be nice to get back to a place where folks could just drop packages in to a directory (I don&amp;#8217;t literally mean going back to old-style products, but perhaps we could provide that type of functionality again somehow). But I don&amp;#8217;t have an answer for that. In the meantime, let&amp;#8217;s make everyone more comfortable with using Buildout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;about-the-rest-of-the-book&quot;&gt;
&lt;h2&gt;About the rest of the book…&lt;/h2&gt;
&lt;p&gt;The book teaches you to find your way around Buildout and Plone. Whether you choose to follow along and build your site from scratch using only Buildout (and a paper clip) or if you use one of the Buildout-based installers (like the Unified Installer), this book aims to make you more competent and comfortable performing a variety of Buildout-related tasks.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Chapters 2-7&lt;/strong&gt;, we present various buildout configuration files that correspond to specific tasks that are related to various subjects, e.g. theming, maintenance, and optimization. The reader is expected to &amp;#8220;know how to write a buildout.cfg file&amp;#8221; by the end. No one that reads the book is allowed in the #plone IRC channel afterward to ask about buildout (you can answer buildout questions though). Kidding… I kid…&lt;/p&gt;
&lt;p&gt;In the final &lt;strong&gt;Chapter 8&lt;/strong&gt;, we cover new technologies like XDV and repoze.zope2 which may become more mainstream once you decide to start using them (although the latter seems more like a toy to keep us busy until the real fix arrives: &lt;a class=&quot;reference external&quot; href=&quot;http://article.gmane.org/gmane.comp.web.zope.plone.devel/23887&quot;&gt;full WSGI support in Zope 2&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;when-will-it-arrive&quot;&gt;
&lt;h2&gt;When will it arrive?&lt;/h2&gt;
&lt;p&gt;PACKT originally announced the book will arrive in March and I have been working non-stop since mid-March to make sure it gets out the door as quickly as possible; I expect it to be available &lt;strong&gt;Real Soon Now™&lt;/strong&gt;. I apologize to those of you who have pre-ordered and are now waiting for it!&lt;/p&gt;
&lt;p&gt;So get ready! I plan to have over 200 pages of draft material submitted by the end of this month. I will continue to work with PACKT to address any concerns that arise during editing. They have promised to try to ship the book by May, so we will see how it goes. I encourage you to &lt;a class=&quot;reference external&quot; href=&quot;https://www.packtpub.com/plone-3-3-site-administration/book&quot;&gt;pre-order now&lt;/a&gt; as that will&amp;nbsp;go a long way to inspire them to work just that much harder to get it done and out to you, ASAP!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;can-i-write-a-book&quot;&gt;
&lt;h2&gt;Can I write a book?&lt;/h2&gt;
&lt;p&gt;Probably. For those curious about the process (as I very much was), here is a bit about how it went for me:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;A few years ago, Martin Aspeli had the idea for Practical Plone 3 and put out a call to writers that I responded to; I ended up contributing 2 chapters. This taught me that it was indeed a lot of work, and I got exposed to the editing process.&lt;/li&gt;
&lt;li&gt;A couple years ago, PACKT approached me (and several others) about the idea for Plone Site Administration and I thought I had a good story to tell based on my experiences, so I wrote a detailed outline and they accepted it.&lt;/li&gt;
&lt;li&gt;Though I had written for Practical Plone 3, I struggled to find my voice. At the same time I had a tremendous amount of consulting work to do to make a living. I sneaked in time to write drafts and eventually found my voice. To be honest, the most productive work has been done in the last 3 months.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Perhaps the biggest lesson I learned was this: stop thinking and start writing. I tend to over analyze things and spent a lot of time thinking about &amp;#8220;how it would go&amp;#8221; rather than just writing it. Writing is the key.  Think less, write more (at which point your thoughts tends to flow more naturally anyway).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;should-i-write-a-book&quot;&gt;
&lt;h2&gt;Should I write a book?&lt;/h2&gt;
&lt;p&gt;Possibly. I am sensitive to the phenomenon of &amp;#8220;Plone book diarrhea&amp;#8221; and I do think that there can be such a thing as too many Plone books. But I don&amp;#8217;t think we are there yet. To me, the more books published about Plone (by PACKT or any publisher) the better. I like to see what each individual author brings to the story, even if the stories they are telling tend to overlap sometimes. So for me the answer to that question both before and after writing my book is &lt;strong&gt;yes&lt;/strong&gt;. I know I am a better writer having written it, and I certainly know more about Python, Zope, and Plone and many other technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;in-either-case-you-should-definitely-take-my-class&quot;&gt;
&lt;h2&gt;In either case, you should definitely take my class.&lt;/h2&gt;
&lt;p&gt;If you are interested in learning more about Python and tools like Distribute, Pip, Buildout, etc. and you want to feel more comfortable managing your Plone site, you will not want to miss the &lt;a class=&quot;reference external&quot; href=&quot;http://plone-site-admin.eventbrite.com&quot;&gt;one day class I am teaching at Plone Symposium East 2010&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The book will hopefully be out by then, but the class will go on either way.&lt;/p&gt;
&lt;p&gt;Hope to see you there, and I hope you enjoy the book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;p-s-looking-for-plone-experts-hire-aclark-net-llc&quot;&gt;
&lt;h2&gt;P.S. Looking for Plone experts? Hire ACLARK.NET, LLC.&lt;/h2&gt;
&lt;p&gt;Thank you, everyone, for the responses to &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/?p=170&quot;&gt;my previous blog entry&lt;/a&gt;. I have had some great conversations with some very interesting folks and I appreciate everyone&amp;#8217;s interest. However, I wanted to encourage everyone once more to &lt;a class=&quot;reference external&quot; href=&quot;mailto:aclark&amp;#37;&amp;#52;&amp;#48;aclark&amp;#46;net?subject=&amp;quot;Hire%20Alex%20Clark&amp;quot;&quot;&gt;get in touch&lt;span&gt;&amp;#46;&lt;/span&gt;&lt;/a&gt; And also, to feel free to reach whenever you come across this blog entry and are in need of Plone help. We are always looking for a challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Using Buildout To Deploy a Plone 2.1 Site To The Cloud</title>
    <id>http://blog.aclark.net/2010/03/15/using-buildout-to-deploy-a-plone-2-1-site-to-the-cloud/</id>
    <updated>2010-03-15T00:00:00Z</updated>
    <published>2010-03-15T00:00:00Z</published>
    <link href="http://blog.aclark.net/2010/03/15/using-buildout-to-deploy-a-plone-2-1-site-to-the-cloud/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;using-buildout-to-deploy-a-plone-2-1-site-to-the-cloud&quot;&gt;

&lt;p&gt;&lt;strong&gt;Plone 2.1 Buildout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Believe it or not, there are still Plone 2.1 sites in production. (And 1.0 sites too, for that matter. Just look for the tell-tale &amp;#8216;/help&amp;#8217; sign, e.g. &lt;a class=&quot;reference external&quot; href=&quot;http://www.zope.org/help&quot;&gt;http://www.zope.org/help&lt;/a&gt;, if you suspect Plone 1).&lt;/p&gt;
&lt;p&gt;I know, because I just &lt;a class=&quot;reference external&quot; href=&quot;http://harryroseman.com&quot;&gt;deployed one&lt;/a&gt; (a cool artist&amp;#8217;s site if you have a couple hours to kill…). But I didn&amp;#8217;t do it the &amp;#8220;old way&amp;#8221; with Zope 2 instances created by hand on clunky physical servers, I used &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/zc.buildout&quot;&gt;Buildout&lt;/a&gt; and the &lt;a class=&quot;reference external&quot; href=&quot;http://rackspacecloud.com&quot;&gt;Cloud&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;aside-1&quot;&gt;
&lt;h2&gt;Aside #1&lt;/h2&gt;
&lt;p&gt;As an aside: it was really bothering me lately that you couldn&amp;#8217;t (easily) find older Plone releases at &lt;a class=&quot;reference external&quot; href=&quot;http://sourceforge.net/projects/plone/&quot;&gt;SourceForge&lt;/a&gt;. This is by design to avoid confusion, but still confusing. So when I needed the most recent 2.1.x tarball I decided to scratch my itch and fix the &amp;#8220;problem&amp;#8221;.  I started gathering the &lt;a class=&quot;reference external&quot; href=&quot;http://downloads.sourceforge.net/project/plone/OldFiles/Plone-2.1.4.tar.gz&quot;&gt;hard to find&lt;/a&gt; releases and putting them &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/archive/&quot;&gt;here&lt;/a&gt;. OK… so I only gathered one release (2.1.4), but I swear I had good intentions. If you&amp;#8217;d like to see any additional releases &amp;#8220;moved&amp;#8221; to dist.plone.org, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;aside-2&quot;&gt;
&lt;h2&gt;Aside #2&lt;/h2&gt;
&lt;p&gt;Another aside: I should mention here the advent of a tool that promises to simplify deployment of Python-based web applications to the cloud (or supported service, which technically does not have to be &amp;#8220;cloud-based&amp;#8221;) via the use of APIs (in particular, the &lt;a class=&quot;reference external&quot; href=&quot;http://rackspacecloud.com&quot;&gt;Rackspace Cloud&lt;/a&gt; API, which is the only one supported so far): &lt;a class=&quot;reference external&quot; href=&quot;http://cloudsilverlining.org&quot;&gt;Silver Lining&lt;/a&gt;! The idea of using this tool got me so excited, I spent some time experimenting with setting up a new host with it (and purchasing their service). But when I realized it was not quite ready for production (i.e. &amp;#8220;&lt;a class=&quot;reference external&quot; href=&quot;http://cloudsilverlining.org/#who-should-use-silver-lining&quot;&gt;if you want to use Silver Lining, Silver Lining is not for you&lt;/a&gt;&amp;#8221;), I ended up using the Rackspace Cloud &lt;strong&gt;web interface&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I was so impressed with it.&lt;/p&gt;
&lt;p&gt;I literally moved all of my (granted, relatively small number of client sites) to their service within a matter of 1-2 months. Now, I know what you are thinking, and I do intend to explore other services (in fact, I have tried &lt;a class=&quot;reference external&quot; href=&quot;http://www.slicehost.com/&quot;&gt;Slicehost&lt;/a&gt; and it was OK), but this service made my life so much easier I wanted to mention some of its key features:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&amp;#8220;On the fly&amp;#8221; requisitioning. You can add/remove hosts anytime and you only pay for the time they are up.&lt;/li&gt;
&lt;li&gt;&amp;#8220;On the fly&amp;#8221; resizing of hosts. In my testing and real world experience, the resizing (e.g. move from a host with 256MB RAM and 10GB disk to 500MB RAM and 20GB disk) was painless (literally only cost a few minutes of downtime).&lt;/li&gt;
&lt;li&gt;The potential for all of this to be done remotely via a command line tool like Silver Lining.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;aside-3&quot;&gt;
&lt;h2&gt;Aside #3&lt;/h2&gt;
&lt;p&gt;A third and final aside: the status quo of WSGI support for Plone. Since &lt;a class=&quot;reference external&quot; href=&quot;http://cloudsilverlining.org/#the-application&quot;&gt;Zope 2 is not supported&lt;/a&gt; by Silver Lining, the key to deploying Plone sites with it is currently to use &lt;a class=&quot;reference external&quot; href=&quot;http://repoze.org/quickstart.html#repoze.zope2&quot;&gt;repoze.zope2&lt;/a&gt;. &lt;a class=&quot;reference external&quot; href=&quot;http://jazkarta.com&quot;&gt;Nate Aune&lt;/a&gt; has recently made some progress with this, and more work is scheduled for&lt;a class=&quot;reference external&quot; href=&quot;http://weblion.psu.edu/events/plone-symposium-east-2010&quot;&gt;Plone Symposium East&lt;/a&gt;. My latest swipe at WSGI-Plone is here: &lt;a class=&quot;reference external&quot; href=&quot;http://svn.aclark.net/svn/public/buildout/plone/branches/3.x-wsgi/&quot;&gt;http://svn.aclark.net/svn/public/buildout/plone/branches/3.x-wsgi/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-actual-point&quot;&gt;
&lt;h2&gt;The actual point&lt;/h2&gt;
&lt;p&gt;And finally, to the point of this blog entry! I have created a generic Plone 2.1 buildout for anyone interested. You can find it here:&lt;a class=&quot;reference external&quot; href=&quot;http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/&quot;&gt;http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/&lt;/a&gt;.  Using it is simple, as described in the &lt;a class=&quot;reference external&quot; href=&quot;http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/README.txt&quot;&gt;README.txt&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn export http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/ plone
$ cd plone
$ python2.4 bootstrap.py
$ bin/buildout
$ bin/instance fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Since Plone 2.1 community support has expired for this release, and since Plone 2.1 shipped with Python 2.3 (if I recall correctly), this is definitely &amp;#8220;unsupported use of Plone&amp;#8221;. But when you need it, you need it. I have yet to experience any issues related to the Python version, for whatever that is worth (possibly due to the fact that Plone 2.1 originally shipped with Python 2.3 and Zope 2.7, then Zope 2.8 came along which worked with Python 2.4. Just a guess).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">No, Really, You Can Just Use Buildout To Install Plone</title>
    <id>http://blog.aclark.net/2010/01/07/no-really-you-can-just-use-buildout-to-install-plone/</id>
    <updated>2010-01-07T00:00:00Z</updated>
    <published>2010-01-07T00:00:00Z</published>
    <link href="http://blog.aclark.net/2010/01/07/no-really-you-can-just-use-buildout-to-install-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;no-really-you-can-just-use-buildout-to-install-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a follow up to my &amp;#8216;Getting Excited about Plone as Eggs&amp;#8217; post.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a follow up to my &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2008/12/15/getting-excited-about-plone-as-eggs/&quot;&gt;Getting Excited about Plone as Eggs&lt;/a&gt; post.&lt;/p&gt;
&lt;p&gt;Generally speaking, the recommended and supported way to install Plone is via the installers, e.g. the &lt;a class=&quot;reference external&quot; href=&quot;http://launchpad.net/plone/3.3/3.3.3/+download/Plone-3.3.3-UnifiedInstaller.tgz&quot;&gt;Unified Installer&lt;/a&gt;. Obviously, if you want things to Just Work™ you should be using the latest stable release, which is why I linked to the 3.3.3 unified installer (although there is no Windows installer for 3.3.3 yet, which is why it&amp;#8217;s not released on plone.org).&lt;/p&gt;
&lt;p&gt;That said, since both Plone and Zope 2 have been packaged as eggs&amp;nbsp; (Plone became an egg in version 3.2 and Zope 2 became an egg as of Zope 2.12 which is the version of Zope 2 that Plone 4 will use) it has become &amp;#8220;mostly trivial&amp;#8221; to write a buildout.cfg to install Plone with. That means that you don&amp;#8217;t even need paster to do it. You can just fire up an editor and type:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
parts = instance

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    Plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Amazing!&lt;/p&gt;
&lt;p&gt;Of course there is the nasty bit about PIL, which I get around now-a-days by adding a very specific find-link, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
parts = instance
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What you should have at this point is a working Plone, but not necessarily a repeatable buildout. The reason being we have not pinned any egg versions yet, so we are effectively asking for whatever the latest version of Plone is on PyPI. Fun for playing, not fun for production. Fortunately the nice Plone people have created a bunch of version pins for us, so we just need to use them:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = http://dist.plone.org/release/4.0a3/versions.cfg
versions = versions
parts = instance
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are completely new to buildout and you are thinking to yourself right now &amp;#8220;what in the world is this guy talking about?&amp;#8221; then you will likely want to install buildout first so you can join in the fun. Fortunately, the nice Python people have made that easy with a package called &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/distribute&quot;&gt;Distribute&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following their instructions, you can do this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -O http://python-distribute.org/distribute_setup.py
$ python distribute_setup.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install zc.buildout
$ mkdir plone
$ cd plone
$ buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After which you will have a buildout.cfg file, and you can follow along with the above steps. Happy?&lt;/p&gt;
&lt;p&gt;The best part about all of this is that (on a fast internet connection) it should only be a matter of minutes before you are able to do this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/instance fg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and be staring at a thing of beauty.&lt;/p&gt;
&lt;p&gt;Of course, if you are running in the foreground (recommended for debugging) you should see something like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aclark@Alex-Clarks-MacBook-Pro:~/Developer/public-plone/ &amp;gt; bin/instance fg
/Users/aclark/Developer/public-plone/parts/instance/bin/runzope -X debug-mode=on
2010-01-07 12:07:56 INFO ZServer HTTP server started at Thu Jan  7 12:07:56 2010
 Hostname: 0.0.0.0
 Port: 8080
2010-01-07 12:08:14 INFO Zope Ready to handle requests
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you&amp;#8217;d like to get a little less noisy and skip debug mode but still run in the foreground, you can use April 2008&amp;#8217;s famous addition to plone.recipe.zope2instance:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aclark@Alex-Clarks-MacBook-Pro:~/Developer/public-plone/ &amp;gt; bin/instance console
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Sweet, blissful, silent running Plone.&lt;/p&gt;
&lt;p&gt;Happy Plone 4&amp;#8217;ing all!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Toronto Plone Add-ons Sprint #1 Report</title>
    <id>http://blog.aclark.net/2010/01/01/toronto-plone-add-ons-sprint-1-report/</id>
    <updated>2010-01-01T00:00:00Z</updated>
    <published>2010-01-01T00:00:00Z</published>
    <link href="http://blog.aclark.net/2010/01/01/toronto-plone-add-ons-sprint-1-report/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;toronto-plone-add-ons-sprint-1-report&quot;&gt;

&lt;p&gt;&lt;strong&gt;Via Toronto Plone Users Group&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last month, members of the &lt;a class=&quot;reference external&quot; href=&quot;http://groups.google.com/group/topug&quot;&gt;Toronto Plone user&amp;#8217;s group&lt;/a&gt; helped with Plone.org maintenance. Here is the sprint &amp;#8220;report out&amp;#8221; from Jordan Baker:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;toronto-plone-addons-sprint-report-1&quot;&gt;
&lt;h2&gt;Toronto Plone Addons Sprint Report #1:&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Attending: Robert Jackiewicz, Jordan Baker, John Southern, aclark&lt;/li&gt;
&lt;li&gt;aclark helped out by answering some questions and provided a dump of PSC data from &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/&quot;&gt;plone.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rob was working on getting his buildout working with nginx and documenting the process&lt;/li&gt;
&lt;li&gt;John worked on gettting a task listing setup on coactivate: &lt;a class=&quot;reference external&quot; href=&quot;http://www.coactivate.org/projects/ploneorg-upgrade/tasks/tasklist/show/993&quot;&gt;http://www.coactivate.org/projects/ploneorg-upgrade/tasks/tasklist/show/993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jordan commited changes to allow for filtering by version, autosubmit on selection change and searching using the PSC view instead of the Plone search view. &amp;nbsp;aclark is working on cutting a release...  hopefully we can get a preview soon..&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;outstanding-questions&quot;&gt;
&lt;h2&gt;Outstanding questions:&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;need some help with c.xdv or nginx so we can preview changes in the theme&lt;/li&gt;
&lt;li&gt;Where should we put our issues in the future. &amp;nbsp;There was talk of eating dog food using a Poi instance on &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/&quot;&gt;plone.org&lt;/a&gt; &amp;#8211; can someone help me set that up (add hexsprite and gogojohn as admins)&lt;/li&gt;
&lt;li&gt;Please help us by prioritizing the tasks in the task list on coactivate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;next-sprint&quot;&gt;
&lt;h2&gt;Next Sprint:&lt;/h2&gt;
&lt;p&gt;Shooting for January 22. &amp;nbsp;Hopefully that will work for most people.  Please help us spread the word to interested parties... more details to come.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Review of Veda Williams' Plone 3 Theming</title>
    <id>http://blog.aclark.net/2009/09/22/review-of-veda-williams-plone-3-theming/</id>
    <updated>2009-09-22T00:00:00Z</updated>
    <published>2009-09-22T00:00:00Z</published>
    <link href="http://blog.aclark.net/2009/09/22/review-of-veda-williams-plone-3-theming/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;review-of-veda-williams-plone-3-theming&quot;&gt;

&lt;p&gt;&lt;strong&gt;Review all the chapters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First things first, I can&amp;#8217;t overstate enough how much I personally appreciate Veda&amp;#8217;s efforts to bring the (currently-and-unfortunately, but-not-for-long) complex world of Plone theming to the masses. It&amp;#8217;s an acquired taste, but once you get the hang of it you can use your powerful skills to create some very impressive sites – and make the world a better place like Veda and the crew at &lt;a class=&quot;reference external&quot; href=&quot;http://groundwire.org&quot;&gt;Groundwire&lt;/a&gt; are doing (formerly ONE/Northwest).&lt;/p&gt;
&lt;p&gt;Furthermore, If you are interested in Plone and how Plone theming works, this book is almost certainly for you. It gives you an over abundance of present day theming knowledge, and also covers aspects of the Zope 3 component architecture, where Plone has been, and where it is going to be in the not-so-distant-future.&lt;/p&gt;
&lt;p&gt;Since &lt;a class=&quot;reference external&quot; href=&quot;http://packtpub.com&quot;&gt;PACKT&lt;/a&gt; are well known for giving back to the communities that produce the software that is the subject of their books, purchasing a copy of this book will directly benefit Plone, so I encourage you to do so.&lt;/p&gt;
&lt;p&gt;With all that out of the way, I&amp;#8217;d like to focus on a chapter by chapter review (&lt;a class=&quot;reference external&quot; href=&quot;http://vincentfretin.ecreall.com/articles/review-plone-3-theming&quot;&gt;like&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://seeknuance.com/2009/08/25/a-review-of-plone-3-theming/&quot;&gt;everyone&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://www.littled.net/new/2009/09/27/review-of-plone-3-theming-by-veda-williams/&quot;&gt;else&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://reinout.vanrees.org/weblog/2009/10/25/plone-3-theming.html&quot;&gt;does&lt;/a&gt;) of Plone 3 Theming. Like I said, I really liked this book so please don&amp;#8217;t take any of my (hopefully constructive) criticism negatively. I hope my comments will help the readers of this book, as well as Veda, if she dares to attempt a 2nd edition one day!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STANDARD DISCLAIMERS APPLY&lt;/strong&gt;: I&amp;#8217;m a &amp;#8220;paid&amp;#8221; reviewer (in that I received a free copy of the book) and also, I know Veda personally.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-1&quot;&gt;
&lt;h2&gt;Chapter 1&lt;/h2&gt;
&lt;p&gt;This chapter gives an overview of Plone, which as a total-Plone-fanboy, I very much appreciated. I particularly enjoyed the &amp;#8220;community lore&amp;#8221;.  &amp;#8220;what is Plone&amp;#8221;, and &amp;#8220;books about Plone&amp;#8221; sections. The author also includes a &amp;#8220;Plone vs. Drupal&amp;#8221; comparison and an &amp;#8220;evolution&amp;#8221; section that covers Plone theming-framework changes version by version, which I didn&amp;#8217;t care for as much [1].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-2&quot;&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;p&gt;This chapter lists many tools for graphic design, web browsing, web development (with browser add-ons), and text editing. All useful information. I particularly enjoyed the recommendation for the browser add-on &lt;a class=&quot;reference external&quot; href=&quot;http://developer.yahoo.com/yslow/&quot;&gt;YSlow&lt;/a&gt; which I&amp;#8217;d heard of, but don&amp;#8217;t use regularly.  Recommendations for the traditional UNIX® text editors vi and emacs were missing, but folks that use these editor already know which one they prefer (*wink* – vi), and those that don&amp;#8217;t aren&amp;#8217;t likely to start using them now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-3&quot;&gt;
&lt;h2&gt;Chapter 3&lt;/h2&gt;
&lt;p&gt;Here we get into the now-venerable &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/zc.buildout/1.4.1&quot;&gt;zc.buildout&lt;/a&gt; and how it is used by Plone. I think many folks will appreciate the terminology section, featuring definitions of Zope, Python, and various Python package terminology. I would have liked to have seen the &lt;a class=&quot;reference external&quot; href=&quot;is-anyone-using-plone.orgs-new-pypi-functionality&quot;&gt;PyPI features of plone.org mentioned&lt;/a&gt;, but I&amp;#8217;ll settle for a shameless plug of it here.  Similarly, no mention of git or mercurial in a section about version control (Subversion only), but I suppose (again) those familiar with these technologies already know which one they prefer.&lt;/p&gt;
&lt;p&gt;Lastly, I liked the variety of approaches described in the &amp;#8220;download Plone&amp;#8221; section, from using platform installers to using the unified installer to satisfying all the Plone dependencies by hand. All good information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-4&quot;&gt;
&lt;h2&gt;Chapter 4&lt;/h2&gt;
&lt;p&gt;Using &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/ZopeSkel/2.13&quot;&gt;ZopeSkel&lt;/a&gt; to create a theme package, then adding that package to your buildout as a &amp;#8220;develop egg&amp;#8221; are the main topics covered here. (A side note: I&amp;#8217;m very much looking forward to the upcoming release of ZopeSkel 2.14!  &lt;a class=&quot;reference external&quot; href=&quot;http://www.coactivate.org/projects/zopeskel-bbq-sprint/blog/2009/10/13/zopeskel-bbq-sprint-days-two-three-and-four/&quot;&gt;http://www.coactivate.org/projects/zopeskel-bbq-sprint/blog/2009/10/13/zopeskel-bbq-sprint-days-two-three-and-four/&lt;/a&gt; )&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-5&quot;&gt;
&lt;h2&gt;Chapter 5&lt;/h2&gt;
&lt;p&gt;I like this chapter because it covers a variety of the TTW (through the web) changes that we are consistently reminded we are not supposed to make, but we all know that everyone makes them. The truth is, there is absolutely nothing wrong with TTW changes if you take them for what they are worth. It&amp;#8217;s fine to turn a knob or two TTW, just be aware that at some point you may be turning that knob again TTW, if you don&amp;#8217;t turn a similar knob on the file system ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-6-7&quot;&gt;
&lt;h2&gt;Chapter 6-7&lt;/h2&gt;
&lt;p&gt;Here we get into various Zope 3 concepts: ZCML, browser layers, resources, viewlets and more! If there is such a thing, this would be the &amp;#8220;unfortunate&amp;#8221; part of the modern Plone theming story. Plone themers, for better or worse, must be familiar these concepts in order to be successful. One pet peave I have, that I will mention here because it seems appropriate, is the bundling of GenericSetup in a discussion about Zope 3 concepts. While GenericSetup may use Zope 3 technology under the hood (I assume it does, like most modern Zope 2 code) as a concept it has absolutely nothing to do with Zope 3 (in other words it is not part of the &amp;#8220;component architecture&amp;#8221;) It just happened to be introduced to Plone around the same time various other Zope 3 technology was introduced (via Five), hence people tend to include it in the &amp;#8220;things they hate about Zope 3 in Plone&amp;#8221; category. Perhaps GenericSetup should have been added either before or after the Zope 3 stuff to make it more palatable, but that train has sailed and now we must deal with the consequences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-8&quot;&gt;
&lt;h2&gt;Chapter 8&lt;/h2&gt;
&lt;p&gt;This chapter about TAL (template attribute language) is great stuff. TAL is one of those beautiful technologies that pays for itself once you learn it (unlike various web form frameworks, for example ;-). If like me you can&amp;#8217;t get enough of TAL from Veda&amp;#8217;s book, check out the section on it in the Zope 2 book: &lt;a class=&quot;reference external&quot; href=&quot;http://docs.zope.org/zope2/zope2book/ZPT.html&quot;&gt;http://docs.zope.org/zope2/zope2book/ZPT.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-9-11&quot;&gt;
&lt;h2&gt;Chapter 9-11&lt;/h2&gt;
&lt;p&gt;Here we get to watch Veda design, build, and deploy a theme. This is the focal point of the book, and is worth the price of admission alone. I almost wish the entire book was about this theme, with the other relevant bits sprinkled in as needed. But in any event, these three chapters are what most readers will be most interested in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-12&quot;&gt;
&lt;h2&gt;Chapter 12&lt;/h2&gt;
&lt;p&gt;This is a great little chapter about various add-ons that themers may find interesting. My favorite add-on mentioned in this chapter is Products.FSDump. Very, very useful tool for getting various bits out of your ZODB and on to your file system (e.g. the contents of the portal_skins/custom folder). I&amp;#8217;m really hoping that a 1.0 release will see the light of day one of these days. I notice Veda didn&amp;#8217;t mention it, but there is now an egg-based version of this popular add-on: &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/Products.FSDump/FSDump-0.9.4&quot;&gt;http://pypi.python.org/pypi/Products.FSDump/FSDump-0.9.4&lt;/a&gt; Just add Products.FSDump to your instance section&amp;#8217;s eggs= parameter and off you go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-13&quot;&gt;
&lt;h2&gt;Chapter 13&lt;/h2&gt;
&lt;p&gt;Here, a gratuitous chapter on multimedia wherein various useful multi-media add-ons are mentioned. I say gratuitous because I think there is a misperception that you need these add-ons to accomplish what you want. Plone should do a much better job convincing people that while it is a complex application, a Plone site is also just a website. So if you know how to do it elsewhere (e.g. on a &amp;#8220;regular&amp;#8221; website) it should be easy to do it in Plone (we are not quite there yet). Anyway, some great add-ons are mentioned here of course, but one noticeable absence: &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/collective-fancyzoomview&quot;&gt;http://plone.org/products/collective-fancyzoomview&lt;/a&gt; (which is used by PloneSoftwareCenter on plone.org).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-14&quot;&gt;
&lt;h2&gt;Chapter 14&lt;/h2&gt;
&lt;p&gt;An &amp;#8216;Amen!&amp;#8217; for this chapter that covers deploying and contributing themes, especially on the contributing part. As I mentioned earlier, I would have liked to have seen the &lt;a class=&quot;reference external&quot; href=&quot;is-anyone-using-plone.orgs-new-pypi-functionality&quot;&gt;PyPI features of plone.org mentioned&lt;/a&gt; in this book, and in this chapter in particular. While it is arguably still hard to create Plone themes, it is encouragingly not hard to share them! Also, an incredibly useful tool for releasing themes (and any package) to both plone.org/products and pypi.python.org at the same time (i.e in a single command) is &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/jarn.mkrelease/2.0.2&quot;&gt;http://pypi.python.org/pypi/jarn.mkrelease/2.0.2.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chapter-15&quot;&gt;
&lt;h2&gt;Chapter 15&lt;/h2&gt;
&lt;p&gt;This chapter (by Alexander Limi) introduces people to &amp;#8220;new style&amp;#8221; theming with xdv. While I enjoy this subject tremendously, I think it&amp;#8217;s going to take a while before it is fully digested by integrators.  Hopefully, Alex&amp;#8217;s chapter will help. I&amp;#8217;m also told that Laurence Rowe has been making some improvements to collective.xdv recently, and I see there is a new version here: &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.xdv&quot;&gt;http://pypi.python.org/pypi/collective.xdv&lt;/a&gt; (I think this version handles 404s).&lt;/p&gt;
&lt;p&gt;Bottom line: this is great stuff but potentially confusing in that you have an add-on, collective.xdv, that applies an XSLT transform &amp;#8220;on the fly&amp;#8221; (in memory) to your Plone site, but the recommended deployment strategy is to use NGINX or Apache with Laurence&amp;#8217;s patches applied. I&amp;#8217;ve spent some time doing this (I expect to re-launch this site with xdv soon, and of course plone.org uses it) and it is non-trivial to say the least. What we have now is a situation where folks are starting to use collective.xdv and thinking that *it* is the new way to theme, when in fact it is only part of the story.&lt;/p&gt;
&lt;p&gt;One last pet peeve I will mention is that both &amp;#8220;theming&amp;#8221; and &amp;#8220;skinning&amp;#8221; were used to describe the subject of the book.&amp;nbsp; I would have preferred just &amp;#8220;theming&amp;#8221; (since that is what we are calling it now ;-).&lt;/p&gt;
&lt;p&gt;In conclusion, great job Veda! Thank you very much for your efforts. I look forward to reviewing a second edition. To every one else, I invite you to purchase your copy of this book and get your Plone 3 theming ON: &lt;a class=&quot;reference external&quot; href=&quot;http://www.packtpub.com/plone-3-theming-create-flexible-powerful-professional-templates/mid/220709943ki3?utm_source=aclark.net&amp;amp;utm_medium=affiliate&amp;amp;utm_content=blog&amp;amp;utm_campaign=mdb_001376&quot;&gt;http://www.packtpub.com/plone-3-theming-create-flexible-powerful-professional-templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[1] Quite frankly, I think Plone is in a category all its own (as the most successful Python-based CMS of all time), and while there are certainly comparisons to be made, and lessons to be learned from the competition, I think we should let the readers decide for themselves how Plone stacks up to the competition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">A Sane Buildout For repoze.zope2 + Plone</title>
    <id>http://blog.aclark.net/2009/06/18/a-sane-buildout-for-repoze-zope2-plone/</id>
    <updated>2009-06-18T00:00:00Z</updated>
    <published>2009-06-18T00:00:00Z</published>
    <link href="http://blog.aclark.net/2009/06/18/a-sane-buildout-for-repoze-zope2-plone/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;a-sane-buildout-for-repoze-zope2-plone&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a follow-up to Martin Aspeli&amp;#8217;s introduction to repoze and Plone from last year&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;a-tale-of-two-buildouts&quot;&gt;
&lt;h2&gt;A Tale of Two Buildouts&lt;/h2&gt;
&lt;p&gt;There are two stories going on here, both of which &lt;a class=&quot;reference external&quot; href=&quot;http://www.martinaspeli.net/articles/scrambled-eggs&quot;&gt;Martin Aspeli recently described in great detail&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://plope.com/Members/chrism/distribution_links_considered_harmful&quot;&gt;Chris McDonough tackled last year&lt;/a&gt;. For the purposes of this blog entry, I&amp;#8217;ll refer to the issue as the &amp;#8220;index vs. find-links&amp;#8221; conundrum in buildout&amp;nbsp; (find-links in buildout are equivalent to distribution_links in setuptools).&lt;/p&gt;
&lt;p&gt;For those that want strict repeatability, using the index parameter is the clear winner. It simply forces buildout to do the right thing now and forever, by limiting what packages it can select from. For those that want functionality and don&amp;#8217;t mind the occasional egg-out-of-whack (i.e. unexpected upgrade), then using the find-links parameter can provide a &amp;#8220;sexy&amp;#8221; way to get decent results quickly (but may, and probably will, shoot you in the foot later).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;sexy-but-dangerous&quot;&gt;
&lt;h2&gt;Sexy, but Dangerous&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s start with the sexy, but with less repeat-ability method first.  Using this method we are not specifying our own index. Therefore you are free to add any package from &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/simple/&quot;&gt;PyPI&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org/products/simple&quot;&gt;plone.org&lt;/a&gt; as you see fit.  This is essentially why people like this method (the counter argument is that it is simple to add any additional egg you may want to your index, but we&amp;#8217;ll get to that later).&lt;/p&gt;
&lt;p&gt;So a simple buildout using this method might look like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv plone; cd plone
bin/easy\_install zc.buildout
bin/buildout init
Edit buildout.cfg:
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends =
# Using Martin Aspeli&amp;#39;s good-py, thanks!
    http://good-py.appspot.com/release/repoze.zope2/1.0
    http://dist.plone.org/release/3.3rc3/versions.cfg
versions = versions
find-links =
    http://dist.repoze.org/zope2/latest
    http://dist.repoze.org/zope2/dev/
    http://dist.plone.org/release/3.3rc3
parts = instance[instance]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    repoze.zope2
    Plone
    PIL

4. bin/buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few more steps are required, which we could certainly automate in
buildout, but for now I&amp;#8217;ll just list them here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class=&quot;arabic simple&quot; start=&quot;5&quot;&gt;
&lt;li&gt;bin/mkzopeinstance&lt;/li&gt;
&lt;li&gt;bin/addzope2user admin admin&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now, the moment we&amp;#8217;ve all been waiting for… the fun part!&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class=&quot;arabic simple&quot; start=&quot;7&quot;&gt;
&lt;li&gt;bin/paster serve etc/zope2.ini&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;You should see something like:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[aclark@alex-clarks-macbook-pro]~/Developer/plone% bin/paster serve etc/zope2.ini
2009-06-18 22:52:24 INFO Marshall libxml2-python not available. Unable to register libxml2 based marshallers.
2009-06-18 22:52:27 WARNING ZODB.FileStorage Ignoring index for
/Users/aclark/Developer/p3-repoze-2/var/Data.fsDeprecationWarning: zope.app.annotation has moved to
zope.annotation. Import of zope.app.annotation will become
unsupported in Zope 3.5
/Users/aclark/Developer/plone/eggs/zopelib-2.10.7.0-py2.4-macosx-10.5-i386.egg/zope/configuration/xmlconfig.py:323:
  __import__(arguments[0])
------
2009-06-18T22:52:24 INFO Marshall libxml2-python not available. Unable to register libxml2 based marshallers.
------
2009-06-18T22:52:27 WARNING ZODB.FileStorage Ignoring index for /Users/aclark/Developer/plone/var/Data.fs
Starting server in PID 26900.
zserver on port 8080
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At this point, you should be able to login to
&lt;a class=&quot;reference external&quot; href=&quot;http://localhost:8080/manage&quot;&gt;http://localhost:8080/manage&lt;/a&gt; and create a Plone site.&lt;/p&gt;
&lt;p&gt;Of course, we did a sloppy job here, creating the Zope2 instance in the
root of the buildout, etc. It is possible that
&lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/plone.recipe.zope2instance/3.2&quot;&gt;plone.recipe.zope2install&lt;/a&gt; may help us in the future by supporting
repoze.zope2 instances (or maybe it does already, I didn&amp;#8217;t try).&lt;/p&gt;
&lt;p&gt;Next up?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;boring-but-repeatable&quot;&gt;
&lt;h2&gt;Boring, but Repeatable&lt;/h2&gt;
&lt;p&gt;I kid, but this is actually a very serious concern for many people, and
rightfully so. The notion that your buildout will work the same today as
it does in one year from now may be a strict requirement for your
project. If it is, we can accommodate you (I hope) with the &amp;#8220;index&amp;#8221;
buildout that follows. The downside is that *you* can&amp;#8217;t control what I
put in the index. However, you can certainly create your own index using
this technique.&lt;/p&gt;
&lt;p&gt;An arguably even simpler buildout using this technique might look like
this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ol class=&quot;arabic simple&quot; start=&quot;0&quot;&gt;
&lt;li&gt;virtualenv plone; cd plone&lt;/li&gt;
&lt;li&gt;bin/easy_install zc.buildout&lt;/li&gt;
&lt;li&gt;bin/buildout init&lt;/li&gt;
&lt;li&gt;Edit buildout.cfg:&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
index = http://dist.plone.org/experimental/release/3.3rc3/simple/
parts = instance[instance]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    repoze.zope2
    Plone
    PIL

4. bin/buildout

5. bin/mkzopeinstance

6. bin/addzope2user admin admin

7. bin/paster serve etc/zope2.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;in-conclusion&quot;&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Depending on what my needs are, I might choose either of these
techniques. We can also hold out for &lt;a class=&quot;reference external&quot; href=&quot;http://bugs.python.org/setuptools/issue32&quot;&gt;multi-index support in
setuptools&lt;/a&gt;. That would seemingly make everyone happy. In the meantime,
I can tell you I&amp;#8217;d definitely reach for a buildout sans custom index
first, then ask questions later (i.e. wait for bleeding toes) but that
is just me. If people find the &amp;#8220;index&amp;#8221; technique generally useful, I&amp;#8217;d
be willing to support package sheperding and &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/basketweaver/0.1.2-r6&quot;&gt;index generating with
basketweaver&lt;/a&gt;. Just let me know. If it really catches on, we could
rename &lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/experimental/release/3.3rc3/&quot;&gt;http://dist.plone.org/experimental/release/3.3rc3/&lt;/a&gt; to
&lt;a class=&quot;reference external&quot; href=&quot;http://dist.plone.org/repoze/release/3.3rc3/&quot;&gt;http://dist.plone.org/repoze/release/3.3rc3/&lt;/a&gt;. Of course, if anyone
objects to this or finds it confusing, I can just as easily remove it
(from dist.plone.org).&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a class=&quot;reference external&quot; href=&quot;http://plope.com/&quot;&gt;Chris McDonough&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://www.martinaspeli.net/&quot;&gt;Martin Aspeli&lt;/a&gt; for helping me
scratch my itch!&lt;/p&gt;
&lt;p&gt;Finally, please don&amp;#8217;t rely on any of this &amp;#8220;in production&amp;#8221; yet unless you
know what you are doing. I tested these techniques up to the point of
starting Zope (via paste) and adding a Plone site, nothing more!&lt;/p&gt;
&lt;p&gt;I, however, am getting a new server next week and will be hosting this
site on &lt;a class=&quot;reference external&quot; href=&quot;http://repoze.org/quickstart.html#repoze.zope2&quot;&gt;repoze.zope2&lt;/a&gt; very shortly ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">A LAMP Buildout for Wordpress and Other PHP Apps</title>
    <id>http://blog.aclark.net/2009/04/21/a-lamp-buildout-for-wordpress-and-other-php-apps/</id>
    <updated>2009-04-21T00:00:00Z</updated>
    <published>2009-04-21T00:00:00Z</published>
    <link href="http://blog.aclark.net/2009/04/21/a-lamp-buildout-for-wordpress-and-other-php-apps/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;a-lamp-buildout-for-wordpress-and-other-php-apps&quot;&gt;

&lt;p&gt;&lt;strong&gt;Buildout all the things&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;a-buildout-for-php&quot;&gt;
&lt;h2&gt;A Buildout for PHP?&lt;/h2&gt;
&lt;p&gt;Having been a Plone Consultant for many years now, I find it very painful to deal with non-Python-based technologies and I often will go to great lengths to avoid it. I recently had to deploy a new PHP application on an older Linux server (RHEL3) and could not bring myself to compile the packages, search for RPMs, or do any of the mundane, boring tasks required; so I began to look for an alternative. Enter: the &lt;a class=&quot;reference external&quot; href=&quot;http://svn.aclark.net/svn/public/buildout/lamp/trunk/&quot;&gt;LAMP buildout&lt;/a&gt;. I created and used this to deploy my client&amp;#8217;s PHP application. I hope others find it useful, both as an alternative way to deploy PHP apps, and as an example of the wide variety of things
buildout can be used to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;it-s-just-that-simple&quot;&gt;
&lt;h2&gt;It&amp;#8217;s Just That Simple?&lt;/h2&gt;
&lt;p&gt;Unfortunately, this was not the blissful experience I had hoped for.  There were some non-obvious configuration parameters that had to be dealt with. This was tedious and sometimes painful, but achieving the end result was a uniquely rewarding experience I can assure you! In fact, most of the problems had to do with the individual software components and not buildout itself, which was a pleasure to work with and one of the main reasons I am writing this blog entry. In a Plone buildout for example, in most cases, the tedious parts are handled for you and you just need to &lt;a class=&quot;reference external&quot; href=&quot;getting-excited-about-plone-3-2&quot;&gt;add the Plone egg, run buildout, and start your site&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;break-it-down&quot;&gt;
&lt;h2&gt;Break It Down&lt;/h2&gt;
&lt;p&gt;Now, on to the Buildout. It was developed and tested on Mac OS X 10.5 then deployed to RHEL3. I had a small problem on RHEL3 with the GD imaging library so I removed it (and installed it by hand in /usr/local). Other than that, things went smoothly and I deployed several PHP apps with it just for kicks, including:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Phorum&lt;/li&gt;
&lt;li&gt;SugarCRM&lt;/li&gt;
&lt;li&gt;WordPress&lt;/li&gt;
&lt;li&gt;phpMyAdmin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It builds Apache, PHP, MySQL, GD, and Supervisor. Let&amp;#8217;s take a look.&lt;/p&gt;
&lt;p&gt;First, we define the parts. For each of these, we&amp;#8217;ll do something useful
to contribute to the end result.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
parts =
# Aspeli-style line-spacing to emphasize the functionality of each part or group of parts ;-)
    env
    grp    mysql
    apache
    gd
    php    ports
    mycnf
    mysql-bin
    mysql-admin
    mysql_install_db
    apache-conf
    php-conf# Uncomment only one of these at a time
#    phpmyadmin
#    sugarcrm
#    phorum
    wordpress    supervisor
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that the parts are listed, the rest of the buildout must define those parts. First, we add some utilities required by this buildout.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gocept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collective&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next, we build the core components.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[mysql]
recipe = hexagonit.recipe.cmmi
url = http://mysql.mirrors.hoobly.com/Downloads/MySQL-5.1/mysql-5.1.33.tar.gz
keep-compile-dir = true[apache]
recipe = hexagonit.recipe.cmmi
url = http://www.trieuvan.com/apache/httpd/httpd-2.2.11.tar.gz
configure-options = --enable-so
keep-compile-dir = true[gd]
recipe = hexagonit.recipe.cmmi
url = http://www.libgd.org/releases/gd-2.0.35.tar.gz
keep-compile-dir = true[php]
recipe = zc.recipe.cmmi
environment =
    PATH=${mysql:location}/bin:${env:PATH}
url = http://us2.php.net/get/php-5.2.9.tar.gz/from/this/mirror
# Beware, the new line below (i.e. &amp;#39;&amp;#39;) may need to be undone.
extra_options =
  --prefix=${buildout:directory}/parts/apache/php
  --with-config-file-path=${buildout:directory}/etc/php.ini
  --with-gd=${buildout:directory}/parts/gd
  --with-apxs2=${buildout:directory}/parts/apache/bin/apxs
  --with-mysql=${mysql:location}
  --enable-mbstring
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After that, some configuration. Read the comments below for more information.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Make it easy to change the various port settings[ports]
recipe = plone.recipe.command
command =
    echo These ports are used to configure this LAMP:
    echo Supervisor: ${ports:supervisor}
    echo Apache: ${ports:apache}
    echo MySQL: ${ports:mysql}
supervisor = 9001
apache = 8080
mysql = 3306# All the mysql compile options[mycnf]
recipe = plone.recipe.command
command =
    echo
    echo These options are passed to mysqld_safe: ${mycnf:opt}
    echo
basedir=${mysql:location}
datadir=${buildout:directory}/var
pid=${mycnf:datadir}/mysql.pid
err = ${mycnf:datadir}/log/mysql.err
sock = ${mycnf:datadir}/mysql.sock
# Beware, the new line below (i.e. &amp;#39;&amp;#39;) may need to be undone.
opt = --port=${ports:mysql} --pid-file=${mycnf:pid} --log-error=${mycnf:err}
--basedir=${mycnf:basedir} --datadir=${mycnf:datadir} --socket=${mycnf:sock}# Setup the mysql databases.[mysql_install_db]
recipe = plone.recipe.command
command =
    ${mysql:location}/bin/mysql_install_db --datadir=${mycnf:datadir}
    echo
    echo After starting supervisord, you may want to run:
    echo ${buildout:directory}/parts/mysql/bin/mysqladmin -u root password &amp;#39;new-password&amp;#39;
    echo
update-command = ${mysql_install_db:command}# Generate Config files for Apache and PHP[apache-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/httpd.conf.in
output = ${buildout:directory}/etc/httpd.conf[php-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/php.ini.in
output = ${buildout:directory}/etc/php.ini# Make it easy to run mysql and mysqladmin[mysql-bin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysql.in
output = ${buildout:directory}/bin/mysql[mysql-admin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysqladmin.in
output = ${buildout:directory}/bin/mysqladmin
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, the parts that download the various PHP apps.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[wordpress]
recipe = hexagonit.recipe.download
url = http://wordpress.org/latest.tar.gz
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[phpmyadmin]
recipe = hexagonit.recipe.download
url = http://prdownloads.sourceforge.net/phpmyadmin/phpMyAdmin-3.1.3.2-english.tar.bz2
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[sugarcrm]
recipe = hexagonit.recipe.download
url = http://www.sugarforge.org/frs/download.php/5252/SugarCE-5.2.0c.zip
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[phorum]
recipe = hexagonit.recipe.download
url = http://www.phorum.org/downloads/phorum-5.2.10.tar.gz
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the supervisor that will control everything.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[supervisor]
recipe = collective.recipe.supervisor
port = ${ports:supervisor}
serverurl = http://127.0.0.1:${ports:supervisor}
pp = ${buildout:directory}/eggs/supervisor-3.0a6-py2.4.egg/supervisor/pidproxy.py
# Beware, the new line below (i.e. &amp;#39;&amp;#39;) may need to be undone.
programs =
    10 mysql ${supervisor:pp} [ ${mycnf:pid} ${mysql:location}/bin/mysqld_safe ${mycnf:opt} ]
    20 apache ${apache:location}/bin/httpd [ -c &amp;quot;ErrorLog /dev/stdout&amp;quot; -DFOREGROUND
                                             -f ${buildout:directory}/etc/httpd.conf ]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested in trying this yourself, please see: &lt;a class=&quot;reference external&quot; href=&quot;http://svn.aclark.net/svn/public/buildout/lamp/trunk/&quot;&gt;http://svn.aclark.net/svn/public/buildout/lamp/trunk/&lt;/a&gt; and let me know how it goes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Getting Excited About Plone as Eggs</title>
    <id>http://blog.aclark.net/2008/12/15/getting-excited-about-plone-as-eggs/</id>
    <updated>2008-12-15T00:00:00Z</updated>
    <published>2008-12-15T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/12/15/getting-excited-about-plone-as-eggs/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;getting-excited-about-plone-as-eggs&quot;&gt;

&lt;p&gt;&lt;strong&gt;Updated for 4.x&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m really excited about this because it greatly simplifies the development and deployment story for &lt;a class=&quot;reference external&quot; href=&quot;http://plone.org&quot;&gt;Plone&lt;/a&gt;. For example you can now create a Plone &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; file like this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
extends = http://dist.plone.org/release/4.0a1/versions.cfgversions = versions
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz
parts = instance

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Thanks framework team and core developers for this impressive release.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">collective.recipe.supervisor: Thank You</title>
    <id>http://blog.aclark.net/2008/08/10/re-collective-recipe-supervisor-thank-you/</id>
    <updated>2008-08-10T00:00:00Z</updated>
    <published>2008-08-10T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/08/10/re-collective-recipe-supervisor-thank-you/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;collective-recipe-supervisor-thank-you&quot;&gt;

&lt;p&gt;&lt;strong&gt;Now even easier to use Supervisor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since I &lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2008/05/15/supervisor-rocks/index.html&quot;&gt;last wrote about supervisor&lt;/a&gt; it&amp;#8217;s become easier to use thanks to &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recipe.supervisor&quot;&gt;collective.recipe.supervisor&lt;/a&gt;. Now it&amp;#8217;s as simple as editing your &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add a section for Supervisor:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
    parts =
        ...
        supervisor
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Create the section:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[supervisor]
recipe = collective.recipe.supervisor
programs =
    10 zeo ${zeo:location}/bin/runzeo ${zeo:location}
    20 instance ${instance:location}/bin/runzope ${instance:location} true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Run Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
Installing supervisor.
Getting distribution for &amp;#39;supervisor&amp;#39;.
Got supervisor 3.0a6.
Getting distribution for &amp;#39;elementtree&amp;gt;=1.2.6,&amp;lt;1.2.7&amp;#39;.
zip_safe flag not set; analyzing archive contents...
Got elementtree 1.2.6-20050316.
Getting distribution for &amp;#39;meld3&amp;gt;=0.6.4&amp;#39;.
zip_safe flag not set; analyzing archive contents...
Got meld3 0.6.5.
Getting distribution for &amp;#39;medusa&amp;gt;=0.5.4&amp;#39;.
zip_safe flag not set; analyzing archive contents...
Got medusa 0.5.4.
Generated script &amp;#39;/Users/aclark/Developer/supervisor-recipe-test/bin/supervisord&amp;#39;.
Generated script &amp;#39;/Users/aclark/Developer/supervisor-recipe-test/bin/memmon&amp;#39;.
Generated script &amp;#39;/Users/aclark/Developer/supervisor-recipe-test/bin/supervisorctl&amp;#39;.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Start Supervisor in the foreground:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/supervisord -e debug -n
2008-08-27 06:40:34,805 INFO Increased RLIMIT_NOFILE limit to 1024
2008-08-27 06:40:35,036 INFO RPC interface &amp;#39;supervisor&amp;#39; initialized
2008-08-27 06:40:35,036 WARN cElementTree not installed,
    using slower XML parser for XML-RPC
2008-08-27 06:40:35,036 CRIT Server &amp;#39;inet_http_server&amp;#39; running without
    any HTTP authentication checking
2008-08-27 06:40:35,037 INFO supervisord started with pid 99684
2008-08-27 06:40:36,041 INFO spawned: &amp;#39;zeo&amp;#39; with pid 99686
2008-08-27 06:40:36,049 INFO spawned: &amp;#39;instance&amp;#39; with pid 99687
2008-08-27 06:40:37,051 INFO success: zeo entered RUNNING state,
    process has stayed up for &amp;gt; than 1 seconds (startsecs)
2008-08-27 06:40:37,051 INFO success: instance entered RUNNING state,
    process has stayed up for &amp;gt; than 1 seconds (startsecs)
2008-08-27 06:40:41,574 DEBG &amp;#39;instance&amp;#39; stdout output:
2008-08-27 06:40:41 INFO ZServer HTTP server started at Wed Aug 27 06:40:41 2008
    Hostname: localhost
    Port: 8080...2008-08-27 06:41:28,396 DEBG &amp;#39;instance&amp;#39; stdout output:
2008-08-27 06:41:28 INFO Application New disk product detected,
    determining if we need to fix up any ZClasses.2008-08-27 06:41:28,452 DEBG &amp;#39;instance&amp;#39; stdout output:
2008-08-27 06:41:28 INFO Zope Ready to handle requests
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Start Supervisor in the background:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supervisord&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Get the status:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ supervisorctl status
instance                         RUNNING    pid 99889, uptime 0:00:04
zeo                              RUNNING    pid 99888, uptime 0:00:04
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Start/stop Zope/ZEO:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/supervisorctl stop instance
instance: stopped$ bin/supervisorctl stop zeo
zeo: stopped$ bin/supervisorctl start zeo
zeo: started$ bin/supervisorctl start instance
instance: started$ bin/supervisorctl stop all
zeo: stopped
instance: stopped$ bin/supervisorctl start  all
zeo: startedinstance: started
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Thanks &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/collective.recipe.supervisor/0.4#contributors&quot;&gt;Mustapha Benali, Author &amp;amp; Hanno Schlichting, Contributor&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Supervisor Rocks</title>
    <id>http://blog.aclark.net/2008/05/15/supervisor-rocks/</id>
    <updated>2008-05-15T00:00:00Z</updated>
    <published>2008-05-15T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/05/15/supervisor-rocks/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;supervisor-rocks&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a reiteration of Carlos de la Guardia&amp;#8217;s recent post on the subject&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You should probably be using &lt;a class=&quot;reference external&quot; href=&quot;http://supervisord.org&quot;&gt;Supervisor&lt;/a&gt; because:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Starting and stopping Zope and ZEO separately is no fun.&lt;/li&gt;
&lt;li&gt;Using Supervisor is easy and fun.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add a new section your &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;buildout.cfg&lt;/span&gt;&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parts =
    ...
    supervisor
    ...

[supervisor]
recipe = zc.recipe.egg
egg = supervisor
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Create a configuration file:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[inet_http_server]
port=127.0.0.1:9999
#username=admin
#password=admin

[supervisord]
logfile=%(here)s/../var/log/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info
pidfile=%(here)s/../var/supervisord.pidnodaemon=false

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=http://127.0.0.1:9999

[program:zeo]
command = %(here)s/../parts/zeo/bin/runzeo
priority = 10

[program:zope]
command = %(here)s/../parts/instance/bin/runzope
priority = 20
redirect_stderr = true
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now run Buildout:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and start Supervisor:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supervisord&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then use &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;supervisorctl&lt;/span&gt;&lt;/code&gt; to start and stop your Zope and ZEO at the same time:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/supervisorctl start all
bin/supervisorctl stop all
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Stop Supervisor with:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/supervisorctl shutdown
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Thanks Chris McDonough of &lt;a class=&quot;reference external&quot; href=&quot;http://agendaless.com/&quot;&gt;Agendaless Consulting&lt;/a&gt; and Mike Naberezny of &lt;a class=&quot;reference external&quot; href=&quot;http://maintainable.com/&quot;&gt;Maintainable Software,&lt;/a&gt; plus &lt;a class=&quot;reference external&quot; href=&quot;http://supervisord.org/contributors/&quot;&gt;contributors&lt;/a&gt; for creating and maintaining Supervisor.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Help Me Upgrade plone.org</title>
    <id>http://blog.aclark.net/2008/04/18/help-me-upgrade-plone-org/</id>
    <updated>2008-04-18T00:00:00Z</updated>
    <published>2008-04-18T00:00:00Z</published>
    <link href="http://blog.aclark.net/2008/04/18/help-me-upgrade-plone-org/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;help-me-upgrade-plone-org&quot;&gt;

&lt;p&gt;&lt;strong&gt;Because plone.org should run the latest Plone&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You may be wondering why plone.org is not running the latest version of Plone. Well wonder no more! By the end of this month, it will be. I have been &lt;a class=&quot;reference external&quot; href=&quot;http://dev.plone.org/plone/log/PloneOrg/buildouts/branches/3.0&quot;&gt;working on&lt;/a&gt;the various bits and pieces needed to upgrade for months, including:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Testing the &amp;#8220;live&amp;#8221; Data.fs against the latest release of Plone.&lt;/li&gt;
&lt;li&gt;Converting old-style Zope 2 Products to eggs.&lt;/li&gt;
&lt;li&gt;Rallying the troops to contribute as needed.&lt;/li&gt;
&lt;li&gt;Becoming a plone.org admin so I can drive the process myself.&lt;/li&gt;
&lt;li&gt;and much, much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I can promise you that tremendous progress will be made at the Paris sprint next week, including:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Finalization of the dist-utils enabled PloneSoftwareCenter that will be used.&lt;/li&gt;
&lt;li&gt;Adding blob support to PloneSoftwareCenter (Witsch, can you help?)&lt;/li&gt;
&lt;li&gt;Migrating all PSCFile objects from ExternalStorage to blob.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So please, if you would like to see an upgraded plone.org as much as I would, please consider making a generous donation to my travel fund. I&amp;#8217;d like to raise around $1000 to get reimbursed for my airfare only; I will be sleeping on a donated couch. The suggested donation amount is $50-100, but any amount is welcome. Thank you all very much!!! And thanks to everyone that has helped with the upgrade so far including but not limited to: Limi, Wiggy, SteveM, Tarek, Maurits, Newbery, Jens, Witsch, MattBowen!&lt;/p&gt;
&lt;p&gt;Lastly, I promise to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Cut the fundraiser off as soon as I reach my goal, and&lt;/li&gt;
&lt;li&gt;Report back with results by the end of the month.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now without further ado, please donate-away!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">Buildout Recipe Tip: hexagonit.recipe.download</title>
    <id>http://blog.aclark.net/2007/11/28/zcbuildout-recipe-tip-hexagonitrecipedownload-ftw-for-the-win/</id>
    <updated>2007-11-28T00:00:00Z</updated>
    <published>2007-11-28T00:00:00Z</published>
    <link href="http://blog.aclark.net/2007/11/28/zcbuildout-recipe-tip-hexagonitrecipedownload-ftw-for-the-win/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;buildout-recipe-tip-hexagonit-recipe-download&quot;&gt;

&lt;p&gt;&lt;strong&gt;How to handle difficult old-style add-ons.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes an &amp;#8220;old-style&amp;#8221; add-on is distributed as &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;foo.tar.gz&lt;/span&gt;&lt;/code&gt; and extracts to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;foo/&lt;/span&gt;&lt;/code&gt;, but the package is called &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bar&lt;/span&gt;&lt;/code&gt;. This can be a problem when using the &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;plone.recipe.productdistros&lt;/span&gt;&lt;/code&gt; recipe because when &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bar&lt;/span&gt;&lt;/code&gt; is extracted to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;parts/productdistros/foo&lt;/span&gt;&lt;/code&gt; it will not work.&lt;/p&gt;
&lt;p&gt;Fortunately there is &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hexagonit.recipe.download&lt;/span&gt;&lt;/code&gt;, which allows you to specify the destination. For example, &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/Products.ZNagios&quot;&gt;ZNagios&lt;/a&gt; (an add-on that integrates Zope with Nagios) is available as a tarball here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar&quot;&gt;http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we use productdistros, we end up with ZNagios installed in &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;parts/productdistros/trunk&lt;/span&gt;&lt;/code&gt;. But if we use &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hexagonit.recipe.download&lt;/span&gt;&lt;/code&gt; we can control the destination.&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[buildout]
parts = znagios

[znagios]
recipe = hexagonit.recipe.download
url = http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar
destination = products/ZNagios
strip-top-level-dir = True
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After running Buildout you should have the following in your &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;products/&lt;/span&gt;&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/products/ZNagios
/products/ZNagios/COPYRIGHT.txt
/products/ZNagios/LICENSE.txt
/products/ZNagios/README.txt
/products/ZNagios/__init__.py
/products/ZNagios/check_zope.py
/products/ZNagios/munin_client.py
/products/ZNagios/version.txt
/products/ZNagios/zeo_munin.py
/products/ZNagios/zope.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/category/buildout/atom.xml">
    <title type="text">First Post</title>
    <id>http://blog.aclark.net/2007/10/17/first-post/</id>
    <updated>2007-10-17T00:00:00Z</updated>
    <published>2007-10-17T00:00:00Z</published>
    <link href="http://blog.aclark.net/2007/10/17/first-post/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;first-post&quot;&gt;

&lt;p&gt;&lt;strong&gt;I have decided to start a blog!&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt=&quot;../../../_images/balloons_clip_art_15536.jpg&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../../_images/balloons_clip_art_15536.jpg&quot; /&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Why? Because Plone allows me to do so. But also:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;I have been reading a lot of Plone blogs lately and they have inspired me to write my own.&lt;/li&gt;
&lt;li&gt;I want to interact with other Plonistas.&lt;/li&gt;
&lt;li&gt;I want to get my web 2.0 on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To that end, this post is about my &lt;a class=&quot;reference external&quot; href=&quot;http://svn.plone.org/svn/collective/newzope&quot;&gt;build tools&lt;/a&gt; and how I love them. Note there are other ways to accomplish this task, for example:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.buildout.org&quot;&gt;Buildout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://agendaless.com/Members/chrism/software/buildit&quot;&gt;Buildit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://plone.org/products/instance-manager&quot;&gt;Instance Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used Buildout for the first time at the &lt;a class=&quot;reference external&quot; href=&quot;https://plone.org/events/sprints/past-sprints/baarn-ui-sprint-2007&quot;&gt;Baarn UI Sprint 2007&lt;/a&gt; and liked it. I&amp;#8217;ve also used Chris McDonough&amp;#8217;s Buildit. That may be where I end up, and there are several more to choose from, but for now I enjoy typing:&lt;/p&gt;
&lt;style&gt;
pre:before { content: '$ ' }
&lt;/style&gt;

&lt;pre&gt;
newzope test-site ProductA ProductB ProductC
&lt;/pre&gt;&lt;p&gt;and having a working instance a few seconds later with Product{A,B,C} installed. Of course this requires I have a working Zope already... and that I edit Zope&amp;#8217;s &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;skel/etc/zope.conf&lt;/span&gt;&lt;/code&gt;... but nothing is perfect... and old habits die hard.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
