<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Alex Clark's Blog - Posted in 2016</title>
  <id>http://blog.aclark.net/blog/2016/atom.xml</id>
  <updated>2016-10-26T00:00:00Z</updated>
  <link href="http://blog.aclark.net" />
  <link href="http://blog.aclark.net/blog/2016/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.8.3">ABlog</generator>
  <entry xml:base="http://blog.aclark.net/blog/2016/atom.xml">
    <title type="text">Project Makefile Open for Business</title>
    <id>http://blog.aclark.net/2016/10/26/project-makefile-open-business/</id>
    <updated>2016-10-26T00:00:00Z</updated>
    <published>2016-10-26T00:00:00Z</published>
    <link href="http://blog.aclark.net/2016/10/26/project-makefile-open-business/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;project-makefile-open-for-business&quot;&gt;

&lt;p&gt;&lt;strong&gt;Makefile for Python Web Development &amp;amp; Related Projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A while back I was asked to speak to the Configuration Management Working Group of DC:&lt;/p&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;https://twitter.com/CMWorkingGrp/status/773228143939293185&quot;&gt;&lt;img alt=&quot;../../_images/project-makefile-tweet.png&quot; class=&quot;img-thumbnail&quot; src=&quot;../../_images/project-makefile-tweet.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;From that moment on, it was on: an excuse to finish and talk about the &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Makefile&lt;/span&gt;&lt;/code&gt; I&amp;#8217;d been dragging around &lt;em&gt;formerly since January&lt;/em&gt; and informerly much longer.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;finishing-the-makefile&quot;&gt;
&lt;h2&gt;Finishing the Makefile&lt;/h2&gt;
&lt;p&gt;I started writing slides on the &lt;a class=&quot;reference external&quot; href=&quot;http://slides.com/aclark/project-makefile&quot;&gt;impressive slides.com&lt;/a&gt; then I realized I had to finished the Makefile to finish the slides. This mostly involved deciding on target names and testing target execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;finishing-the-slides&quot;&gt;
&lt;h2&gt;Finishing the Slides&lt;/h2&gt;
&lt;p&gt;As I mentioned above, slides.com is &lt;em&gt;very&lt;/em&gt; nice. I had hoped to be able to build the slides myself with reveal.js, but in lieu of JavaScript skills I settled on using the slides.com editor. Later I exported and converted them to PDF with pandoc, which was not as nice (through no fault of pandoc, I&amp;#8217;m sure; I just wish I could get a better PDF copy from the slides.com HTML export.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;closed-for-business&quot;&gt;
&lt;h2&gt;Closed for Business&lt;/h2&gt;
&lt;p&gt;For month after month as I continued to tweak, the project-makefile repository README contained the following:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;**DO NOT USE THIS**

At some point I started using a ``Makefile`` in my Python projects. This repository
contains that ``Makefile``.

**shrug**
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;open-for-business&quot;&gt;
&lt;h2&gt;Open for Business&lt;/h2&gt;
&lt;p&gt;Now it contains this:&lt;/p&gt;
&lt;div class=&quot;highlight-python&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installation
------------

::

    curl -O https://raw.githubusercontent.com/aclark4life/project-makefile/master/Makefile


Usage
-----

::

    Usage: make [TARGET]
    Available targets:

        - ablog
        - ablog-build
        - ablog-clean
        - ablog-init
        - ablog-install
        - ablog-serve
        - co
        - commit
        - commit-auto
        - commit-edit
        - django
        - django-clean
        - django-clean-migrations
        - django-init
        - django-install
        - django-migrate
        - django-migrations
        - django-serve
        - django-shell
        - django-static
        - django-su
        - django-test
        - django-yapf
        - git-checkout-remotes
        - git-commit
        - git-commit-auto
        - git-commit-auto-push
        - git-commit-edit
        - git-push
        - grunt
        - grunt-file
        - grunt-init
        - grunt-install
        - grunt-serve
        - h
        - he
        - heroku
        - heroku-debug-off
        - heroku-debug-on
        - heroku-init
        - heroku-push
        - heroku-remote
        - heroku-shell
        - heroku-web-off
        - heroku-web-on
        - install
        - lint
        - npm
        - npm-init
        - npm-install
        - package
        - package-check-manifest
        - package-init
        - package-lint
        - package-pyroma
        - package-readme
        - package-release
        - package-release-test
        - package-test
        - pdf
        - plone
        - plone-heroku
        - plone-init
        - plone-install
        - plone-serve
        - push
        - python-clean
        - python-flake
        - python-freeze
        - python-install
        - python-lint
        - python-serve
        - python-virtualenv
        - python-wc
        - python-yapf
        - release
        - release-test
        - review
        - serve
        - sphinx
        - sphinx-build
        - sphinx-clean
        - sphinx-init
        - sphinx-install
        - sphinx-serve
        - test
        - vagrant
        - vagrant-clean
        - vagrant-down
        - vagrant-init
        - vagrant-up
        - vagrant-update
        - vm

- Check out the `slides &amp;lt;http://slides.com/aclark/project-makefile&amp;gt;`_ for more information.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now I invite everyone to use and contribute!&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/project-makefile&quot;&gt;https://github.com/aclark4life/project-makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2016/atom.xml">
    <title type="text">Yup, this blog is now powered by ABlog</title>
    <id>http://blog.aclark.net/2016/04/03/yup-this-blog-is-now-powered-by-ablog/</id>
    <updated>2016-04-03T00:00:00Z</updated>
    <published>2016-04-03T00:00:00Z</published>
    <link href="http://blog.aclark.net/2016/04/03/yup-this-blog-is-now-powered-by-ablog/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;yup-this-blog-is-now-powered-by-ablog&quot;&gt;

&lt;p&gt;&lt;strong&gt;Blog functionality for Sphinx&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;../../_images/ablog-for-sphinx.jpg&quot; class=&quot;img-thumbnail&quot; src=&quot;../../_images/ablog-for-sphinx.jpg&quot; /&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After years of using Pelican for blogging and Sphinx for everything else, I became annoyed that Pelican&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://docs.getpelican.com/en/3.6.3/content.html#file-metadata&quot;&gt;File metadata format&lt;/a&gt; did not match Sphinx&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://www.sphinx-doc.org/en/stable/rest.html#directives&quot;&gt;directives&lt;/a&gt;. Around the same time, I noticed that &lt;a class=&quot;reference external&quot; href=&quot;http://ablog.readthedocs.org/&quot;&gt;ABlog&lt;/a&gt; had matured enough to be usable.&lt;/p&gt;
&lt;p&gt;So late last year I began converting all my Pelican metadata to Sphinx directives, and did quite a bit of clean up as well. I&amp;#8217;m finally finished, and now ready to present the results (&lt;strong&gt;ta-da&lt;/strong&gt;). Thank you Pelican for all the years of service, and thank you ABlog for helping me use Sphinx for blogging!&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/blog&quot;&gt;https://github.com/aclark4life/blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.aclark.net/blog/2016/atom.xml">
    <title type="text">Updated Django Website</title>
    <id>http://blog.aclark.net/2016/02/21/updated-django-website/</id>
    <updated>2016-02-21T00:00:00Z</updated>
    <published>2016-02-21T00:00:00Z</published>
    <link href="http://blog.aclark.net/2016/02/21/updated-django-website/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;updated-django-website&quot;&gt;

&lt;p&gt;&lt;strong&gt;One year later&lt;/strong&gt;&lt;/p&gt;
&lt;img alt=&quot;../../_images/aclarknet-website.png&quot; class=&quot;img-thumbnail align-center&quot; src=&quot;../../_images/aclarknet-website.png&quot; /&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Last year I wrote about developing our company website with Django:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://blog.aclark.net/2015/01/11/new-django-website/index.html&quot;&gt;http://blog.aclark.net/2015/01/11/new-django-website/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This year, I updated the site and am again very happy with the results. Here&amp;#8217;s an overview of the interesting aspects.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;makefile&quot;&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve continued to develop Python projects using a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Makefile&lt;/span&gt;&lt;/code&gt;. So much so I&amp;#8217;m now attempting to genericize the approach here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aclark4life/python-project&quot;&gt;https://github.com/aclark4life/python-project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;project-app&quot;&gt;
&lt;h2&gt;Project/App&lt;/h2&gt;
&lt;p&gt;Last year around this time I didn&amp;#8217;t fully understand what I was doing with &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;startproject&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;startapp&lt;/span&gt;&lt;/code&gt; (as evidenced by &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-django/tree/master/aclarknet/aclarknet/aclarknet&quot;&gt;this insanely nested package structure&lt;/a&gt;). Now I understand a little bit more, so I settled on a project called &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;aclarknet&lt;/span&gt;&lt;/code&gt; and an app called &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;website&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;rest-powered&quot;&gt;
&lt;h2&gt;REST-powered&lt;/h2&gt;
&lt;p&gt;I haven&amp;#8217;t written about it yet, but I spent a lot of time in December developing a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-database&quot;&gt;time tracking and invoicing application&lt;/a&gt; (more on that later). As such, I couldn&amp;#8217;t tolerate storing identical data in multiple locations. So &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-database/blob/master/aclarknet/database/serializers.py&quot;&gt;exposed the data I needed&lt;/a&gt; via Django Rest Framework &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-website/blob/master/aclarknet/website/views.py#L37&quot;&gt;then consumed it with requests&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-nice-features&quot;&gt;
&lt;h2&gt;Other nice features&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Django 1.9.2&lt;/li&gt;
&lt;li&gt;Bootstrap 3.3.6&lt;/li&gt;
&lt;li&gt;Logo created with Illustrator (IANAGA, but it was &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-logo&quot;&gt;fun to try&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy the &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net&quot;&gt;site&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ACLARKNET/aclarknet-website&quot;&gt;code&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://aclark.net/contact&quot;&gt;hire my business&lt;/a&gt; in 2016!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
